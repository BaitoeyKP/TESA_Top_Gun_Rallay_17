/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.11.2023 05:40:50

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 40561, -42005, -42032, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00012781456462107599, 0.00013658928219228983, 0.00014194508548825979, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 77,84,126,-84,-55,12,-28,42,-12,54,35,-28,-37,-105,101,26,-59,76,107,119,-24,-23,59,-105,-122,127,-78,12,100,15,-23,5, 
  /* [1][0][][] */ 64,-36,-70,13,-9,127,-14,-6,124,-57,-1,-94,-62,107,31,-50,93,-45,-22,-104,-123,23,107,76,19,5,5,-28,-85,-50,-2,-35, 
  /* [2][0][][] */ -34,76,-84,69,72,-41,-29,111,90,27,122,-20,-93,-86,78,115,-81,-55,-6,-112,69,109,-53,-87,82,-53,-16,-127,4,-74,82,-41, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0030657646711915731, 0.0032762351911514997, 0.0034046994987875223, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 396, -53, -138, -480, -209, 314, -299, 187, 273, 656, 196, 841, -384, 347, -514, -93, 425, -278, 878, 240, 161, 183, -423, 302, -355, -10, -296, 1021, 582, -337, -258, 159, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3602070945780724e-05, 3.8909689465072006e-05, 4.6733188355574384e-05, 4.393027484184131e-05, 4.1481969674350694e-05, 4.5775181206408888e-05, 4.133660695515573e-05, 4.2576684791129082e-05, 4.4963515392737463e-05, 4.8798021452967077e-05, 4.320403968449682e-05, 4.845753574045375e-05, 4.5574095565825701e-05, 4.3098778405692428e-05, 4.4028012780472636e-05, 4.1896932089002803e-05, 4.0383154555456713e-05, 4.1421433707000688e-05, 4.7356916184071451e-05, 4.4387652451405302e-05, 4.4996970245847479e-05, 4.8002799303503707e-05, 4.2852763726841658e-05, 4.6047509385971352e-05, 4.1946812416426837e-05, 4.5419114030664787e-05, 4.3476284190546721e-05, 4.4623233407037333e-05, 4.5172746467869729e-05, 4.1364008211530745e-05, 4.1616352973505855e-05, 5.018311640014872e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -53,-57,112,0,82,-12,-79,-112,46,-78,-98,4,46,12,-32,62,-46,-24,-71,-57,-63,-93,13,114,-127,20,84,-39,115,-9,-11,-71,79,-62,-83,64,-100,-96,-96,38,67,-80,-84,104,36,-124,91,-13,17,-65,-48,83,-69,-56,-104,91,28,78,105,-100,-91,85,-43,56,-13,6,78,102,35,105,95,-114,109,-111,42,93,-115,22,-51,17,59,18,93,-20,-52,-32,-74,93,33,113,-6,-104,9,65,15,28, 
  /* [1][0][][] */ -48,38,-92,-5,-32,99,41,25,98,-111,-114,102,75,-22,25,65,119,-43,44,126,-49,-11,37,32,43,7,-48,104,10,12,105,-74,77,125,-5,34,56,75,3,-87,-61,13,-41,-104,-33,45,-27,-64,-20,-91,127,74,11,89,-81,-52,42,101,74,90,-64,120,-66,-88,-60,46,81,30,124,18,20,19,-125,114,-44,42,101,-53,-49,84,-89,103,-54,-125,28,124,-88,-66,92,93,94,16,102,106,40,-14, 
  /* [2][0][][] */ 58,56,-60,100,-11,-61,76,105,-73,101,-35,104,92,-10,75,-107,-59,-29,41,72,-93,-19,97,15,-9,73,89,2,-70,69,72,104,-65,-4,-94,-80,-84,109,116,-33,-96,-72,14,-4,-55,127,-4,-72,92,44,93,-81,-49,75,28,38,-70,78,-40,-2,1,51,-40,52,106,51,39,72,-73,65,-1,-70,24,-50,26,22,-51,-28,0,27,33,-72,-16,-27,0,-96,-24,-23,77,112,-29,23,-32,-85,-32,-63, 
  /* [3][0][][] */ 63,-10,28,-32,-76,42,-118,28,42,10,55,-4,82,86,63,-2,94,88,-66,9,105,-95,-73,-120,-32,-116,-88,95,37,-100,75,-2,-66,-45,-21,-25,-99,-32,31,39,-33,-99,-103,-9,64,19,-55,-91,56,-88,34,-8,82,17,80,-104,-127,-123,-125,-67,-103,27,-43,62,43,-41,-69,-41,-37,-76,-6,91,10,-112,44,-58,22,86,86,-72,-95,-126,29,81,20,36,-51,-122,-89,35,-9,-112,85,-98,-97,33, 
  /* [4][0][][] */ 40,91,-5,39,-27,-26,30,3,47,79,-11,46,14,-37,-15,-72,-27,-8,-84,8,109,-96,86,25,-31,-5,64,-65,-51,25,-75,-69,67,108,15,-119,-53,-13,-127,48,-55,-66,-85,-97,20,95,22,54,18,-55,-32,-77,-107,30,-99,7,34,-112,14,13,-8,-82,-38,-70,-65,47,-1,-41,13,-112,-103,-86,-58,7,103,50,63,-26,-11,-75,2,-49,-106,-36,-4,71,88,-13,-124,-92,38,34,32,94,-113,-24, 
  /* [5][0][][] */ 73,-103,80,74,19,-106,32,33,83,-127,4,-59,8,89,37,41,65,62,-83,76,35,56,24,-19,-107,-56,-8,-79,51,17,19,-105,-43,-10,-58,-6,-101,-57,23,29,-96,-46,44,94,-55,1,11,-45,-101,81,6,11,39,-4,18,-45,102,53,-65,-31,8,-59,39,-62,-38,76,-18,35,45,5,106,-64,-36,53,-24,-60,-8,-38,18,59,103,24,31,83,-73,84,2,19,69,-102,116,74,-29,25,48,-73, 
  /* [6][0][][] */ 35,-34,114,82,-90,-71,-6,82,-1,-64,3,-91,111,57,117,-127,39,-1,21,116,-83,-127,109,57,-62,-83,-13,-63,-32,-120,47,-78,-97,-122,-51,-89,-13,50,-101,79,90,55,27,-18,-96,118,-80,-49,-90,25,-8,-70,60,-34,101,-5,3,-12,-58,112,-87,-1,66,-79,-36,69,100,-55,87,0,-114,-8,54,-55,-97,-46,-86,-109,-62,-8,33,-22,43,-23,-76,-94,-45,-98,84,101,95,27,-53,-73,98,-23, 
  /* [7][0][][] */ 108,47,-41,-55,-66,126,-14,-18,104,3,-93,3,59,-84,49,78,58,22,-8,105,60,40,-1,93,-88,96,46,57,-75,114,-21,30,34,29,76,80,-102,83,-24,-24,98,-72,67,72,30,-11,94,-112,59,-55,-117,-61,-25,71,19,13,127,-89,8,-52,1,-6,88,-107,-65,-54,74,21,-114,3,74,93,93,9,69,61,-57,61,-96,27,94,-39,-13,-78,89,40,-111,98,88,4,86,47,-52,-36,-5,-86, 
  /* [8][0][][] */ -6,10,-36,-90,53,34,-64,-40,-12,28,49,94,3,-40,-76,-63,-58,97,-73,0,36,-16,85,112,-122,91,51,79,-58,25,-83,98,93,-34,55,-24,118,-15,-40,76,73,103,-103,-110,-34,-44,-43,107,23,-91,-73,3,-58,-26,-33,-127,53,111,-93,107,92,45,49,112,-27,-48,-13,104,-100,51,41,5,82,45,15,28,-41,109,86,52,37,69,-99,-94,28,48,78,-43,42,-42,-75,75,-80,-90,-57,60, 
  /* [9][0][][] */ 19,31,115,59,97,-83,-28,-84,56,70,7,58,-17,-54,-67,-8,21,16,-70,-39,13,102,-81,-76,127,2,3,37,6,-56,-65,96,63,19,37,7,-53,41,-8,-26,68,-44,59,-62,97,43,-68,66,61,11,-60,-23,81,-53,-35,116,91,-43,10,11,-60,115,82,-56,-84,28,108,53,-10,99,103,-65,14,93,-71,-70,-53,-91,-20,112,46,44,96,41,-20,-72,44,9,101,50,-7,95,117,16,70,-21, 
  /* [10][0][][] */ -75,60,90,-79,-10,114,112,9,23,29,28,-79,101,85,-32,15,-30,85,-105,-72,-14,33,62,-64,13,47,-112,-112,-45,85,-95,-88,93,103,127,52,-36,1,-50,39,-34,120,-127,-35,-119,-67,-14,-59,3,3,29,18,62,5,-62,-54,-91,-14,33,-40,-10,80,118,48,121,-75,-92,-22,15,-38,-86,-61,93,47,-75,109,-8,69,71,3,79,-4,61,98,-100,74,101,-22,41,6,-6,-88,-49,-45,-49,-85, 
  /* [11][0][][] */ 118,38,4,112,127,61,65,47,122,104,-49,114,12,-57,48,-39,-35,-71,72,55,39,84,39,-77,-65,-72,-2,78,84,13,40,2,-55,-43,58,65,-38,94,-5,-39,3,111,-52,27,-10,-27,-54,-59,92,117,116,67,-67,-60,38,51,-43,-39,-5,-61,-42,99,79,19,48,102,-32,37,106,62,-64,-49,50,113,-66,63,-41,47,-23,100,-76,1,-57,-21,63,-56,27,4,-71,20,29,-74,-58,-7,-41,-24, 
  /* [12][0][][] */ 29,81,-61,-6,79,-3,-43,48,-60,57,-23,10,-46,4,37,-84,-103,-40,-42,-71,16,-19,7,83,-62,-52,84,-103,78,5,-42,110,-91,-75,-54,35,-12,-66,4,29,104,29,-111,-44,2,-70,-25,103,-50,-114,-53,90,27,13,-82,102,-29,-66,48,53,65,100,-15,40,99,27,-53,99,58,90,29,59,69,127,-25,-14,-42,24,-119,-75,-63,100,35,17,-42,20,41,104,-97,-105,78,57,91,-23,36,67, 
  /* [13][0][][] */ 93,-76,111,94,80,116,89,44,57,-122,18,-20,88,69,72,-40,-108,-63,-83,18,75,-18,127,-39,-73,50,15,29,-79,-93,88,32,39,90,-12,15,-75,-49,5,79,-78,81,-46,16,-65,9,-22,-25,37,87,-47,-118,-93,18,83,-104,-49,37,-46,-66,-45,124,-74,23,-50,-75,-83,96,-65,-10,109,1,-81,20,-73,-32,-118,77,90,-79,56,-109,105,7,-77,-93,103,105,-3,-64,-66,52,103,-46,50,-3, 
  /* [14][0][][] */ -55,-102,74,57,68,-39,-28,-114,-88,-43,56,78,-36,-89,-98,-96,-63,-70,1,20,-51,20,-13,48,-114,-73,-43,19,-122,-127,-84,27,91,-34,-43,1,82,112,38,-120,-9,-119,33,76,64,-113,60,-88,101,32,73,40,83,-25,-21,10,-60,3,43,83,-22,-88,-35,61,-102,-24,64,-112,-95,-89,-97,82,-4,79,39,-83,42,-116,42,27,32,-26,-123,-48,-125,-95,-119,92,96,-2,75,-56,75,91,-19,60, 
  /* [15][0][][] */ 32,-39,-40,72,107,-76,65,-98,60,1,-70,-1,117,12,-95,-120,93,16,-92,21,57,18,75,116,79,59,42,84,24,68,64,-104,18,19,-54,-18,-67,121,123,-81,25,122,-65,-21,13,-78,-42,-88,1,-75,-2,43,-99,-109,-44,-12,83,51,-40,114,-43,-73,12,112,-28,108,-74,-9,-53,-7,69,-65,23,-16,72,-118,10,58,107,72,-82,67,-102,-60,-127,-37,-103,47,95,76,-122,-53,68,123,-101,105, 
  /* [16][0][][] */ -89,-14,122,-64,32,110,-46,24,38,48,-103,87,-19,-59,-46,-53,127,92,64,68,117,96,-29,68,-42,72,-59,80,-95,9,51,11,-122,69,72,41,-24,40,-72,-60,10,-50,88,102,45,95,94,-6,-63,-124,-3,106,-42,113,63,27,17,107,64,25,109,126,33,71,55,0,-27,112,28,114,-19,-18,44,81,64,105,-23,117,-104,-32,22,-105,60,2,21,120,121,2,84,-1,-4,122,62,-36,-103,35, 
  /* [17][0][][] */ 51,-95,25,92,-29,-123,-75,-87,57,-75,83,46,111,59,-122,48,27,53,116,120,-105,-20,9,-60,58,65,-87,22,105,-62,-36,86,-25,-17,27,23,-56,119,-77,-38,-95,-45,-21,-14,26,20,107,-119,90,125,-4,25,-23,95,102,-66,-127,85,-64,-122,37,-95,72,100,-81,-77,39,-112,-89,-7,105,26,11,-108,-67,64,119,-56,38,-43,6,-12,-90,-93,-121,69,79,-36,14,79,-106,-104,-14,104,24,19, 
  /* [18][0][][] */ -57,120,117,-42,21,-91,-74,32,18,98,-76,-20,-42,50,83,-34,38,-3,69,4,102,-23,38,-49,58,-68,3,117,47,23,18,64,57,-6,-88,-66,-8,61,0,70,-7,20,-31,21,-71,45,54,22,39,1,75,47,-83,12,34,108,-27,36,7,-87,97,127,22,42,-55,-77,-9,88,89,-62,-60,115,-78,-6,-56,-75,67,68,17,-37,-31,17,-19,-42,117,-13,79,91,-84,-39,-37,108,100,-31,59,-13, 
  /* [19][0][][] */ 41,60,88,61,89,-83,100,114,114,-24,41,3,-92,48,-35,70,76,-92,126,87,-19,85,-46,20,110,-56,35,-55,-81,-115,-48,70,84,-60,32,29,15,-34,-27,-86,69,-97,-61,26,-49,61,103,-72,-16,43,-24,46,-25,34,20,17,27,99,25,-18,72,-41,99,67,-66,23,-17,15,13,67,72,-41,-58,-87,-50,-66,-16,-102,23,127,67,-81,-30,97,-66,-1,18,14,89,42,8,86,-16,112,81,-32, 
  /* [20][0][][] */ 10,82,69,94,-65,107,25,75,27,20,-74,3,6,96,46,-64,-42,-23,-46,-22,32,-37,-66,-60,94,-59,-92,48,29,24,-31,114,112,63,-4,78,47,-8,7,-100,-63,-18,-79,-87,0,-40,-43,106,70,-97,-80,55,54,122,62,26,108,71,105,90,127,-46,-47,-16,-17,-43,-43,14,-55,-61,-61,91,-56,-58,47,21,121,79,110,124,91,27,87,-7,64,114,-12,84,30,110,28,67,39,36,15,21, 
  /* [21][0][][] */ 65,46,65,-105,86,-60,70,-7,-21,-62,-61,30,5,34,-45,-78,-88,-23,14,-33,99,-39,68,-70,34,-84,-25,68,16,8,-9,-42,11,17,-74,-122,102,69,-127,-24,-11,9,17,-13,-111,-91,-95,82,-18,-62,-18,82,31,46,-89,1,-39,51,-46,112,37,-67,18,-6,74,22,-28,-57,-110,-14,60,73,35,-39,70,62,-96,-22,59,76,11,80,35,-77,21,-81,59,-78,-90,63,98,-123,-42,-57,51,-38, 
  /* [22][0][][] */ 24,-64,-82,-105,84,-60,100,48,-104,77,-85,-114,107,-121,-125,-96,29,76,-113,-65,80,-84,22,22,83,-12,-124,94,-69,-78,-75,-119,51,52,16,3,-7,-25,-69,-124,-8,-22,-8,86,46,-127,83,-33,-71,-82,-1,-27,-72,-101,-59,25,-20,-40,-29,-40,102,-86,-85,-122,-75,9,-124,-53,104,95,-33,-11,-77,-2,56,-101,42,-62,55,86,97,-105,-84,-127,70,75,90,-42,-66,23,-72,57,15,11,-39,92, 
  /* [23][0][][] */ 41,-93,14,53,76,-115,12,-112,42,-81,84,77,13,-109,23,-30,90,-29,-111,87,85,-67,103,-27,-22,-5,85,30,72,37,70,-41,-44,29,23,10,96,-23,-127,15,-112,-5,17,-105,-88,-98,91,30,68,-110,-89,-60,75,-53,-59,59,-87,-12,84,49,-114,-79,-55,-8,25,21,-100,-92,41,-7,110,-75,-2,-52,-41,-79,31,-15,96,90,-47,-66,19,-106,93,16,115,-30,-86,28,105,3,85,-52,-40,84, 
  /* [24][0][][] */ -85,-58,-114,-78,-92,-117,-79,-101,61,114,77,40,110,55,-49,-127,-92,36,20,-56,91,-90,-65,-47,49,-36,68,51,102,55,-3,-72,-2,1,47,22,-63,-95,60,-28,-83,-110,98,-3,16,-45,39,66,-96,-52,-29,9,64,53,65,-82,-13,72,23,-8,86,-12,33,90,-108,91,-56,-99,-109,47,-67,-35,-47,35,89,96,55,-86,-116,-91,-90,-103,-72,-126,-5,58,-21,-111,19,-119,-1,-81,-26,22,-99,26, 
  /* [25][0][][] */ -56,-30,-67,2,113,-75,-101,77,57,-101,-35,50,65,8,-98,-18,-72,54,38,-98,60,78,-13,-58,43,-25,-102,35,69,-92,53,127,86,-95,34,91,91,-36,8,-9,-59,90,-74,5,122,64,87,37,-99,83,-57,-3,39,-8,-62,26,-24,45,-105,68,118,39,42,46,-3,76,-19,1,-86,10,-27,-111,31,-82,64,22,63,67,12,39,44,67,-51,92,-65,-47,-97,-83,-26,-26,96,40,-106,-18,-14,-59, 
  /* [26][0][][] */ 44,-127,-23,-22,-104,-7,-14,-25,-116,-121,100,86,-70,-50,5,-18,109,27,-76,-66,13,68,95,10,34,63,10,47,10,6,-92,-2,-31,-63,-100,-112,-68,77,-63,107,-104,97,57,26,-82,67,-48,96,-25,28,-4,95,13,-45,-7,-112,92,71,49,22,8,-98,61,-17,113,-25,-59,61,-86,84,85,92,77,-104,-89,6,43,-109,-98,0,-30,69,82,-76,74,-3,-45,10,-82,109,7,21,-59,111,44,93, 
  /* [27][0][][] */ 35,36,-35,-76,-91,-60,-42,10,63,126,62,-74,-15,79,108,-2,88,8,78,-52,-70,35,-3,3,-68,72,-79,20,88,40,-8,18,74,87,-71,-57,-59,-33,-79,107,-61,43,53,46,125,52,94,127,107,91,70,-51,-65,-63,24,-6,113,-6,-80,-50,-35,-28,-13,68,61,-15,-82,120,74,33,-96,30,79,-24,14,-59,65,-38,109,121,107,1,126,-32,-43,-55,-7,59,-25,21,-9,-21,78,35,98,76, 
  /* [28][0][][] */ 108,25,93,64,-84,-54,-81,-45,-15,-73,72,73,-72,-72,26,108,99,116,-64,93,-19,33,-91,-57,-80,88,-72,-51,-63,-56,10,3,-85,38,82,96,28,-73,-13,38,127,54,-79,72,-74,19,41,63,40,-44,-61,-4,-75,45,79,66,63,-4,103,61,18,-19,-88,7,79,97,-9,86,-52,31,-92,-31,76,62,21,-83,-90,-49,-71,68,-60,-67,105,-7,75,-97,73,-51,-92,-39,-20,-52,-29,62,-67,-60, 
  /* [29][0][][] */ 76,82,53,-46,-83,7,-127,32,126,-8,-97,-99,115,-110,-53,-52,-108,101,43,-51,-83,-41,51,0,-19,4,-51,-34,-110,-11,105,9,52,7,-89,-31,-16,124,17,91,52,106,-48,83,27,125,-33,-28,17,-6,83,-100,73,-79,117,77,-102,53,-49,106,-109,97,-103,-59,-64,-63,49,85,116,-88,28,-78,109,104,58,21,116,-70,-36,57,-8,-78,-14,-67,63,113,40,82,-43,104,69,107,-105,14,21,61, 
  /* [30][0][][] */ 23,-74,-70,31,-102,21,-73,-20,113,-21,-8,-46,-104,17,53,10,-10,31,95,-109,40,-110,-122,8,-118,19,-75,118,-16,-112,-99,1,-86,-79,-125,-61,10,-25,-8,21,84,-83,-20,95,100,-51,98,55,-77,77,17,-108,97,-58,-18,99,-83,-57,-85,-58,-108,-10,-79,-29,-113,-96,-104,90,-65,108,48,-37,-92,102,35,-93,-61,-79,-83,-65,24,27,-108,-24,-116,24,-114,107,-41,-127,75,55,-35,-9,4,-75, 
  /* [31][0][][] */ 94,-50,37,100,72,58,-45,-56,2,12,-61,-66,101,-77,-33,103,-46,-69,54,69,70,37,-20,97,52,-89,37,39,-56,-40,56,120,26,48,-75,22,90,5,-30,-91,82,-48,7,39,35,-16,-4,30,72,48,100,3,-82,-23,-39,53,-93,88,28,104,-2,4,81,-57,87,127,-33,-64,91,-71,-99,20,-79,-10,10,12,-20,-34,49,101,-52,-5,58,92,59,89,-73,45,25,-13,-71,-25,43,96,19,3, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.001853087916970253, 0.0016536617185920477, 0.0019861604087054729, 0.0018670365680009127, 0.0017629837384447455, 0.0019454451976343989, 0.0017568056937307119, 0.0018095090053975582, 0.0019109493587166071, 0.002073915908113122, 0.0018361717229709029, 0.0020594452507793903, 0.0019368990324437618, 0.0018316979985684156, 0.0018711904995143414, 0.0017806196119636297, 0.0017162839649245143, 0.0017604108434170485, 0.002012668875977397, 0.0018864751327782869, 0.0019123712554574013, 0.0020401189103722572, 0.0018212423892691731, 0.001957019092515111, 0.0017827394185587764, 0.0019303122535347939, 0.0018477420089766383, 0.0018964874325320125, 0.0019198417430743575, 0.0017579703126102686, 0.0017686949577182531, 0.0021327824797481298, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2235, 3722, 7991, 3730, -4083, -3667, 22941, 2832, 3392, -1719, 11568, -280, -9732, 2597, 19352, 7561, 18992, 6816, -4664, -7867, 5496, 34658, 27569, 16477, 1229, 1205, 6523, 3556, 3002, -5603, 5493, -3094, -219, 6074, 99, 946, 12404, 4529, -2348, 5745, 7744, 5629, 4499, 15117, 5173, 4384, 1682, 8936, 4539, -8403, -6476, 597, -338, -1711, 2559, 141, 296, -989, -3912, 15903, -1026, 1797, -1490, -3035, -3678, 8260, 31354, 2162, -3386, 804, 1709, 2709, 1498, -1439, 586, 10619, -596, 20889, 18440, -882, 11407, 2045, -543, 1430, 12043, 9572, 4618, 1628, 7554, 4999, -454, -8363, 899, -2349, -1739, -2213, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00028704179567284882, 0.0004227007448207587, 0.00030231400160118937, 0.00023401016369462013, 0.00026718855951912701, 0.00039937678957358003, 0.00014541328710038215, 0.00026227024500258267, 0.00018040198483504355, 0.00035520139499567449, 0.00017305432993452996, 0.00022500788327306509, 0.00026124311261810362, 0.0010996124474331737, 0.00015950087981764227, 0.00015383699792437255, 9.9422737548593432e-05, 0.00021368960733525455, 0.00041896806214936078, 0.00021918426500633359, 0.00011498093954287469, 7.8539589594583958e-05, 0.0001116355779231526, 0.00010070441203424707, 0.00015842236462049186, 0.00040894924313761294, 0.00045488739851862192, 0.0003087138757109642, 0.00016880525799933821, 0.00035009041312150657, 0.00026552824419923127, 0.00024149297678377479, 0.00018852089124266058, 0.0001930081780301407, 0.00031081633642315865, 0.00022832317335996777, 0.00015429685299750417, 0.00024275350733660161, 0.00024683409719727933, 0.00030844743014313281, 0.00016358883294742554, 0.0004615051147993654, 0.00034058766323141754, 0.00015323577099479735, 0.00037656576023437083, 0.00023544643772765994, 0.0002951184578705579, 0.00024292946909554303, 0.00030225582304410636, 0.00015662595978938043, 0.00023948651505634189, 0.00017114492948167026, 0.00047378701856359839, 0.00020147768373135477, 0.00030361130484379828, 0.00028193197795189917, 0.00040274104685522616, 0.0002491445338819176, 0.00039391304017044604, 0.00011452139005996287, 0.00073519808938726783, 0.00035453721648082137, 0.00017572844808455557, 0.00025109283160418272, 0.00050928944256156683, 0.0002315961173735559, 6.8725137680303305e-05, 0.0001885955425677821, 0.00034109744592569768, 0.00043058075243607163, 0.00024020610726438463, 0.0001879251649370417, 0.00088446831796318293, 0.00031822940218262374, 0.00025522668147459626, 0.00020388438133522868, 0.00022471502597909421, 9.0347471996210515e-05, 9.9828495876863599e-05, 0.00015847034228499979, 0.00013032194692641497, 0.00016089717973954976, 0.00015765316493343562, 0.00017857860075309873, 0.00015031061775516719, 0.00024892567307688296, 0.00051151349907740951, 0.00018220963829662651, 9.5558942120987922e-05, 0.0004115734773222357, 0.00023588149633724242, 0.00023464759578928351, 0.00023752468405291438, 0.00044699164573103189, 0.0003532363916747272, 0.00018097826978191733, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -33,83,-7,-127,-39,-18,-15,-69,-12,23,10,80,28,-65,-3,42, 
  /* [1][0][][] */ -35,25,-51,-4,-24,-28,23,-87,60,47,-47,12,-4,3,46,-127, 
  /* [2][0][][] */ 19,28,-27,53,31,40,-47,-54,127,-54,-19,30,-4,123,-90,27, 
  /* [3][0][][] */ 36,-75,-4,-109,18,-34,-12,-11,127,8,89,41,-8,39,29,122, 
  /* [4][0][][] */ -72,56,10,47,21,-9,7,25,11,22,30,-21,-127,-29,-15,14, 
  /* [5][0][][] */ 3,59,106,1,13,79,-73,84,-57,75,-30,-31,32,-42,-127,31, 
  /* [6][0][][] */ 40,-64,127,-125,31,5,-43,113,-88,-96,48,-43,-2,79,-32,97, 
  /* [7][0][][] */ 22,102,-30,-44,79,10,4,-42,127,103,-26,13,34,-15,63,45, 
  /* [8][0][][] */ 12,-84,14,-89,19,-49,22,-67,25,58,68,-4,18,127,78,59, 
  /* [9][0][][] */ 7,-25,2,127,39,-15,47,-56,-72,101,28,-23,-18,-53,-12,-5, 
  /* [10][0][][] */ 0,27,-39,-127,1,8,-5,36,34,-40,20,-18,-7,-31,-1,20, 
  /* [11][0][][] */ 9,21,27,-15,73,-22,84,-51,-83,31,-5,37,0,127,-70,-27, 
  /* [12][0][][] */ 87,-31,-127,-9,46,-80,32,32,11,68,-94,-62,-35,126,-11,39, 
  /* [13][0][][] */ -17,10,-23,14,0,-127,-4,22,1,-15,4,-3,10,-12,7,15, 
  /* [14][0][][] */ 22,-33,93,-38,76,-3,-127,-111,-13,-40,38,20,13,-70,-13,-46, 
  /* [15][0][][] */ -84,23,-11,-46,-6,11,127,61,-40,43,72,-33,3,86,59,2, 
  /* [16][0][][] */ 17,48,127,75,-8,25,70,74,-79,2,-67,1,15,19,5,-67, 
  /* [17][0][][] */ -32,-102,-10,32,-77,-16,-56,19,-127,-36,9,-37,1,44,55,-31, 
  /* [18][0][][] */ -7,41,6,65,46,4,14,-8,78,44,-25,-31,10,127,65,16, 
  /* [19][0][][] */ 21,-38,36,7,113,30,-95,-77,-95,-71,-35,-127,-24,-60,0,-45, 
  /* [20][0][][] */ 119,-20,-50,-26,-6,-112,22,40,-66,21,-127,8,40,22,10,14, 
  /* [21][0][][] */ 47,-16,76,-8,-23,12,0,103,-9,-87,64,34,-10,127,40,69, 
  /* [22][0][][] */ -5,41,-37,127,-76,22,95,88,-19,27,-26,66,20,21,18,12, 
  /* [23][0][][] */ 73,-10,77,-108,57,-16,8,41,9,33,3,-18,15,-34,-127,31, 
  /* [24][0][][] */ -127,39,9,-17,3,96,27,-21,-1,19,97,-12,-72,18,63,-24, 
  /* [25][0][][] */ 29,26,16,23,7,14,65,-45,-7,-127,-16,-18,-12,-26,8,22, 
  /* [26][0][][] */ -39,-2,-7,2,-44,-14,-40,-39,-107,-37,6,-32,13,127,-33,48, 
  /* [27][0][][] */ -3,29,11,67,32,-26,-16,-27,51,5,-28,-2,4,127,-12,17, 
  /* [28][0][][] */ 9,67,48,55,127,-16,27,28,-81,-17,-40,-38,18,82,51,-40, 
  /* [29][0][][] */ 5,-8,5,13,26,0,11,43,-17,-7,-21,-127,3,-14,-23,11, 
  /* [30][0][][] */ -17,72,-53,66,-32,-20,41,-127,-37,55,-12,0,57,31,77,75, 
  /* [31][0][][] */ -50,-30,-18,-70,-17,-11,-57,-104,25,86,-16,-127,-32,-43,7,23, 
  /* [32][0][][] */ -127,-74,-2,66,46,38,-16,15,-9,-43,-110,43,67,5,57,79, 
  /* [33][0][][] */ -7,-44,-38,-3,-106,-3,-86,8,62,18,8,-53,37,-121,127,41, 
  /* [34][0][][] */ 48,-4,64,27,40,23,-44,87,-85,-43,63,25,14,-3,-20,127, 
  /* [35][0][][] */ -37,61,-53,11,-2,-5,44,-111,86,74,-64,14,-7,-13,68,-127, 
  /* [36][0][][] */ -21,43,31,127,20,40,119,45,-26,31,-44,7,-17,36,-82,-33, 
  /* [37][0][][] */ 2,1,20,-60,-15,-1,-49,-35,-85,-22,-10,-12,-2,-127,55,-18, 
  /* [38][0][][] */ 58,116,-5,-40,127,-5,52,-26,115,90,-33,12,-6,-15,63,26, 
  /* [39][0][][] */ -18,72,-9,-127,-23,16,-36,35,50,-80,-27,-11,22,82,42,21, 
  /* [40][0][][] */ -7,-30,11,-91,5,-22,-15,-42,-113,10,-2,-34,-12,-127,89,-53, 
  /* [41][0][][] */ -4,-22,-42,-15,-2,-28,21,-4,-35,22,-52,-11,-127,7,24,41, 
  /* [42][0][][] */ 127,88,-18,-10,-78,-45,-15,-37,-9,8,60,-40,-44,54,75,-96, 
  /* [43][0][][] */ -11,127,-92,-13,61,-22,117,-49,66,76,-36,11,46,-105,-66,-69, 
  /* [44][0][][] */ -48,-1,20,-18,76,-15,-106,-127,-45,-23,-8,-11,-23,-19,61,-70, 
  /* [45][0][][] */ -28,40,-127,-14,18,-79,19,-71,2,34,5,-72,28,-10,50,-22, 
  /* [46][0][][] */ -2,-7,-21,-77,-9,5,18,-29,-111,-16,4,6,-4,-127,57,-29, 
  /* [47][0][][] */ 25,58,28,-15,127,-13,-26,17,-57,36,0,27,10,8,120,-31, 
  /* [48][0][][] */ -127,-78,-15,42,68,9,2,-14,-6,-11,-107,30,48,3,71,55, 
  /* [49][0][][] */ 4,18,97,76,127,-3,43,25,-123,-52,-31,-75,8,127,25,-63, 
  /* [50][0][][] */ 22,-25,-100,-11,19,-127,-32,-5,-7,-18,-9,-34,25,-8,-2,17, 
  /* [51][0][][] */ 3,38,43,13,19,6,0,31,-127,57,6,-102,10,-107,-24,94, 
  /* [52][0][][] */ -5,55,-6,51,58,-8,19,27,79,100,-23,-57,41,127,75,17, 
  /* [53][0][][] */ 4,-39,-22,-27,-75,-1,-67,-12,41,11,24,-49,25,-127,114,10, 
  /* [54][0][][] */ 46,-7,-50,4,127,69,-118,-50,-72,-14,-26,-69,2,-46,-9,-43, 
  /* [55][0][][] */ 42,0,7,7,32,-55,-71,-127,-47,-82,-68,5,-18,-19,13,5, 
  /* [56][0][][] */ -17,15,30,-18,-12,-22,-96,76,-15,127,-7,-16,26,9,-8,13, 
  /* [57][0][][] */ 6,24,-43,-17,-65,-46,127,102,-37,23,-20,0,26,33,119,-2, 
  /* [58][0][][] */ 42,27,-127,29,93,94,-38,45,-102,-44,3,11,-42,39,2,-25, 
  /* [59][0][][] */ -107,65,106,19,-70,-71,127,126,21,14,30,-22,11,2,77,7, 
  /* [60][0][][] */ 6,-4,-49,-3,18,-127,-21,1,-14,-15,-5,-26,30,-18,-2,12, 
  /* [61][0][][] */ 22,-9,21,127,87,21,30,1,-98,0,21,48,-10,18,38,-61, 
  /* [62][0][][] */ -48,127,25,-50,-37,-2,-69,66,-26,-61,-92,-50,-8,-91,-63,-32, 
  /* [63][0][][] */ -37,33,-25,127,-88,19,-66,-30,-65,-33,-28,-32,26,72,35,42, 
  /* [64][0][][] */ 6,4,2,39,3,3,-16,60,28,2,-14,-42,-5,-127,53,-3, 
  /* [65][0][][] */ -16,-31,3,-127,43,-36,57,-38,-4,44,15,-100,-9,0,25,-53, 
  /* [66][0][][] */ 16,-40,71,-40,21,-11,-22,111,22,-70,68,20,-14,127,36,100, 
  /* [67][0][][] */ 6,55,-18,-127,-16,3,-51,35,84,-101,-30,1,32,85,73,25, 
  /* [68][0][][] */ -34,36,127,9,12,10,-5,-2,-35,-19,-17,-31,10,-15,90,-37, 
  /* [69][0][][] */ 127,80,-8,1,-89,-26,-20,-26,-5,11,75,-42,-51,61,51,-81, 
  /* [70][0][][] */ 51,13,-51,-17,-33,34,50,127,-35,84,-34,15,19,68,-33,14, 
  /* [71][0][][] */ 3,-8,-8,10,9,-80,0,19,-32,22,-77,0,-127,-8,43,52, 
  /* [72][0][][] */ 5,12,-127,3,15,8,27,81,-35,-15,12,-10,22,4,4,7, 
  /* [73][0][][] */ -44,19,37,6,54,-23,-66,-127,24,-60,40,-8,11,-55,40,-27, 
  /* [74][0][][] */ -4,28,31,117,22,-11,-84,84,-69,23,-49,38,19,-127,36,-84, 
  /* [75][0][][] */ -9,24,-47,16,2,-4,23,-8,111,33,-18,-7,8,127,-46,11, 
  /* [76][0][][] */ -5,-12,-4,20,5,-17,-16,57,18,-30,-16,-127,-10,-9,14,9, 
  /* [77][0][][] */ 2,28,-10,127,-71,35,83,121,2,33,-18,46,-6,-9,-22,-2, 
  /* [78][0][][] */ 11,12,38,-97,30,-18,-32,51,12,-51,-4,-37,21,127,9,55, 
  /* [79][0][][] */ -13,-67,-51,-59,-81,-4,31,-68,127,1,36,66,2,55,63,-32, 
  /* [80][0][][] */ -28,12,127,-77,-2,-22,18,-76,-78,32,-58,-107,31,116,69,-28, 
  /* [81][0][][] */ -54,50,-127,32,66,-127,-19,63,-11,-48,62,-4,23,1,8,3, 
  /* [82][0][][] */ 127,-3,-9,14,13,-112,-20,13,-13,-15,-95,1,107,15,-1,19, 
  /* [83][0][][] */ -49,75,-117,-81,-35,-21,44,-127,66,57,-44,-123,17,54,49,99, 
  /* [84][0][][] */ -35,32,70,-31,11,-27,52,-127,-38,44,-8,-56,33,49,71,-7, 
  /* [85][0][][] */ -80,127,29,-120,-80,-24,-29,0,-56,-4,-66,25,7,-9,-92,-23, 
  /* [86][0][][] */ 2,12,-28,2,-35,-22,127,30,-3,-34,-2,17,11,37,78,-24, 
  /* [87][0][][] */ -29,-35,0,-125,12,-40,53,-19,-4,15,-8,-127,-19,3,13,-44, 
  /* [88][0][][] */ 88,-27,55,0,9,-101,2,45,-65,37,-127,-56,28,28,60,15, 
  /* [89][0][][] */ 22,-31,-45,-51,35,-20,-35,-11,-52,12,33,-80,127,-13,29,-41, 
  /* [90][0][][] */ 0,-52,33,-67,70,-7,-67,80,64,-86,-32,-20,-7,116,25,-127, 
  /* [91][0][][] */ -56,-20,-14,-24,14,-17,-40,-83,16,69,-25,-127,-18,1,-2,20, 
  /* [92][0][][] */ -20,23,37,13,3,-127,14,-2,4,-25,4,-11,5,-22,21,1, 
  /* [93][0][][] */ 36,-28,127,-12,-47,51,22,-35,-17,32,-68,-26,-28,-8,40,-1, 
  /* [94][0][][] */ 23,3,-17,-23,24,-7,-15,-5,-31,-21,16,-57,127,-17,32,-35, 
  /* [95][0][][] */ 127,96,-6,34,-94,-21,-69,-6,-27,-20,90,-46,-37,27,83,-74, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00087182479910552502, 0.0012838583206757903, 0.00091821065871044993, 0.00071075314190238714, 0.00081152503844350576, 0.0012130170362070203, 0.00044166011502966285, 0.00079658679896965623, 0.00054793036542832851, 0.0010788441868498921, 0.00052561354823410511, 0.00068341073347255588, 0.00079346710117533803, 0.0033398251980543137, 0.0004844479844905436, 0.00046724523417651653, 0.0003019741561729461, 0.0006490340456366539, 0.0012725210981443524, 0.00066572282230481505, 0.0003492287069093436, 0.00023854630126152188, 0.00033906791941262782, 0.00030586696811951697, 0.0004811722319573164, 0.0012420911807566881, 0.001381617970764637, 0.00093764887424185872, 0.00051270792027935386, 0.0010633207857608795, 0.00080648221774026752, 0.00073348049772903323, 0.00057258974993601441, 0.00058621884090825915, 0.00094403460389003158, 0.00069348019314929843, 0.00046864192700013518, 0.00073730910662561655, 0.0007497029728256166, 0.00093683955492451787, 0.00049686420243233442, 0.0014017177745699883, 0.001034458284266293, 0.00046541911433450878, 0.0011437336215749383, 0.00071511551504954696, 0.00089635583572089672, 0.00073784351116046309, 0.00091803399845957756, 0.00047571604955010116, 0.00072738633025437593, 0.00051981414435431361, 0.0014390213182196021, 0.00061194307636469603, 0.00092215090990066528, 0.0008563048904761672, 0.0012232351582497358, 0.00075672043021768332, 0.0011964221484959126, 0.00034783291630446911, 0.0022329986095428467, 0.001076826942153275, 0.00053373555419966578, 0.00076263793744146824, 0.0015468519413843751, 0.00070342101389542222, 0.000208737124921754, 0.00057281646877527237, 0.0010360066080465913, 0.001307792030274868, 0.00072957191150635481, 0.00057078036479651928, 0.0026863731909543276, 0.00096655008383095264, 0.0007751935045234859, 0.00061925285262987018, 0.00068252126220613718, 0.00027441009297035635, 0.00030320655787363648, 0.00048131795483641326, 0.00039582353201694787, 0.00048868893645703793, 0.00047883595107123256, 0.00054239225573837757, 0.00045653464621864259, 0.0007560556405223906, 0.001553606940433383, 0.00055342074483633041, 0.00029023876413702965, 0.001250061672180891, 0.00071643688715994358, 0.00071268918691202998, 0.0007214277284219861, 0.0013576364144682884, 0.0010728759225457907, 0.00054968072799965739, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9304, 19812, -22100, -4094, -9045, 7244, 28542, -49682, -3753, 15517, 26032, 14806, -8917, 11933, -7397, 11305, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00086516013834625483, 0.00033284974051639438, 0.00020768967806361616, 0.00022623102995567024, 0.00044078193604946136, 0.00031697613303549588, 0.00036255180020816624, 0.00030926489853300154, 0.00029246692429296672, 0.00027111292001791298, 0.00059941591462120414, 0.00061508879298344254, 0.00044818362221121788, 0.00022020212782081217, 0.00047794444253668189, 0.0005222474574111402, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -20,-12,-2,-27,15,-8,-35,-2,13,6,-6,6,-11,-5,-23,6,-6,6,0,-5,3,-29,4,7,10,10,-4,127,29,-30,39,-5,-1,4,9,5,-9,9,-35,-3,-15,0,5,31,11,8,8,2,27,6,-6,12,12,-19,-14,84,4,3,-30,-39,-6,19,-4,-20,-34,-59,-15,35,5,6,9,-16,-6,-31,-10,-22,-28,18,-1,2,-5,-21,29,16,0,-9,-7,-83,5,-18,13,0,43,-36,-29,-9, 
  /* [1][0][][] */ 30,-63,-88,-65,127,-21,61,29,-28,-88,-68,-29,-5,-5,-75,33,-79,0,48,36,10,54,-23,-53,29,-20,-28,-63,42,-26,-71,36,-29,27,12,7,3,-16,-8,17,-40,26,-52,-30,-50,87,2,-2,18,-80,6,-51,-25,45,44,26,-53,-31,-46,-46,22,-27,-10,-58,-99,102,-32,-11,-6,-28,-37,7,45,-122,-40,11,25,-65,39,3,-2,-40,24,-11,-49,43,-25,22,23,-52,-8,20,17,0,33,97, 
  /* [2][0][][] */ 12,50,-85,1,99,83,37,89,2,-111,6,-8,2,2,39,31,19,-9,-40,73,34,-14,81,19,40,33,3,-47,29,-3,55,-59,36,47,-29,26,-127,-80,42,34,8,-37,15,-11,27,-27,7,78,-22,28,-13,-2,89,-14,0,45,23,17,37,8,29,32,39,-20,29,6,-26,1,-41,2,-6,-32,-35,-76,15,54,84,65,37,-7,33,-35,18,-2,-43,21,20,48,-15,37,14,-35,12,-26,-70,7, 
  /* [3][0][][] */ 64,18,87,-13,48,-33,27,-10,-7,-70,15,-40,9,32,40,97,27,-8,25,3,127,-9,34,23,46,-16,-6,8,28,35,-4,81,-86,20,20,-9,-13,-14,-9,41,-71,-31,72,13,19,41,-36,-81,-55,-27,-43,38,-1,-110,8,9,-96,78,61,45,11,95,-10,-47,30,74,-11,-54,19,-25,9,-57,50,-31,56,-24,16,0,49,51,-25,-74,11,-7,-30,8,18,32,20,24,23,30,36,99,44,-34, 
  /* [4][0][][] */ 24,-13,19,-1,127,34,-8,-11,-32,-48,-32,-23,-38,16,-1,49,28,-68,-32,76,-6,-2,27,-18,-8,-1,25,-47,4,-8,55,-31,79,15,-23,2,43,23,16,10,-17,0,-23,-18,-4,-44,-9,8,35,8,-17,13,-9,-39,20,-29,17,-7,-31,23,-5,50,63,27,43,47,-14,-13,-39,-3,50,64,22,-59,-40,-29,39,39,71,-31,-2,-30,6,3,-59,2,39,47,-42,33,0,-45,17,18,28,-14, 
  /* [5][0][][] */ 4,-20,-16,19,32,-18,43,-18,-14,-38,-10,13,0,31,5,18,-2,3,20,-8,34,4,-38,68,3,1,20,-90,-12,33,19,32,1,5,11,-56,24,21,0,18,-2,-5,29,-12,0,4,10,-15,-13,-13,15,-10,-10,-32,1,-47,-10,20,-26,12,66,19,7,40,2,57,9,77,13,86,19,34,17,17,-12,62,-19,-3,12,16,-3,-2,5,25,-6,7,-5,127,4,24,3,-19,9,21,-51,22, 
  /* [6][0][][] */ 24,-78,11,-41,-30,8,46,20,2,2,-20,-74,-45,7,-36,29,16,-12,-2,-11,-50,38,10,14,-14,-3,-21,-4,-14,9,39,0,66,1,71,1,-11,-17,12,-89,-14,82,10,-37,12,-29,-14,19,-16,40,-28,65,-29,-63,-9,-1,9,-68,-16,-6,-11,62,41,-82,25,-37,1,-13,-2,-4,127,-3,-49,3,-44,34,-87,-14,13,10,37,46,24,-8,-19,2,47,22,6,1,47,-35,-19,-12,-36,-22, 
  /* [7][0][][] */ -6,127,42,-2,106,47,44,-39,-13,-28,34,-19,-16,21,16,21,13,-42,-2,22,31,-21,31,15,2,8,0,2,25,-15,7,22,41,-7,-44,8,26,12,-17,72,-55,20,15,17,-16,-21,27,-25,-32,-26,30,2,30,-31,-44,38,54,19,-18,9,-12,-41,-11,-11,-55,74,-25,-84,-17,-26,-8,58,-20,-29,25,12,42,52,39,-6,-50,-42,-19,-11,-17,58,-19,-9,-23,35,-37,-30,-56,-17,12,0, 
  /* [8][0][][] */ 10,-8,55,33,-127,-26,43,-11,21,91,71,17,-27,18,23,7,-44,14,16,8,-39,-12,-112,71,20,-34,78,-8,6,10,2,50,79,-15,1,-8,-31,-18,17,40,29,-25,50,12,-43,-3,50,11,-107,13,25,26,-69,-49,-23,53,5,-65,-92,-34,21,-31,-25,-2,8,72,-9,-59,33,-20,-39,-23,45,59,54,1,-11,-37,-15,27,-84,18,-8,-3,26,17,78,49,22,-45,52,45,14,1,51,14, 
  /* [9][0][][] */ 13,-115,-15,31,100,82,-27,-19,34,-43,88,86,-9,14,100,-94,23,-22,0,15,-40,-57,34,-9,-37,16,12,14,-30,11,14,-14,24,28,-106,24,-2,16,-8,64,40,-58,-15,70,-9,-6,-67,-22,31,30,-8,-78,69,20,-3,-61,-13,94,-10,14,21,-46,-22,127,-79,-4,0,-13,-5,36,-46,-66,54,9,16,26,74,-53,28,9,-2,-18,6,39,-6,-76,26,-5,6,-24,-49,25,-51,4,-3,-41, 
  /* [10][0][][] */ -53,-26,-37,-39,-28,-10,65,-22,41,24,34,40,20,-10,-3,-4,-2,28,-26,-22,-8,28,15,23,-11,-7,11,-127,20,-40,61,-33,0,21,-2,-7,-1,38,8,-6,16,-41,27,-51,13,-9,29,14,-1,43,-23,-12,-41,-31,-2,-52,12,11,-9,-49,24,12,1,14,-31,86,-10,-33,16,-33,-4,-23,-29,-10,14,60,-4,44,-26,18,-18,6,13,29,13,-21,-1,125,3,-9,18,10,27,-43,50,-32, 
  /* [11][0][][] */ -83,18,-3,-4,15,-61,-14,-8,-47,-3,-3,16,19,25,-28,-2,46,4,-64,-45,9,-7,-7,6,79,5,60,7,-23,28,-40,23,-3,20,-4,-4,-12,4,21,7,-14,-10,6,0,78,7,73,16,46,40,-2,35,6,-65,23,5,-61,-23,-36,-50,-3,-11,0,20,-6,-32,25,3,24,9,-12,22,-28,7,19,8,-22,73,-127,66,-35,-4,-61,-71,124,17,45,-6,12,35,-27,-53,-24,37,-24,-6, 
  /* [12][0][][] */ -1,-10,-35,2,64,18,2,-12,-16,20,22,-2,8,-17,29,-6,-31,-14,15,-17,-7,-20,-32,37,-21,43,-20,82,-16,32,-37,2,-14,22,4,21,-17,-14,20,8,0,-15,-3,8,-11,1,20,17,-3,-5,-3,-25,-18,10,-8,-17,-12,-11,14,23,-17,-22,1,46,38,-71,10,58,-26,-127,-1,53,3,10,11,75,5,-12,2,-1,-6,22,-35,10,6,-15,-5,-42,-7,12,7,-2,-38,33,-11,24, 
  /* [13][0][][] */ -73,69,-5,-13,-65,2,-17,3,-43,-17,35,15,70,12,-31,-11,-18,20,-39,-5,8,-2,49,-50,71,28,-15,7,17,-37,-40,-93,-94,-42,4,11,-11,18,28,-21,-38,71,-7,5,35,-4,-18,-2,54,-14,24,63,72,-55,72,-4,-14,42,41,-7,10,22,-18,11,-6,-30,-2,7,15,16,14,-127,2,-34,-76,16,39,32,-45,-45,76,-26,-4,-33,35,-23,79,-3,-30,-11,-25,31,28,-50,-26,0, 
  /* [14][0][][] */ -23,22,-20,-49,34,-3,-12,29,-91,2,17,10,-33,-56,-79,-24,-89,-17,67,14,26,-3,15,-105,-33,11,-47,-13,19,-25,-14,-30,-71,-33,19,15,-21,-8,8,6,6,79,-71,-19,-50,16,3,9,127,-30,20,-14,27,53,-99,25,-20,22,-98,3,6,22,39,25,-2,24,-8,11,-43,16,55,30,30,-12,-30,27,57,-78,-27,-102,17,-30,15,35,33,-63,-39,11,-45,22,26,54,14,28,16,-19, 
  /* [15][0][][] */ -38,-70,-4,-42,1,13,-7,-65,-21,14,-6,-32,47,-18,42,-19,-90,-8,-20,14,-18,11,-62,-42,-13,-4,-4,10,-20,-13,59,-82,-6,28,15,4,-2,25,-92,-1,24,-65,-3,28,-26,-38,49,29,45,14,-10,-127,1,50,-7,27,39,-9,-16,48,8,-4,35,-7,3,-2,-6,-12,-25,24,4,39,-36,9,6,-38,-36,-4,8,8,-10,33,-12,66,-19,-37,-35,-34,-35,62,28,79,-41,1,-2,-6, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.036769304424524307, 0.014146113768219948, 0.0088268108665943146, 0.0096148187294602394, 0.018733231350779533, 0.013471485115587711, 0.015408451668918133, 0.013143757358193398, 0.012429844588041306, 0.01152229867875576, 0.025475176051259041, 0.026141272857785225, 0.019047804176807404, 0.0093585904687643051, 0.020312638953328133, 0.022195516154170036, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 16696, 61961, -721, 116, 15377, -4119, -3, 273, 5940, 19375, -2280, 201, 418, 6246, 4654, -9200, -3873, -456, -541, 13184, -11320, 16010, -2702, 11062, 32418, 532, -6883, 17077, 14907, -18534, 1997, 22374, 24420, -9751, 2818, 1091, -443, -337, 2978, -8264, -5512, -647, -6213, 70, 30270, -1119, 13431, -1134, -14174, 2111, 110, 330, -3006, 14049, -3295, 13434, 22633, -241, 35131, 142, -9123, -668, 904, -4, -2218, 13251, -946, -3672, -2067, 3481, 149, -4307, 1264, 231, -2594, -5831, 242, -1429, 40101, -7535, -5839, -11952, 31, 122, 58459, -12731, -10884, -26994, -5641, 10696, -1906, 33362, -245, -2518, -2873, 509, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00014011494931764901, 9.3542745162267238e-05, 0.00012316278298385441, 0.0002399166114628315, 0.00022448493109550327, 0.00020048154692631215, 4.4400854676496238e-05, 9.0111068857368082e-05, 0.00026687167701311409, 0.00012432548101060092, 0.00032257731072604656, 0.00010949106217594817, 0.00028291306807659566, 0.00021699593344237655, 0.00043320984696038067, 0.0001713066449156031, 0.00018773388001136482, 0.00016602392133791, 0.00020280379976611584, 8.0875324783846736e-05, 7.4121540819760412e-05, 4.7241512220352888e-05, 0.00013359317381400615, 7.0173693529795855e-05, 9.3305898190010339e-05, 0.00012480642180889845, 0.00016476443852297962, 0.00018111702229361981, 7.956288754940033e-05, 0.00049383868463337421, 0.00040487802471034229, 0.00023869895085226744, 0.00011032431211788207, 0.00016920556663535535, 0.0002759902854450047, 0.00050527433631941676, 0.00034329277696087956, 0.00020099573885090649, 0.00023728833184577525, 8.3758684922941029e-05, 0.00020120858971495181, 0.00023211729421745986, 0.00038084751577116549, 8.5983439930714667e-05, 0.00034048664383590221, 9.423773008165881e-05, 0.00012044681352563202, 0.00032630542409606278, 0.00072320306207984686, 0.00011874607298523188, 0.0003700805245898664, 0.00016724252782296389, 0.00015122709737624973, 0.00020215698168613017, 0.00025888028903864324, 0.000129478401504457, 0.00012021060683764517, 0.00053149362793192267, 4.5119973947294056e-05, 0.00019425050413701683, 0.0002874801866710186, 0.00034006033092737198, 9.5882947789505124e-05, 0.00015023717423900962, 0.00012953352415934205, 0.00013583105464931577, 0.00033937528496608138, 0.00060293142450973392, 0.00020961689006071538, 0.00011565260501811281, 0.00021076826669741422, 0.00010510510037420318, 0.00027071937802247703, 0.00013907699030824006, 0.00025190378073602915, 0.00032895698677748442, 0.00014148639456834644, 7.5812335126101971e-05, 6.3574909290764481e-05, 0.00015903729945421219, 0.00030059594428166747, 0.00024120573652908206, 0.00018548124353401363, 0.00025404596817679703, 6.1138387536630034e-05, 0.00012451852671802044, 7.8858822234906256e-05, 0.00053533591562882066, 0.00028537615435197949, 0.00013753458915743977, 0.00034964529913850129, 3.2223379093920812e-05, 0.00016045560187194496, 0.00010480625496711582, 0.00032709492370486259, 0.00025860199821181595, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-72,-10,127,22,72,75,-59,-15,-18,-15,-6,-30,-1,37,2,-9,-42,27,23,18,-127,127,6,-83,7,50,-28,-127,-127,38,23,13,28,59,-18,-30,-11,31,-7,-14,27,-107,71,25,-70,37,46,-18,51,-25,18,4,-6,15,48,-91,-49,-62,-18,-11,0,10,37,68,-25,75,12,-9,16,19,127,22,24,26,-2,-12,17,127,-6,-14,15,-28,21,126,21,-78,-17,-2,-32,-16,-38,2,-25,-15,27, 127,-127,74,105,-43,127,38,-118,68,4,-18,127,127,-100,-13,15,11,127,127,-110,127,-74,81,68,-127,-118,-65,-34,-55,45,-59,-22,-90,53,-127,-85,-42,-15,-52,62,-1,127,127,80,-52,-115,-112,-50,-15,-127,42,83,67,-32,45,82,-46,43,-78,-114,-45,-42,-62,66,73,-61,27,29,-82,33,-18,89,115,127,13,18,1,58,-31,51,65,127,127,-22,-9,75,-112,127,-123,-101,4,-127,-89,-127,-37,107, -75,-13,29,-84,15,-25,63,-9,79,-35,-28,18,-19,-6,-8,-12,-10,-16,7,-2,-23,-104,29,-1,-125,97,9,-54,118,49,-15,9,0,15,13,-30,-9,33,20,13,24,12,-118,63,18,-20,36,13,-14,10,-17,4,-9,1,-3,20,-65,7,-33,52,2,41,33,-2,-6,-38,-31,23,9,3,-4,36,9,-25,-5,3,-13,-6,-83,2,-20,-23,-18,3,-112,10,-32,-23,-53,24,-26,-32,29,-26,-14,2, 
  /* [0][1][][] */ -65,-75,73,-36,-48,94,20,127,-52,-21,-1,-121,26,-115,78,31,-2,-59,-17,89,53,-70,48,49,-97,-13,127,-22,-27,63,120,-104,-127,92,-86,-57,-35,31,-28,96,-50,-26,-5,45,-49,127,-22,65,16,95,19,-3,15,-55,26,31,127,123,-73,-87,127,-33,-36,127,72,-38,-14,-1,127,38,127,97,-41,102,-5,11,13,14,-30,10,-42,123,-81,111,2,34,-55,30,78,-127,-33,-8,127,-69,-22,1, 66,124,56,-115,127,84,90,38,-127,127,127,-41,-66,-127,-127,127,127,-63,-123,-50,103,95,-123,127,-109,-93,-43,127,-127,108,-127,-127,-89,127,105,127,127,-127,-104,127,-66,-96,110,-127,-127,-37,-127,-127,127,-112,84,42,127,127,127,-127,100,-127,-127,127,19,-80,-127,-101,-127,127,-127,127,-127,-127,-108,-81,-127,-79,127,127,-127,127,-77,127,127,31,-42,-127,60,127,93,45,127,12,127,1,-67,36,127,-127, -54,-14,-50,37,-57,-97,36,-28,18,-33,-29,93,2,90,14,10,-5,63,-6,127,3,-85,-41,7,-77,105,-70,-20,-70,-17,16,-63,-72,39,4,-18,-28,44,-66,43,127,-4,-39,28,-40,-61,16,45,8,117,-12,6,-36,-72,3,18,96,3,0,22,-35,127,91,-53,-43,12,38,-10,-79,123,-19,-84,-1,-53,-16,-20,26,15,76,-35,-69,-42,56,15,-48,-16,73,23,14,61,-44,19,-43,98,-26,-5, 
  /* [0][2][][] */ -66,0,-4,-21,13,-44,68,23,54,-28,-36,-3,19,18,-26,1,-7,65,7,2,-53,-83,3,-8,-30,-56,34,-68,88,38,24,26,17,-8,-12,-47,-7,35,-3,-1,-16,-6,-67,103,3,30,12,37,-15,-31,10,-21,23,-1,7,14,-70,24,-16,14,14,0,-21,-6,0,-46,-47,16,-33,12,25,30,13,-19,27,3,16,4,-77,-12,-8,-8,17,15,-127,7,12,-44,-61,-51,-28,-48,10,59,-18,-7, 123,32,-127,-36,-72,-24,40,29,-65,-28,-19,-111,-76,111,-13,36,3,-50,-9,-125,93,-51,-38,1,-109,127,-50,21,-36,-22,-9,-4,-62,14,26,5,-23,-29,127,55,11,-14,68,-35,-39,75,-67,-43,-33,-6,-127,-127,-49,-25,0,38,-65,-7,10,39,-8,-19,9,-49,-54,33,64,-21,115,108,-24,-69,11,-57,4,3,98,3,51,21,12,-96,-51,2,3,8,127,40,-64,38,-20,-111,41,81,-10,26, -53,12,-18,26,15,-67,-127,1,-11,-8,-16,3,16,-27,19,-2,-8,-17,5,18,-47,-70,14,1,15,-97,21,4,-50,-40,-7,16,42,-20,-7,-25,-35,3,42,-40,22,-2,-49,-34,3,65,23,16,-9,-5,9,-9,18,5,-5,-6,-61,-12,1,-39,-12,10,85,-11,35,-2,-2,27,0,4,-4,20,-17,17,0,14,35,-1,75,-11,4,-8,-8,-17,75,1,44,-39,58,38,-18,-55,-7,3,-14,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0059548849239945412, 0.0039755664765834808, 0.0052344179712235928, 0.010196455754339695, 0.0095406090840697289, 0.0085204653441905975, 0.0018870362546294928, 0.0038297201972454786, 0.011342045851051807, 0.0052838325500488281, 0.013709535822272301, 0.0046533700078725815, 0.0120238047093153, 0.0092223268002271652, 0.018411418423056602, 0.0072805322706699371, 0.0079786898568272591, 0.0070560164749622345, 0.0086191613227128983, 0.0034372012596577406, 0.0031501655466854572, 0.0020077642984688282, 0.0056777098216116428, 0.0029823819641023874, 0.0039655007421970367, 0.0053042727522552013, 0.0070024887099862099, 0.0076974732801318169, 0.003381422720849514, 0.020988143980503082, 0.017207315191626549, 0.010144704952836037, 0.0046887830831110477, 0.0071912365965545177, 0.011729586869478226, 0.021474158391356468, 0.014589942991733551, 0.0085423188284039497, 0.010084753856062889, 0.0035597439855337143, 0.0085513647645711899, 0.0098649850115180016, 0.016186019405722618, 0.0036542962770909071, 0.014470681548118591, 0.0040051033720374107, 0.005118989385664463, 0.013867980800569057, 0.030736129730939865, 0.0050467080436646938, 0.0157284215092659, 0.0071078073233366013, 0.0064271516166627407, 0.0085916714742779732, 0.011002412065863609, 0.005502831656485796, 0.0051089506596326828, 0.022588478401303291, 0.0019175988854840398, 0.0082556465640664101, 0.01221790723502636, 0.014452563598752022, 0.0040750252082943916, 0.0063850800506770611, 0.0055051748640835285, 0.0057728197425603867, 0.014423449523746967, 0.025624586269259453, 0.0089087178930640221, 0.0049152355641126633, 0.0089576514437794685, 0.0044669667258858681, 0.011505573056638241, 0.0059107718989253044, 0.010705910623073578, 0.013980671763420105, 0.0060131717473268509, 0.0032220243010669947, 0.0027019334957003593, 0.006759085226804018, 0.012775327078998089, 0.010251243598759174, 0.0078829526901245117, 0.010796952992677689, 0.0025983813684433699, 0.0052920375019311905, 0.0033515000250190496, 0.022751776501536369, 0.012128486298024654, 0.0058452198281884193, 0.014859925024211407, 0.0013694935478270054, 0.0068193627521395683, 0.0044542658142745495, 0.013901534490287304, 0.010990584269165993, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2263, 9756, 16782, 30158, 15774, -3722, -2083, 7239, 31532, -3858, 18160, 5995, 10046, 15398, 32790, 2036, 3403, 7829, 13122, 6259, -240, 437, 12515, -1340, 4519, 12, 13418, 8706, 7329, 45722, 48061, 20596, 9303, -766, 12349, 3045, 1400, 3679, 25551, -857, 17037, 9600, 43672, -3687, 31136, 11989, 7523, 20226, 63312, 14143, -738, 11356, -4535, -191, -2554, 7243, -651, 20561, 7200, 8812, 5691, 20892, 6553, 8653, 11555, 9410, 6517, -9305, 6319, -3093, 5949, 11564, 20891, 5633, -6280, -6945, 7743, 364, 2466, -1938, 21563, 14297, 6007, 14725, 3110, 587, 10851, 84057, 13730, 13178, 6264, -188, 7916, 9589, 4481, 13478, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00018000503769144416, 0.00015183330106083304, 0.00011207773059140891, 7.6412070484366268e-05, 0.00018864498997572809, 0.00027294145547784865, 0.00037967797834426165, 0.00022293832444120198, 7.3901581345126033e-05, 0.00035481606028042734, 0.00014821476361248642, 0.00015075165720190853, 0.00012626301031559706, 0.00015163978969212621, 7.2299735620617867e-05, 0.0002900522667914629, 0.00013053299335297197, 0.00015762425027787685, 0.00016945683455560356, 0.00019066082313656807, 0.00028940910124219954, 0.00049016933189705014, 0.00016211936599574983, 0.00048460363177582622, 0.00058159744367003441, 0.00019707478350028396, 0.00016526527178939432, 0.00016173609765246511, 0.00022114535386208445, 7.7412521932274103e-05, 5.8564386563375592e-05, 0.00012023003364447504, 0.0001778996957000345, 0.00027901193243451416, 0.00016128648712765425, 0.00019041025370825082, 0.00036753155291080475, 0.00040265620918944478, 0.00010638583626132458, 0.00065992970485240221, 0.0001092026213882491, 0.00016647753363940865, 6.1748600273858756e-05, 0.00029148382600396872, 0.00010459303302923217, 0.00013002323976252228, 0.00022952556901145726, 0.00013306862092576921, 6.5073123550973833e-05, 0.00014704355271533132, 0.00017436659254599363, 0.00015310807793866843, 0.00023729240638203919, 0.00023914013581816107, 0.00040419795550405979, 0.0001515649346401915, 0.00015910243382677436, 9.0439934865571558e-05, 0.00028375512920320034, 0.00016730919014662504, 0.0002835641207639128, 6.8179870140738785e-05, 0.00022626288409810513, 0.00011757091851904988, 0.0002157395938411355, 0.00020693040278274566, 0.00019412643450777978, 0.00014392244338523597, 0.00026689472724683583, 0.00023604238231200725, 0.00018945173360407352, 0.00013613079499918967, 9.9771685199812055e-05, 0.00018047522462438792, 0.0002490404003765434, 0.00019843161862809211, 0.00021673570154234767, 0.00025970945716835558, 0.00030286418041214347, 0.00021338772785384208, 9.4106966571416706e-05, 0.00011587409244384617, 0.00014723966887686402, 0.00013095799658913165, 0.00037072674604132771, 0.00018775300122797489, 0.00021363055566325784, 4.5920718548586592e-05, 0.00010473249858478084, 0.00017079914687201381, 0.00020473134645726532, 0.00034369729110039771, 0.00018643312796484679, 0.000164551951456815, 0.00024659669725224376, 0.00012894219253212214, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -5,72,-16,71,19,38,8,-7,18,26,-57,112,-2,-108,48,-127, 
  /* [1][0][][] */ 20,52,-8,-30,32,-37,127,-114,1,84,-10,-7,0,-54,26,8, 
  /* [2][0][][] */ -127,20,-46,-10,-5,-6,37,99,-23,65,100,-8,-71,21,39,-35, 
  /* [3][0][][] */ -59,48,28,62,-56,57,75,115,23,81,-127,-2,57,-71,-75,-47, 
  /* [4][0][][] */ 3,-5,28,74,-12,71,1,38,12,-10,8,3,15,-12,-127,-30, 
  /* [5][0][][] */ -12,-36,51,-24,8,-21,-1,31,-71,111,-28,-127,-23,21,-47,-29, 
  /* [6][0][][] */ 9,1,25,-18,38,51,-63,-66,1,5,53,-9,127,-16,-9,-27, 
  /* [7][0][][] */ 21,15,127,-8,-27,-31,-3,-10,-74,31,-77,-41,3,-1,37,-14, 
  /* [8][0][][] */ 27,22,82,64,-43,88,17,46,47,3,15,-81,-33,6,-127,-83, 
  /* [9][0][][] */ 39,-127,61,61,6,-26,11,31,121,0,69,4,-18,12,-116,-26, 
  /* [10][0][][] */ -23,-125,-7,-39,-103,-5,-36,49,127,125,56,-18,-18,75,109,8, 
  /* [11][0][][] */ 53,-19,7,-103,21,-30,-110,-127,-58,43,-10,-27,38,-27,44,-68, 
  /* [12][0][][] */ -20,14,6,-37,-27,-40,-93,-35,-33,-67,-14,15,19,127,100,34, 
  /* [13][0][][] */ -31,-100,-57,25,-25,-58,8,-6,45,12,-20,-8,33,31,127,41, 
  /* [14][0][][] */ -9,-61,58,39,32,42,9,127,11,57,13,-46,21,38,-65,117, 
  /* [15][0][][] */ 19,-31,4,61,17,-3,96,0,1,-127,15,-32,2,-20,-7,-37, 
  /* [16][0][][] */ 46,-80,-54,22,12,1,34,-83,120,60,111,15,1,109,78,127, 
  /* [17][0][][] */ -82,-49,55,127,110,57,13,3,89,-53,-36,-21,1,56,-100,14, 
  /* [18][0][][] */ -6,22,0,20,-98,3,-5,53,-71,-24,-22,-46,12,-127,62,2, 
  /* [19][0][][] */ 34,-72,44,-55,105,12,-76,86,81,-54,89,30,-16,55,39,127, 
  /* [20][0][][] */ 54,-16,65,-64,-10,9,-39,51,-21,-53,87,-8,20,8,-46,127, 
  /* [21][0][][] */ -60,-19,-7,-43,16,13,-91,-58,-16,62,5,7,-127,-20,45,-6, 
  /* [22][0][][] */ 30,-20,30,-18,14,-57,-1,-6,-127,17,-22,-45,-11,-6,69,-18, 
  /* [23][0][][] */ 17,3,13,-11,9,5,-11,-1,-4,-3,43,-18,127,-9,5,-32, 
  /* [24][0][][] */ -3,-11,0,-73,-17,-28,38,0,-45,-4,-8,-127,-5,-111,47,13, 
  /* [25][0][][] */ -107,21,-51,-6,49,-11,-63,-127,-12,76,-27,-62,-75,-91,28,-58, 
  /* [26][0][][] */ 36,-18,51,-102,126,-33,6,-5,127,-43,41,-33,-14,89,1,68, 
  /* [27][0][][] */ 106,-30,19,-39,-29,-54,5,-27,-30,24,-127,17,20,-20,-2,36, 
  /* [28][0][][] */ -103,-37,-127,-75,49,-31,64,-59,0,57,-78,2,35,-19,-55,58, 
  /* [29][0][][] */ -55,-11,8,127,-1,18,3,-24,-18,-11,-79,34,6,-55,13,-47, 
  /* [30][0][][] */ 72,-8,127,-24,59,31,-44,67,-29,-71,54,-23,7,7,-57,63, 
  /* [31][0][][] */ 17,-88,4,-44,-8,-54,21,-34,-15,44,93,23,-15,96,62,127, 
  /* [32][0][][] */ -8,68,-29,40,-127,30,-82,-45,-62,-40,-3,45,9,52,30,60, 
  /* [33][0][][] */ 30,-8,24,127,11,0,25,-35,-99,46,52,-15,10,8,4,104, 
  /* [34][0][][] */ 43,-5,0,-5,75,-54,-127,-23,-33,103,-56,-5,-23,14,14,20, 
  /* [35][0][][] */ 80,3,-7,7,27,-127,-33,-18,-23,-2,-79,-12,78,13,-6,12, 
  /* [36][0][][] */ 18,2,-127,8,41,10,-31,25,-38,-14,0,-3,6,13,-13,10, 
  /* [37][0][][] */ 2,-3,127,-8,-54,26,28,-60,-16,32,-53,14,21,-14,6,1, 
  /* [38][0][][] */ -116,36,-20,35,28,88,15,-35,22,-2,127,-13,-42,-5,0,-28, 
  /* [39][0][][] */ -18,-6,13,31,30,-14,-127,38,14,28,-2,-34,-1,-18,6,-4, 
  /* [40][0][][] */ -1,87,-45,127,-9,36,56,35,-76,-35,-55,53,15,29,-72,-19, 
  /* [41][0][][] */ 10,18,-36,-11,-40,-9,127,92,-57,74,-24,-8,1,53,28,-12, 
  /* [42][0][][] */ 23,-60,-36,-29,19,25,-60,59,88,-96,127,40,-2,30,-40,56, 
  /* [43][0][][] */ -84,-5,22,-48,28,25,-83,-78,-25,43,-7,-19,-127,-20,44,1, 
  /* [44][0][][] */ 10,2,-12,-4,-7,-25,-5,-46,127,-5,15,48,19,80,-1,48, 
  /* [45][0][][] */ -74,-84,14,-110,34,0,-26,59,12,-73,-11,-17,19,115,-36,127, 
  /* [46][0][][] */ -41,17,-17,83,-78,-23,-7,-76,-127,31,-37,-11,-14,39,5,-32, 
  /* [47][0][][] */ -26,-25,-117,127,13,66,-11,-35,15,52,68,78,-27,-15,31,-18, 
  /* [48][0][][] */ -3,-3,35,-127,33,-36,-20,-4,-56,12,29,-29,-23,62,105,41, 
  /* [49][0][][] */ -25,23,41,127,-22,54,-52,-12,14,-44,-107,-38,-26,-52,-107,-118, 
  /* [50][0][][] */ -2,79,39,-124,77,26,-27,64,127,-27,-32,21,-3,-41,5,-38, 
  /* [51][0][][] */ 19,-40,34,-4,43,-3,-64,-127,7,-86,-14,-11,-10,-9,-23,-17, 
  /* [52][0][][] */ 38,23,-10,49,35,-22,-79,116,-104,127,-59,-40,90,101,-5,-30, 
  /* [53][0][][] */ -7,88,0,-82,-36,-10,25,-22,-55,-44,-45,56,10,-127,-92,-5, 
  /* [54][0][][] */ -4,8,12,24,54,-25,11,-35,-3,36,-7,-15,-6,127,-42,-16, 
  /* [55][0][][] */ -124,127,96,-5,35,8,-22,6,-64,17,87,-10,-18,-18,99,-9, 
  /* [56][0][][] */ 57,-2,14,-99,87,0,-7,33,58,-34,39,127,-12,1,103,42, 
  /* [57][0][][] */ -14,-1,6,62,-26,13,36,127,-9,-3,-4,-23,11,64,18,33, 
  /* [58][0][][] */ 10,127,4,-109,15,41,-10,12,97,-12,7,85,-3,-80,35,49, 
  /* [59][0][][] */ 33,52,65,-109,-49,-3,25,-2,17,28,30,-65,-26,-127,-88,12, 
  /* [60][0][][] */ 48,-8,119,-49,-41,127,33,-44,-4,46,-48,-22,28,8,38,-10, 
  /* [61][0][][] */ -32,25,-46,-46,-53,12,113,127,-11,72,-8,13,15,74,19,-35, 
  /* [62][0][][] */ -14,-1,-15,-2,-67,33,-56,5,-24,-16,-2,-47,13,-127,73,-2, 
  /* [63][0][][] */ 13,-38,1,-112,50,5,-127,-119,-45,117,-10,18,78,14,36,-46, 
  /* [64][0][][] */ -30,-14,22,30,71,-1,-34,-127,36,-97,10,-38,6,-22,5,12, 
  /* [65][0][][] */ -127,16,22,-59,5,66,34,-41,-80,26,37,-9,-4,18,-10,-23, 
  /* [66][0][][] */ 54,28,95,-9,-47,17,-17,41,-67,-9,83,-78,-28,49,-127,-35, 
  /* [67][0][][] */ 43,-46,-43,103,47,-60,-76,-88,47,-127,-111,-39,-104,27,-112,43, 
  /* [68][0][][] */ 10,-21,-58,55,-57,-87,3,-48,-41,-18,40,-57,-29,53,127,-11, 
  /* [69][0][][] */ -31,30,-80,43,1,-127,27,65,39,19,61,-14,109,20,-3,-8, 
  /* [70][0][][] */ 22,15,-35,-42,-50,5,127,100,-23,57,-18,15,8,42,14,-7, 
  /* [71][0][][] */ 17,-22,-38,-47,18,6,4,58,-23,-48,-21,-11,20,-127,86,22, 
  /* [72][0][][] */ 32,16,-17,25,39,-35,-29,-127,26,66,-51,22,48,43,38,42, 
  /* [73][0][][] */ -50,-127,-19,-65,-67,-22,40,-27,-16,25,-21,-33,16,-42,58,-13, 
  /* [74][0][][] */ -22,22,58,103,-4,-4,-127,94,23,-34,-45,-48,-2,-17,-21,3, 
  /* [75][0][][] */ -62,38,-44,6,-20,88,95,120,4,65,9,-33,-127,74,22,14, 
  /* [76][0][][] */ 22,-24,-33,-24,31,-78,-127,-98,-13,-13,-1,-21,50,10,72,-20, 
  /* [77][0][][] */ -30,9,-46,-27,-46,-9,-8,-50,127,14,-69,15,-3,37,34,-84, 
  /* [78][0][][] */ -82,-127,4,86,71,62,-23,26,3,-62,-113,58,55,-22,85,59, 
  /* [79][0][][] */ 33,-12,26,-65,127,1,60,20,99,32,8,34,2,-23,20,-35, 
  /* [80][0][][] */ 0,-21,72,-99,-20,-32,-1,15,-90,-40,-17,-50,-1,127,-47,6, 
  /* [81][0][][] */ 12,2,46,55,4,58,-18,-11,15,0,-1,-39,6,43,-127,19, 
  /* [82][0][][] */ -76,-21,31,-126,-15,-38,-1,-41,-53,-47,-63,-120,2,-127,-112,47, 
  /* [83][0][][] */ 5,17,-33,-76,-48,14,-8,34,-91,-4,5,-82,17,-127,3,65, 
  /* [84][0][][] */ 127,34,26,44,-55,1,-60,21,-5,-26,102,5,-60,21,81,-74, 
  /* [85][0][][] */ -5,-17,15,-38,48,-10,-36,116,-94,-121,-69,-34,-14,75,79,-127, 
  /* [86][0][][] */ 17,13,6,4,-68,85,-49,64,-110,-60,37,-12,-19,-127,-18,40, 
  /* [87][0][][] */ 127,-35,19,-5,-43,-36,2,-2,10,11,-110,9,36,0,1,46, 
  /* [88][0][][] */ 17,97,-1,-4,-2,-22,-9,3,127,11,39,21,-43,-18,116,-117, 
  /* [89][0][][] */ 28,68,-66,-18,-33,-17,28,-63,51,43,35,-31,-43,4,-24,-127, 
  /* [90][0][][] */ -37,-15,18,-54,-67,4,127,-42,105,-66,-6,-90,38,-17,-60,-32, 
  /* [91][0][][] */ 8,16,-12,-102,-38,0,25,-49,-65,14,73,55,11,-30,28,127, 
  /* [92][0][][] */ 33,4,2,12,53,-15,-77,-127,56,-55,-4,-33,-42,-4,5,-14, 
  /* [93][0][][] */ 68,7,54,-127,-27,-14,-27,32,51,-87,88,-31,-41,106,-25,21, 
  /* [94][0][][] */ -87,44,-95,21,61,-127,-20,6,-10,-50,80,-26,-16,-2,-21,-3, 
  /* [95][0][][] */ -41,70,21,-127,2,-4,-20,1,4,-26,-45,-87,-13,17,-52,-18, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00065549981081858277, 0.0005529106711037457, 0.00040813820669427514, 0.00027825942379422486, 0.0006869627395644784, 0.00099393376149237156, 0.001382621587254107, 0.00081184413284063339, 0.00026911732857115567, 0.001292085275053978, 0.00053973350441083312, 0.00054897175868973136, 0.00045979479909874499, 0.00055220595095306635, 0.00026328410604037344, 0.0010562437819316983, 0.00047534421901218593, 0.00057399878278374672, 0.00061708787688985467, 0.00069430354051291943, 0.001053901738487184, 0.0017849829746410251, 0.00059036799939349294, 0.0017647150671109557, 0.0021179241593927145, 0.00071766041219234467, 0.0006018240237608552, 0.00058897229610010982, 0.00080531492130830884, 0.00028190264129079878, 0.00021326594287529588, 0.0004378253361210227, 0.00064783310517668724, 0.0010160397505387664, 0.0005873350310139358, 0.00069339107722043991, 0.0013383895857259631, 0.0014662982430309057, 0.00038741080788895488, 0.0024031761568039656, 0.00039766830741427839, 0.00060623855097219348, 0.00022486146190203726, 0.0010614569764584303, 0.00038088220753706992, 0.00047348791849799454, 0.00083583197556436062, 0.00048457784578204155, 0.00023696794232819229, 0.00053546845447272062, 0.00063496705843135715, 0.00055755284847691655, 0.00086411542724817991, 0.000870844058226794, 0.0014719126047566533, 0.00055193336447700858, 0.00057938165264204144, 0.00032934278715401888, 0.0010333124082535505, 0.00060926709556952119, 0.0010326168267056346, 0.00024828134337440133, 0.00082395074423402548, 0.00042814199696294963, 0.00078562949784100056, 0.00075355026638135314, 0.00070692377630621195, 0.00052410276839509606, 0.00097191421082243323, 0.00085956341354176402, 0.00068990059662610292, 0.00049572897842153907, 0.00036332494346424937, 0.00065721204737201333, 0.00090689654462039471, 0.00072260136948898435, 0.00078925688285380602, 0.00094574858667328954, 0.0011028992012143135, 0.0007770649972371757, 0.00034269652678631246, 0.00042196290451101959, 0.00053618266247212887, 0.00047689187340438366, 0.0013500250643119216, 0.00068371451925486326, 0.0007779492880217731, 0.00016722323198337108, 0.00038139006937853992, 0.00062197598163038492, 0.00074554223101586103, 0.0012515955604612827, 0.00067890813807025552, 0.0005992264486849308, 0.00089799758279696107, 0.00046955121797509491, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -3000, 3188, -18131, 27020, 23926, 350, -5794, -4361, 22879, -912, 29231, 23286, -10876, 16304, 34588, -27920, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00042124197352677584, 0.00027126850909553468, 0.00025525313685648143, 0.00026798516046255827, 0.0003658295318018645, 0.00033984793117269874, 0.00033716243342496455, 0.00038191233761608601, 0.0001841675111791119, 0.00024616665905341506, 0.00038974400376901031, 0.00070143275661394, 0.00043547610403038561, 0.00052899244474247098, 0.00045202445471659303, 0.00033631059341132641, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 5,22,-14,20,45,62,-28,-27,41,2,5,12,-2,17,25,67,2,-5,-12,-2,88,-53,7,-17,-20,-28,-43,-94,-11,-6,44,39,113,-5,1,-8,6,-24,-20,5,-34,11,14,-25,4,-28,-15,22,-18,23,-3,-10,-29,-9,10,1,31,20,-25,-31,-63,31,-15,-10,18,9,56,4,16,8,-4,-33,-63,-1,-8,3,-9,-81,5,-20,32,-17,-59,-40,30,-19,2,19,-14,2,18,-24,24,19,-12,127, 
  /* [1][0][][] */ 70,-101,35,101,-16,-78,-8,-59,-15,-94,-22,15,26,-76,-26,-54,-91,-4,26,31,-48,-119,-43,39,127,-61,-78,18,-35,97,-32,48,1,30,-53,16,-33,-18,64,-33,-7,-89,71,-37,-44,23,63,-8,27,32,10,-86,80,-73,42,-22,19,31,-21,-127,37,-75,14,-58,4,-70,32,52,40,60,-55,-14,-122,32,-25,73,36,96,11,-11,40,19,-76,31,-84,65,-6,54,-67,21,11,9,2,-39,38,-8, 
  /* [2][0][][] */ 29,18,21,-28,8,2,-2,38,68,-8,16,76,-4,14,45,5,-8,-14,9,-6,-13,-57,11,-58,-2,-12,-20,25,-5,19,126,-54,23,-72,-22,64,16,127,-44,-17,8,-12,9,38,-39,-52,-53,30,32,25,-29,-27,25,6,-2,-29,-25,-1,0,32,9,10,83,89,11,-81,19,-72,-5,-16,-10,12,-9,14,-17,13,17,57,10,22,18,92,33,-11,-9,6,14,10,34,11,5,-45,-38,9,-11,66, 
  /* [3][0][][] */ -16,-19,-27,29,27,-18,-5,-22,-12,20,6,2,2,-10,47,-12,36,-36,20,10,-9,-10,-13,-1,-10,13,9,-9,21,-43,52,-14,15,-10,-17,44,-6,-13,-12,7,12,-67,23,-31,-5,5,2,7,-127,38,-21,28,-117,-50,-20,-43,31,11,-5,57,-15,18,12,12,-10,-79,-32,20,48,16,-5,28,-34,15,-6,-42,-47,-57,31,-30,13,-13,20,72,34,54,32,12,27,-5,-3,6,-32,2,-18,-17, 
  /* [4][0][][] */ 0,-24,17,-69,2,-17,-45,12,-23,-42,-23,-4,4,64,11,1,47,-21,2,3,-2,32,59,6,-11,1,22,20,3,-12,-3,-5,-31,15,5,19,40,-18,-1,-4,14,12,-90,-24,33,-13,-4,-17,5,76,-6,-13,-23,-14,7,-5,-7,-26,31,40,17,9,11,-2,30,-122,26,-20,-44,18,-13,11,-8,19,-20,31,-22,65,59,-1,16,-2,127,-36,41,-21,-12,6,77,11,4,24,-29,28,-5,-45, 
  /* [5][0][][] */ -3,6,1,-4,-1,-12,5,114,61,-10,-15,-24,-13,29,38,36,-16,-3,-5,-35,-44,-8,3,-45,16,13,29,81,63,1,67,49,-42,24,3,-9,-45,-47,-29,-9,-32,-12,-3,1,68,6,13,9,9,5,-11,13,-23,-10,8,-10,-29,-12,-3,33,-42,27,-15,-37,6,8,-16,12,1,21,8,5,37,15,5,1,-13,31,16,127,-1,-35,24,37,8,-7,25,-24,5,-18,25,-118,-28,-18,-12,-119, 
  /* [6][0][][] */ -22,-8,-15,-50,-7,-25,-19,12,-5,16,-20,-3,39,-59,3,-7,-3,-58,30,8,-2,2,-24,24,78,-9,-1,6,14,-9,12,-13,-22,-2,-22,1,17,5,19,30,-4,-33,-51,-23,-7,-21,21,-127,22,38,25,5,12,-1,-9,-46,29,-5,-11,2,19,21,0,9,39,68,29,-17,-23,-10,16,-31,21,9,39,-7,-34,32,-1,9,-21,2,43,-30,-3,37,17,-22,25,3,-40,-10,-21,6,-5,8, 
  /* [7][0][][] */ 13,12,37,-29,-11,5,-12,-32,1,-12,-16,-22,-14,-89,34,7,-3,-27,-14,-10,17,-21,-41,-3,-15,-11,-2,-24,10,11,1,5,-18,10,-10,-22,-3,-16,-24,21,6,-18,-28,28,1,20,-10,79,-9,22,-18,-25,-29,5,4,-61,49,0,0,4,-10,1,-16,-14,-16,47,17,-32,-6,-9,2,41,-12,-10,-11,3,53,3,1,-13,9,-28,42,3,-33,127,-3,-8,-47,-14,-10,17,-27,-3,-5,13, 
  /* [8][0][][] */ -64,45,-59,3,55,-14,-9,33,7,75,-46,20,24,38,69,-15,1,27,-87,22,10,34,-25,3,-51,-19,23,22,54,-100,11,-13,35,2,20,-5,-13,42,-44,56,8,24,14,-127,-38,-17,45,-35,-42,29,13,70,-106,84,23,8,-1,-18,-30,-26,9,-32,10,32,-35,23,34,-16,-5,9,40,78,-16,39,33,44,-5,-89,-3,-46,-17,-26,16,5,-58,6,17,-35,14,30,-17,13,44,-15,-21,-24, 
  /* [9][0][][] */ 25,-61,-27,-38,21,28,-13,22,33,-18,-1,11,-53,-21,12,25,-8,10,36,-20,-19,9,-24,-42,31,17,28,-6,-32,-39,-22,2,-8,19,20,38,5,47,-37,21,20,12,-9,-91,11,-18,30,-127,-34,-5,8,33,-22,8,-7,-1,-43,32,-6,21,14,18,11,27,24,115,39,39,10,-5,13,-17,-12,1,-27,13,70,-3,14,17,-5,9,20,-39,3,32,-1,8,-51,39,-29,6,11,18,6,-11, 
  /* [10][0][][] */ 20,51,-26,38,67,-115,-5,-29,6,50,22,-2,-11,14,16,-72,12,31,-26,41,-90,-11,-4,-21,-67,-22,-49,45,14,4,-1,32,-14,-6,32,-10,70,-16,-7,-5,-12,60,42,-14,-48,-15,-32,6,-13,-15,-29,-4,-7,-8,-3,-11,5,28,-21,-15,4,3,-20,27,3,36,46,32,20,1,29,49,-55,-20,-56,-10,0,23,-14,4,25,-10,-61,-39,50,-45,86,-3,-27,7,27,-11,80,35,-15,-127, 
  /* [11][0][][] */ 42,41,-35,20,-5,9,47,4,-6,-16,-20,-8,1,3,32,3,-1,-8,-96,-1,-2,9,3,-5,-38,-19,-9,6,-1,17,2,-10,-7,4,5,16,11,12,-5,16,-2,22,53,-92,27,-34,2,-7,-127,15,11,-48,26,20,-11,15,-15,-15,1,-2,12,-18,-9,7,-46,55,-16,12,15,4,23,5,-45,-24,7,30,-7,-33,-51,7,5,-1,79,46,4,-10,-12,-11,3,19,-21,-5,-5,3,-21,8, 
  /* [12][0][][] */ -31,-4,10,-8,-25,38,12,-1,127,8,-9,3,2,6,-32,-41,21,27,9,73,59,30,-4,-25,5,11,20,-29,-103,6,30,-32,5,-6,-4,-22,15,-3,37,-8,-45,-19,2,12,3,25,10,-6,14,1,-44,15,5,0,13,-9,65,-20,13,20,14,-10,15,-13,-1,32,-38,1,0,11,-18,-27,17,11,-63,8,23,-8,14,-62,-10,9,41,41,-16,-17,-25,-24,15,21,-2,47,-13,-19,13,14, 
  /* [13][0][][] */ 26,-14,-31,29,26,-7,4,-3,-9,2,9,-3,13,-13,10,-16,16,-71,-30,8,-13,-22,5,4,7,7,-3,-8,-8,-30,-10,11,-3,3,4,45,13,-3,10,13,-4,3,17,33,14,21,-14,-127,18,0,4,2,-16,-6,14,8,-8,12,17,9,6,13,-12,1,-10,-14,-21,-55,3,11,-13,-37,-16,32,-13,17,-23,-1,14,-3,21,-12,-15,14,9,28,6,14,-8,-4,18,-10,-1,9,-9,-11, 
  /* [14][0][][] */ -111,-54,21,56,32,-32,-33,17,-22,10,-8,18,58,8,-127,4,71,-11,-12,28,-17,-15,36,17,-108,7,25,-8,-40,-72,-25,-5,0,-7,21,-58,31,34,-2,19,18,24,-3,-35,11,119,62,56,-109,48,13,29,-49,-8,32,2,8,3,54,54,35,48,6,49,0,-9,-42,41,3,74,-49,-81,-70,-3,-11,47,-12,41,86,0,49,17,28,23,38,10,40,32,33,37,71,-9,-3,20,24,-32, 
  /* [15][0][][] */ 80,-12,40,-4,-9,76,26,-20,-11,49,15,6,-79,-11,-15,28,15,36,44,-19,22,23,-83,57,19,4,42,-9,29,43,-56,-65,5,-50,44,3,36,-39,-56,-98,-6,33,2,43,2,50,-12,-31,98,-36,-57,22,37,-104,58,-101,8,-55,14,26,-127,-7,19,16,80,-13,-51,39,-26,66,-20,16,46,20,21,-1,28,-57,66,-11,-8,1,39,78,-16,3,0,-55,7,7,62,1,-61,51,26,-5, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017902784049510956, 0.011528912000358105, 0.010848258621990681, 0.011389369145035744, 0.015547754243016243, 0.014443536289036274, 0.014329402707517147, 0.016231274232268333, 0.0078271189704537392, 0.010462082922458649, 0.016564119607210159, 0.029810890555381775, 0.018507733941078186, 0.02248217910528183, 0.019211038947105408, 0.01429319940507412, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 12102, -9436, 3182, 47011, -1819, -4752, -9909, 2328, -2439, 691, 3374, -2226, 2482, -3776, 6582, -4136, -825, 16371, 25075, 2319, 1862, -2383, 676, 731, 15962, 48, -1082, -3696, -5641, -7679, 6250, -8843, -198, -1530, -969, 10608, 1091, -3325, 19900, 702, -727, 1549, -9711, -7639, -8130, 68982, 200, 15547, 31090, -12302, -136, 7482, 6658, -247, -4689, 2500, -13417, 2024, 1786, -7286, -1857, -795, -14007, -111, 1011, 13680, 29801, 27590, -12339, 383, -10218, -1240, 45978, 10565, -62, 959, 18628, 33793, -764, -10174, -1570, -6070, 1052, -3359, 237, 1127, 1901, -523, 1217, -3035, 413, -1315, -657, -306, 52, 47479, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00014760009071324021, 0.00010312401718692854, 0.00023085578868631274, 4.3864518374903128e-05, 0.00015783544222358614, 0.00017499354726169258, 0.00034184384276159108, 7.6739961514249444e-05, 0.0001351463288301602, 0.00033239054027944803, 0.0001390579272992909, 0.00029867773992009461, 0.00010656172526068985, 0.00045950879575684667, 0.00015830982010811567, 0.00023105692525859922, 0.00010444751387694851, 0.0002853113692253828, 6.1839993577450514e-05, 0.00023775963927619159, 5.1607908972073346e-05, 0.00018142780754715204, 0.00014226516941562295, 0.00037098137545399368, 0.0002214575360994786, 0.00026202909066341817, 0.00014483639097306877, 0.00016956440231297165, 0.00012686170521192253, 0.00011337167234160006, 0.00012356540537439287, 0.00017651494999881834, 0.00013438484165817499, 0.00011381010699551553, 0.00017581769498065114, 0.00021615337755065411, 0.00038347765803337097, 0.00011653956607915461, 4.8684720240999013e-05, 0.00015227877884171903, 0.00018264258687850088, 0.00028834294062107801, 0.00038009154377505183, 0.00016504652739968151, 0.00015578482998535037, 6.1674858443439007e-05, 0.0002019472885876894, 0.00021960989397484809, 8.2750535511877388e-05, 0.00021228822879493237, 0.00017280643805861473, 0.00016561962547712028, 0.00022747070761397481, 0.00025468444800935686, 0.00030976950074546039, 0.00048501932178623974, 0.0002686884836293757, 0.00019800258451141417, 0.00011586185428313911, 8.7688247731421143e-05, 0.00033697314211167395, 0.00013168648001737893, 0.00023931420582812279, 0.00013452579150907695, 0.00023702930775471032, 0.00021465863392222673, 7.9368612205144018e-05, 6.6670807427726686e-05, 0.00032053620088845491, 0.00025329799973405898, 0.00019272150530014187, 0.0001363779156235978, 0.00012657462502829731, 0.00013218694948591292, 0.00017424998804926872, 0.00027321020024828613, 0.00050160335376858711, 5.5433771194657311e-05, 0.0003135714796371758, 0.00018017628462985158, 0.00016141434025485069, 0.00034848731593228877, 0.00012662781227845699, 0.00013856033910997212, 0.00011363087833160535, 8.6733001808170229e-05, 0.00013429555110633373, 0.00017008169379550964, 0.00020877947099506855, 0.00010418081365060061, 0.00022262441052589566, 0.00010807727812789381, 0.00014069888857193291, 0.00044018562766723335, 0.023438902571797371, 8.2477316027507186e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,5,-20,105,-18,24,-63,-53,17,-6,98,-9,3,-8,-4,54,5,17,-34,3,76,2,32,-34,3,17,42,49,20,13,25,47,-8,27,10,-15,5,48,-62,-26,20,9,28,17,-85,-57,25,-5,-10,-20,-8,-7,50,5,-9,1,-2,-36,28,-30,27,-2,127,27,-12,-10,11,-54,65,35,2,-8,80,-33,68,4,16,-127,30,63,0,14,127,-13,38,29,-30,-19,36,-7,-14,82,3,19,-2,12, -48,11,-8,10,52,-7,-10,-127,38,14,-127,-5,-18,-12,5,91,18,-29,-13,-16,78,-96,127,26,-61,-32,-104,-15,27,37,-48,17,119,12,-14,-1,-24,127,-64,-127,9,-19,-29,13,47,-127,127,-44,-76,50,49,6,39,-64,31,55,38,41,-100,85,127,34,4,-21,43,-37,-96,-2,37,-31,-17,45,-48,-49,104,-4,-30,-60,-32,63,-67,61,-15,8,-10,48,54,-41,-27,53,-14,73,-127,-31,23,-127, 1,-5,-23,-75,8,19,37,23,-3,-2,4,62,-1,-12,-10,6,-13,18,-16,17,6,24,24,-33,1,-32,10,13,-7,5,47,-80,44,17,10,-22,12,4,-30,-21,8,3,-15,7,22,-33,21,1,7,-8,5,-6,5,6,-6,8,-7,43,6,-1,12,-18,3,-18,-25,-17,30,-50,-106,-7,40,-19,-127,-22,-12,16,10,-12,6,12,-14,22,-37,-3,-40,21,25,36,-24,-18,24,-11,19,6,-2,-45, 
  /* [0][1][][] */ -41,59,-18,38,-86,-15,-11,-44,25,97,-44,-22,-32,-25,-6,62,127,-23,-92,-13,58,-127,-29,15,-35,-48,-127,-6,36,37,-49,27,-127,-75,-58,3,65,-4,-52,45,-19,86,1,-3,34,-53,-13,-32,127,44,-3,20,45,9,-37,-17,32,8,-123,127,-35,-89,20,127,-58,-35,-84,127,-37,127,-18,53,-34,-55,35,8,-36,-69,127,47,127,34,6,0,127,28,-98,47,-37,-36,-102,41,99,102,29,-58, 127,127,127,127,-46,-127,127,24,127,-127,14,-127,-108,127,127,127,-16,-127,-63,-127,127,22,-67,127,127,127,-55,-127,127,127,-127,127,-8,-127,-126,127,-127,-44,97,108,-127,-127,127,127,127,-118,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-104,-28,-70,-67,127,127,-71,127,127,-107,-127,127,-42,127,-127,-127,-127,124,-74,127,-43,127,81,127,-37,-127,-26,-107,-127,-127,-23,-127,-21,-127,-127,117, -24,64,-38,2,127,71,-22,50,6,24,-14,-5,-27,-30,-12,-7,-104,-21,-127,39,31,76,-12,-116,-33,-42,123,71,9,37,73,8,127,-48,127,-3,55,5,-92,13,36,23,-23,1,-23,-54,-13,-42,81,15,-11,39,-5,-4,-76,-14,24,19,127,-87,3,127,0,-37,-109,-27,-75,101,15,-17,113,24,-19,-56,11,46,-29,-7,-43,-2,-46,8,46,23,-89,34,127,-47,33,-23,127,-10,-113,34,34,19, 
  /* [0][2][][] */ -4,-39,-21,-61,-5,15,39,32,-2,10,-20,53,23,-35,-7,7,41,3,13,22,-9,30,-17,-26,2,-25,8,4,-10,-6,50,-76,-39,67,-29,-25,31,-36,-66,16,9,9,-34,19,12,-78,-13,-1,-9,6,16,-8,8,1,-22,6,0,43,-49,35,-4,-12,4,16,-5,-9,23,-53,-56,11,-20,-12,-118,-31,-1,18,14,-12,56,16,23,21,-41,15,12,25,-22,9,6,24,23,-5,20,39,-7,-31, -28,-9,-27,23,-45,75,-25,67,6,-5,52,-11,127,-8,-18,-16,-1,-39,-57,24,-22,78,-46,-112,-47,-48,101,68,12,45,55,-2,-123,63,-16,-23,-28,-28,-127,-4,45,-14,-15,36,-26,-45,-19,-47,-60,28,67,25,-11,-81,29,51,18,25,75,-53,21,-57,-9,0,20,-25,-127,-55,-10,-27,-63,22,36,-45,-30,-6,-44,23,-55,1,50,33,18,11,6,62,-94,127,16,126,-31,-18,116,-22,46,83, -9,-33,-26,29,12,66,-44,13,4,-6,-1,14,11,-51,-9,-12,-44,-6,19,20,-24,5,-22,3,-4,19,-2,51,-3,-5,35,28,17,43,19,-22,-6,-27,-31,7,11,-12,22,9,-74,-31,-14,4,-1,-16,-1,-4,-8,9,-18,-5,0,-50,14,-28,-19,49,9,-30,-9,-2,35,-54,46,6,53,-21,31,-55,-19,22,11,10,-5,22,-30,32,90,-14,-17,54,38,-9,111,11,2,-19,11,-23,-6,-51, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0062730037607252598, 0.0043827705085277557, 0.0098113706335425377, 0.0018642420182004571, 0.0067080059088766575, 0.0074372258968651295, 0.014528363011777401, 0.0032614483498036861, 0.0057437187060713768, 0.01412659790366888, 0.0059099616482853889, 0.012693803757429123, 0.0045288731344044209, 0.019529122859239578, 0.0067281671799719334, 0.0098199192434549332, 0.0044390191324055195, 0.012125733308494091, 0.0026281995233148336, 0.010104784741997719, 0.0021933361422270536, 0.0077106817625463009, 0.0060462695546448231, 0.015766708180308342, 0.0094119450077414513, 0.011136235669255257, 0.0061555462889373302, 0.0072064870037138462, 0.0053916224278509617, 0.0048182960599660873, 0.0052515296265482903, 0.0075018852949142456, 0.0057113557122647762, 0.0048369294963777065, 0.007472252007573843, 0.0091865183785557747, 0.016297800466418266, 0.0049529313109815121, 0.0020691005047410727, 0.0064718481153249741, 0.0077623100951313972, 0.012254574336111546, 0.016153890639543533, 0.0070144771598279476, 0.0066208550706505775, 0.0026211815420538187, 0.0085827596485614777, 0.0093334205448627472, 0.0035168977919965982, 0.0090222498401999474, 0.0073442733846604824, 0.0070388340391218662, 0.0096675045788288116, 0.01082408893853426, 0.013165203854441643, 0.020613320171833038, 0.011419259943068027, 0.0084151094779372215, 0.0049241287633776665, 0.0037267503794282675, 0.014321357943117619, 0.0055966754443943501, 0.010170853696763515, 0.005717345979064703, 0.010073745623230934, 0.0091229919344186783, 0.0033731658477336168, 0.0028335093520581722, 0.013622787781059742, 0.010765165090560913, 0.0081906635314226151, 0.0057960613630712032, 0.0053794216364622116, 0.0056179449893534184, 0.0074056242592632771, 0.011611432768404484, 0.021318143233656883, 0.0023559352848678827, 0.013326787389814854, 0.0076574920676648617, 0.0068601090461015701, 0.014810710214078426, 0.0053816819563508034, 0.0058888145722448826, 0.0048293122090399265, 0.0036861523985862732, 0.0057075605727732182, 0.0072284718044102192, 0.0088731274008750916, 0.0044276844710111618, 0.0094615370035171509, 0.004593284334987402, 0.0059797023423016071, 0.018707888200879097, 0.99615335464477539, 0.0035052858293056488, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 11854, 1649, 5694, -626, 3830, 5701, 21978, 6613, -1338, 12904, 6048, 1251, 7799, 46331, -416, -2421, 11790, 12065, 2183, -161, -641, 13266, 4891, 2903, 9563, 5811, 4675, 4674, 62, 31, 5302, 9274, 17511, 1278, 6532, -720, 22809, 4749, 766, 5926, 809, 11863, 18563, 4682, 3437, 11531, 17508, 4022, 4945, 3298, 345, -647, 20351, 6338, 8278, 16409, -276, 9036, 3288, 4190, 14894, 5586, 2239, 4649, 7522, 4189, 5850, -649, 19290, 9158, 10573, -1488, -1447, 2354, 1600, 3470, 21651, 14803, 12878, -2552, 5735, -6016, -2130, 638, 7954, 6000, 7100, 4099, 12949, 4854, 8042, 4114, 13950, 20005, -8275, 13785, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00022008387895766646, 0.00020447779388632625, 0.00023536545631941408, 0.00086312973871827126, 0.00041911841253750026, 0.0001600049581611529, 0.00014345845556817949, 0.0005270359106361866, 0.00033734104363247752, 0.00014027420547790825, 0.00023751276603434235, 0.00066837697522714734, 0.00035340720205567777, 0.00010422257764730603, 0.0002369224966969341, 0.00028422981267794967, 0.00018894574895966798, 0.00019257488020230085, 0.00021448255574796349, 0.00065345101756975055, 0.00040726552833802998, 0.00018574071873445064, 0.00030140922171995044, 0.00027336031780578196, 0.00018401147099211812, 0.00035912267048843205, 0.00030338592478074133, 0.00019384015467949212, 0.00056146807037293911, 0.00031043536728248, 0.00026755206636153162, 0.00020427783601917326, 0.0001132155884988606, 0.00083447532961145043, 0.00025657526566646993, 0.00040204526158049703, 0.00010039973130915314, 0.00055603287182748318, 0.00056348834186792374, 0.00016256692470051348, 0.00060325284721329808, 0.00015945872291922569, 0.0001164953428087756, 0.00015880783030297607, 0.00032764382194727659, 0.00028266996378079057, 0.00016377441352233291, 0.00036565226037055254, 0.0003213132731616497, 0.000267730065388605, 0.00042699943878687918, 0.00099826965015381575, 0.00013124903489369899, 0.00025365539477206767, 0.00028116465546190739, 0.00011095464287791401, 0.00037882360629737377, 0.00019288963812869042, 0.00023619797138962895, 0.00038358484744094312, 0.00011275162978563458, 0.00025156096671707928, 0.00046923177433200181, 0.0005982639268040657, 0.00013767700875177979, 0.00026731871184892952, 0.00033046433236449957, 0.00051645026542246342, 0.00014003098476678133, 0.00012740057718474418, 0.00018786908185575157, 0.0003225712280254811, 0.00025186131824739277, 0.00055770651670172811, 0.00026663887547329068, 0.00036315614124760032, 0.00010876617307076231, 0.00030361331300809979, 0.00012724148109555244, 0.00047694490058347583, 0.00019060228078160435, 0.00034631195012480021, 0.00019300893472973257, 0.00037794734816998243, 0.00020054542983416468, 0.00025950896088033915, 0.00023000480723567307, 0.00033626501681283116, 0.0001277647097595036, 0.00033365513081662357, 0.00017284743080381304, 0.00040999468183144927, 0.00014967513561714441, 0.00013865833170711994, 0.00035338522866368294, 0.00023731666442472488, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 30,-31,98,111,79,-22,30,-42,127,6,-38,-66,25,64,-33,-91, 
  /* [1][0][][] */ 36,99,-4,11,98,-5,17,37,64,85,-45,127,-14,-33,98,-110, 
  /* [2][0][][] */ 9,-46,-10,-2,-38,40,-33,70,-64,-68,24,80,-11,-127,67,-98, 
  /* [3][0][][] */ 113,127,5,32,-122,-3,-54,-17,-8,-8,104,-58,-46,101,-51,-35, 
  /* [4][0][][] */ -2,-5,23,3,-32,25,-23,48,-73,-48,-17,1,1,-127,30,10, 
  /* [5][0][][] */ 105,-46,-18,3,-19,-104,-23,22,-3,-4,-127,-10,23,4,-2,39, 
  /* [6][0][][] */ -117,-71,-7,99,-32,4,-34,24,-127,-79,-76,-34,28,50,-14,81, 
  /* [7][0][][] */ -15,10,-70,52,42,-127,-33,45,9,-35,10,0,-5,22,-43,15, 
  /* [8][0][][] */ 32,-53,-18,-13,4,25,-54,-61,-7,18,-74,4,-127,5,0,32, 
  /* [9][0][][] */ 20,-59,47,107,9,25,-5,-82,127,-79,13,-28,0,46,-63,16, 
  /* [10][0][][] */ -125,-62,9,-59,127,65,38,47,103,-75,-64,42,93,-115,-109,59, 
  /* [11][0][][] */ 47,-15,-127,20,53,16,-20,38,-12,-26,-12,-13,-1,20,-42,8, 
  /* [12][0][][] */ 97,-67,-10,13,-9,-63,-55,-24,43,14,-127,-17,-58,-28,1,60, 
  /* [13][0][][] */ 45,-80,34,-65,113,10,-114,-127,43,-103,19,6,-13,12,40,-22, 
  /* [14][0][][] */ -58,24,-110,-44,91,-127,73,-67,72,64,-13,-108,24,111,-11,26, 
  /* [15][0][][] */ 24,-1,65,35,51,-42,-38,-13,15,-64,-64,-6,-127,-49,-17,50, 
  /* [16][0][][] */ -114,75,16,11,-3,91,45,82,-33,24,127,11,-2,11,8,-54, 
  /* [17][0][][] */ -4,-18,-41,-45,-28,21,37,71,-18,127,-8,7,0,76,69,-9, 
  /* [18][0][][] */ -4,127,-37,16,0,14,64,-50,15,109,-53,113,17,-31,24,-98, 
  /* [19][0][][] */ 5,-19,33,19,8,42,-4,13,16,8,-42,-13,-127,-4,-7,25, 
  /* [20][0][][] */ 92,-52,-3,-94,-26,14,30,-79,-62,24,-127,-33,38,5,48,11, 
  /* [21][0][][] */ 54,-1,127,52,-17,57,28,-5,3,23,-23,-15,-25,87,5,-13, 
  /* [22][0][][] */ 25,21,34,2,-6,-8,45,127,-5,-3,22,52,1,34,15,14, 
  /* [23][0][][] */ -21,17,-82,12,19,-127,8,33,3,-21,-13,-7,-58,4,3,37, 
  /* [24][0][][] */ 35,-79,-5,-53,63,8,-30,-22,42,44,78,103,-53,75,127,30, 
  /* [25][0][][] */ -123,-127,-60,12,7,-11,3,-53,-53,4,-100,7,15,32,31,66, 
  /* [26][0][][] */ 7,13,55,-9,-2,6,-30,70,-88,-71,-9,21,8,-127,38,-15, 
  /* [27][0][][] */ -97,41,-50,26,28,-20,9,25,44,-23,127,21,-20,5,-4,-19, 
  /* [28][0][][] */ -21,-8,18,33,1,3,17,80,29,17,-18,-8,-127,-11,-10,32, 
  /* [29][0][][] */ -10,65,42,-33,32,-16,23,-21,-127,36,-34,5,4,36,-89,14, 
  /* [30][0][][] */ -12,-2,-127,-36,29,-58,2,12,-20,-12,0,-18,-39,-29,10,14, 
  /* [31][0][][] */ 127,-22,-114,5,47,5,-48,49,-16,-14,-67,-47,7,-11,-79,19, 
  /* [32][0][][] */ -127,58,37,54,23,94,14,42,19,-11,118,11,-28,30,-21,-23, 
  /* [33][0][][] */ 9,-15,127,-24,-58,20,10,-45,-5,19,1,23,-13,10,37,15, 
  /* [34][0][][] */ -14,-32,-56,-112,25,2,13,-27,-13,-41,-21,-127,-20,-1,51,8, 
  /* [35][0][][] */ -10,-34,37,57,57,-16,24,-18,-123,48,-3,30,-23,127,-48,-43, 
  /* [36][0][][] */ -105,40,-38,0,-11,43,43,80,6,38,127,-18,10,7,20,-31, 
  /* [37][0][][] */ -36,19,127,-32,-71,-67,30,-28,6,15,-6,11,1,-58,54,9, 
  /* [38][0][][] */ 23,-24,-24,21,35,-60,-61,-1,-4,-4,65,-22,127,18,1,10, 
  /* [39][0][][] */ -25,-10,-8,-61,-60,-82,54,127,-49,-25,-1,-50,-4,72,54,80, 
  /* [40][0][][] */ 63,-5,-18,-10,-13,93,-17,9,23,-3,20,-1,127,20,-19,-20, 
  /* [41][0][][] */ -2,-10,-31,-127,28,-9,-23,-69,-8,-47,11,-38,-16,-21,-17,25, 
  /* [42][0][][] */ 53,53,11,105,-102,-9,-107,-6,-85,-83,79,-91,-45,127,-64,0, 
  /* [43][0][][] */ 22,108,-28,127,20,26,34,-73,-37,83,-7,23,6,-43,48,34, 
  /* [44][0][][] */ -6,-18,-127,23,65,100,-44,62,-10,-27,50,-32,8,-36,-58,-8, 
  /* [45][0][][] */ -3,18,-16,-127,-19,-6,58,-12,-13,24,-27,9,2,-97,30,-36, 
  /* [46][0][][] */ 7,38,75,-27,23,5,-42,52,8,-56,-18,25,3,127,48,-23, 
  /* [47][0][][] */ 11,-16,23,-36,-31,21,-56,58,-9,-26,22,36,13,-127,37,7, 
  /* [48][0][][] */ 6,-12,7,-127,-11,-25,-3,3,5,-27,10,-14,3,39,-13,63, 
  /* [49][0][][] */ 30,-31,1,116,99,16,11,47,-61,13,45,41,-16,38,127,-16, 
  /* [50][0][][] */ -43,-1,76,-9,-4,127,-19,-51,29,-20,118,42,107,3,-17,-58, 
  /* [51][0][][] */ 25,49,10,10,18,9,-33,23,41,6,1,127,18,33,23,-53, 
  /* [52][0][][] */ -23,65,127,-2,21,-35,18,-46,-32,0,6,30,-2,88,-112,-10, 
  /* [53][0][][] */ -1,-10,-30,-127,-44,4,20,-21,-24,28,6,-3,22,-11,42,15, 
  /* [54][0][][] */ -3,15,-31,-47,20,14,-1,18,64,-14,9,-31,-2,127,16,28, 
  /* [55][0][][] */ -15,-26,-55,-7,26,-44,-3,-127,1,-84,10,6,-39,-99,-55,-9, 
  /* [56][0][][] */ 35,51,37,56,12,-15,14,127,19,-31,5,-27,79,-11,-56,33, 
  /* [57][0][][] */ 80,-43,127,-19,-96,-74,2,-43,16,20,-126,24,56,-65,52,40, 
  /* [58][0][][] */ 98,96,3,118,-127,-31,12,47,-4,33,84,-27,-84,-73,-33,-83, 
  /* [59][0][][] */ 127,-25,10,1,-26,-5,-12,14,-41,8,-123,1,19,11,8,27, 
  /* [60][0][][] */ -127,37,0,7,13,23,27,39,15,8,98,-3,-21,5,26,-25, 
  /* [61][0][][] */ -104,55,16,19,32,-6,-71,-49,127,-83,81,3,45,-34,-88,-61, 
  /* [62][0][][] */ -31,-49,-127,50,54,96,3,88,32,-50,39,-25,-69,-3,-85,0, 
  /* [63][0][][] */ -34,20,127,-30,-57,-53,27,-19,-7,12,-8,20,-9,-43,57,11, 
  /* [64][0][][] */ 24,68,-14,33,66,4,89,-127,-20,112,5,-6,-23,-126,-9,45, 
  /* [65][0][][] */ -1,15,3,-21,64,16,-1,-127,-15,-53,-22,-46,-13,-38,41,15, 
  /* [66][0][][] */ -127,0,-17,1,-40,16,5,-44,-78,-41,-79,53,58,21,49,83, 
  /* [67][0][][] */ -11,-49,11,127,3,-4,-28,38,63,18,9,-17,2,-30,-84,-22, 
  /* [68][0][][] */ 4,-5,-4,127,-45,-14,-6,-35,-49,19,11,-21,-20,-63,-30,-51, 
  /* [69][0][][] */ 76,91,15,114,55,-14,67,-127,20,103,25,49,4,-48,31,-24, 
  /* [70][0][][] */ 28,-27,-5,-108,113,-49,52,4,77,-33,69,-72,1,95,77,127, 
  /* [71][0][][] */ 12,46,7,86,42,-127,-35,98,41,-88,14,13,8,-54,-57,37, 
  /* [72][0][][] */ -127,-68,-13,51,19,46,-14,26,-38,-21,-73,43,47,21,2,77, 
  /* [73][0][][] */ -14,-19,-12,65,13,-24,0,-12,70,13,-8,2,19,127,-60,-40, 
  /* [74][0][][] */ 74,-34,18,-42,-29,-23,41,-26,-52,-10,-100,28,-127,-27,23,37, 
  /* [75][0][][] */ -24,-25,-32,127,-28,13,-5,-30,-63,22,-8,-27,-6,-60,-17,-41, 
  /* [76][0][][] */ -6,-10,-5,45,39,21,-15,-127,23,-124,13,21,-20,-16,37,-49, 
  /* [77][0][][] */ 127,-35,31,43,-42,-3,-47,-5,33,-14,-45,54,43,12,-59,42, 
  /* [78][0][][] */ -15,-9,43,4,7,-6,-66,31,53,-24,-38,-38,27,127,39,-30, 
  /* [79][0][][] */ 3,15,54,24,47,66,-56,-57,9,-53,69,-12,127,-26,-33,-49, 
  /* [80][0][][] */ -120,-76,-75,127,23,33,28,-21,-82,46,-93,27,51,-103,-7,39, 
  /* [81][0][][] */ 73,20,-89,36,127,95,-41,-49,1,-99,-32,-92,-31,-13,-105,34, 
  /* [82][0][][] */ 124,114,-16,31,-113,-29,-74,-37,-61,9,127,-73,-70,83,0,-53, 
  /* [83][0][][] */ 127,43,10,-32,12,-14,-12,18,34,17,89,-35,-49,-38,-26,-81, 
  /* [84][0][][] */ 11,-49,-56,-37,49,30,-5,-127,-25,-49,33,18,-26,-2,2,-14, 
  /* [85][0][][] */ -21,-2,-33,-55,-15,-5,74,109,-24,127,-18,-47,43,83,67,-24, 
  /* [86][0][][] */ 90,-30,8,5,1,-25,-3,-22,-3,-2,-127,11,20,15,-15,18, 
  /* [87][0][][] */ -32,30,21,-31,-3,65,-30,51,-4,-29,38,15,15,-127,8,4, 
  /* [88][0][][] */ -17,-27,-127,-41,58,1,-25,-120,14,-12,4,-27,-39,-17,13,-22, 
  /* [89][0][][] */ 7,-39,22,-127,33,6,-68,122,95,-86,49,13,-22,33,32,41, 
  /* [90][0][][] */ -17,2,-54,46,68,-9,96,-92,84,127,-34,36,19,2,-8,-21, 
  /* [91][0][][] */ 40,-23,-51,-16,-5,-127,-15,-3,-4,-3,-55,-10,33,-14,14,32, 
  /* [92][0][][] */ 24,15,127,43,48,8,7,30,-43,26,-64,34,27,68,-5,1, 
  /* [93][0][][] */ 127,-43,-44,-19,-23,-61,8,29,-19,47,-110,-10,-4,9,5,38, 
  /* [94][0][][] */ 13,-20,40,73,112,-29,-8,60,10,-17,1,56,-6,127,-20,-79, 
  /* [95][0][][] */ -108,32,33,36,15,42,24,2,19,11,127,-7,-19,30,-6,-33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00072407507104799151, 0.00067273114109411836, 0.00077435141429305077, 0.002839693333953619, 0.0013788979267701507, 0.00052641564980149269, 0.00047197772073559463, 0.0017339460318908095, 0.0011098507093265653, 0.00046150159323588014, 0.00078141601989045739, 0.0021989576052874327, 0.0011627082712948322, 0.00034289187169633806, 0.00077947403769940138, 0.00093511492013931274, 0.00062163075199350715, 0.00063357059843838215, 0.00070564675843343139, 0.002149851294234395, 0.0013399019371718168, 0.00061108620138838887, 0.00099163514096289873, 0.00089935434516519308, 0.00060539698461070657, 0.001181512139737606, 0.00099813845008611679, 0.00063773331930860877, 0.0018472276860848069, 0.0010213310597464442, 0.00088024523574858904, 0.00067207327811047435, 0.00037247882573865354, 0.0027454204391688108, 0.00084413157310336828, 0.001322727301158011, 0.0003303147095721215, 0.0018293458269909024, 0.0018538743024691939, 0.00053484452655538917, 0.0019846993964165449, 0.0005246185464784503, 0.00038326921639963984, 0.00052247714484110475, 0.0010779468575492501, 0.00092998304171487689, 0.0005388171412050724, 0.001202994491904974, 0.0010571193415671587, 0.00088083080481737852, 0.0014048264129087329, 0.0032843032386153936, 0.00043180878856219351, 0.00083452527178451419, 0.00092503061750903726, 0.00036504032323136926, 0.0012463281163945794, 0.00063460611272603273, 0.00077709037577733397, 0.0012619926128536463, 0.00037095241714268923, 0.000827634590677917, 0.0015437706606462598, 0.0019682860001921654, 0.00045295679592527449, 0.0008794774767011404, 0.0010872263228520751, 0.0016991192242130637, 0.00046070138341747224, 0.00041914737084880471, 0.00061808852478861809, 0.0010612580226734281, 0.00082862272392958403, 0.0018348521552979946, 0.00087724084733054042, 0.0011947822058573365, 0.00035784026840701699, 0.00099888653494417667, 0.00041862393845804036, 0.0015691467560827732, 0.0006270807352848351, 0.0011393649037927389, 0.00063499860698357224, 0.0012434452073648572, 0.00065979367354884744, 0.00085378339281305671, 0.00075671490048989654, 0.0011063105193898082, 0.00042034537182189524, 0.0010977240744978189, 0.0005686673684976995, 0.0013488808181136847, 0.00049243058310821652, 0.00045618537114933133, 0.0011626359773799777, 0.00078077084617689252, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -36822, 2913, 1938, -6599, 2759, -4275, -11948, -43834, 892, 25280, 32908, -12155, -2307, -23252, 37225, -46716, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00068184902193024755, 0.00075947295408695936, 0.0008888975135050714, 0.0011284549254924059, 0.00064743414986878633, 0.00096532871248200536, 0.0010704370215535164, 0.000556754763238132, 0.00071219709934666753, 0.00065607536816969514, 0.00074437592411413789, 0.00055318529484793544, 0.0011491883778944612, 0.0011022823164239526, 0.00058424647431820631, 0.00060836947523057461, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -12,-5,-24,6,23,-3,2,105,-54,13,45,-11,19,-20,-10,20,19,-18,-9,-6,62,-5,22,127,-15,88,-1,-19,26,-21,21,-26,-16,48,26,-54,19,51,15,-11,-112,-28,26,47,40,31,-122,-45, 
  /* [1][0][][] */ -40,-17,17,12,-33,14,-2,57,-57,-32,11,-44,-20,-20,-1,-3,-23,125,-12,19,8,7,-29,-21,24,-43,14,29,-29,-93,-42,17,-16,-10,29,-2,-1,-44,3,14,-24,-28,127,9,11,0,27,-15, 
  /* [2][0][][] */ -21,-4,-10,-36,-4,-68,6,-21,0,12,13,26,13,17,-12,8,-5,-22,-23,-13,-6,1,-2,-127,-12,76,-14,1,0,-19,-2,-4,-9,57,13,-1,26,11,26,2,-38,1,-17,-6,-2,-12,13,8, 
  /* [3][0][][] */ -6,31,1,-31,-3,0,2,-5,-20,-4,-1,37,-127,6,-3,-2,-1,4,-19,-2,-32,9,8,16,-8,-12,4,23,-11,19,5,18,5,2,17,18,-12,28,41,5,10,4,23,-28,9,-4,3,19, 
  /* [4][0][][] */ 37,-28,11,10,20,25,24,-25,-29,1,-14,-20,-1,9,3,16,20,-7,-76,4,-2,13,16,72,3,-29,9,45,10,-68,20,9,11,-31,34,-127,8,37,-3,20,-16,16,11,-20,-9,-17,8,8, 
  /* [5][0][][] */ 33,0,-19,54,2,-4,9,21,0,-7,38,6,4,48,5,4,-21,19,31,5,14,6,4,-26,4,-52,4,-23,-1,-6,6,9,67,-127,6,27,-17,-9,11,8,-86,54,22,-1,-2,1,-96,-5, 
  /* [6][0][][] */ 23,-5,3,3,-13,-3,1,-12,-6,8,1,4,-17,7,3,2,0,-13,127,7,6,8,14,-37,6,3,27,-11,-13,-6,-4,5,2,-14,29,-40,4,-45,73,14,-2,-5,-9,5,-8,0,9,-10, 
  /* [7][0][][] */ -48,-14,-7,34,-12,79,-8,50,-4,34,-9,127,81,0,-9,-4,-10,-27,-10,-22,-35,-9,-21,68,-4,-35,-54,-31,-15,-18,-15,-6,2,1,-23,6,15,-63,101,-7,19,26,-66,-67,13,-15,2,-2, 
  /* [8][0][][] */ -51,-49,-5,6,-4,6,0,33,0,-71,8,45,46,2,10,4,-9,63,-30,11,-47,23,-10,-13,4,-1,3,48,-8,123,-9,18,-1,0,-20,-127,-117,67,38,30,23,1,110,-25,7,27,25,32, 
  /* [9][0][][] */ -22,8,0,34,18,-38,0,-4,62,-45,5,58,-55,9,13,4,-10,22,-34,-19,50,10,-8,-14,0,12,49,-29,10,13,14,2,-9,24,79,-101,-9,-127,-99,7,-28,21,60,11,5,11,-20,-44, 
  /* [10][0][][] */ -20,-10,-37,-127,45,89,7,-12,0,31,28,12,47,-53,-31,23,38,-42,56,-31,35,-22,39,55,-45,-112,6,-35,50,36,43,-45,-29,-85,25,-6,13,-43,6,-35,-31,-62,-9,12,15,19,20,-36, 
  /* [11][0][][] */ -4,50,-8,64,38,-64,-87,-15,0,65,-11,2,-12,52,-1,-87,22,40,10,-7,-57,-109,11,-2,18,-44,19,-18,56,-41,24,-90,57,-28,-36,-100,99,20,9,-127,-6,76,101,-79,-12,-59,40,31, 
  /* [12][0][][] */ 127,-3,-18,16,1,16,5,101,20,-10,-59,-25,2,16,-10,-4,-9,9,-5,-6,2,-1,0,21,-3,17,-5,6,-2,13,-4,2,1,-63,-10,12,-16,-15,-28,0,-15,-81,4,-126,-56,-14,77,-5, 
  /* [13][0][][] */ 8,1,-1,6,7,-10,3,2,1,6,7,23,-6,4,6,0,6,1,11,4,12,-11,7,-4,2,3,16,127,10,-6,5,-2,6,-1,-39,22,11,-6,6,-16,-15,-2,2,4,-3,-2,-7,-15, 
  /* [14][0][][] */ 59,-23,40,-72,49,33,34,-93,-57,-50,1,120,-72,-3,56,10,57,24,-57,70,19,9,65,-21,24,60,-35,-110,25,-39,54,41,-5,67,-127,-51,-34,41,94,11,-41,11,48,-3,3,-6,18,-27, 
  /* [15][0][][] */ -9,-46,-67,-33,56,22,75,-48,-6,21,-21,-31,79,26,-95,61,56,46,79,-89,-105,-28,52,-8,-96,47,28,52,53,50,46,-42,20,65,101,127,-14,-111,-8,-38,93,60,119,-54,-7,-37,-22,61, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028978582471609116, 0.032277598977088928, 0.037778142839670181, 0.047959331423044205, 0.027515949681401253, 0.041026469320058823, 0.045493572950363159, 0.023662077262997627, 0.030268376693129539, 0.027883203700184822, 0.031635977327823639, 0.023510374128818512, 0.048840504139661789, 0.046846996992826462, 0.024830473586916924, 0.02585570327937603, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 3556, 27886, -1198, 47758, 4245, 130014, -1326, 43969, 5547, 29597, 29190, 9710, -2100, 31941, -1070, -1097, -423, -265, 2884, -1805, 1042, -2069, -640, -22777, -5022, 38121, 132905, 96188, 3340, 2588, -2552, -349, 27470, -1922, 34730, -8535, 44319, 1223, 52789, 1857, -1534, 52998, 2706, 3381, 45180, 223, 3202, 48281, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.257930701598525e-05, 4.2396335629746318e-05, 0.00016246925224550068, 4.8668909585103393e-05, 0.00014699190796818584, 6.2113031162880361e-05, 0.00019232317572459579, 0.0001355427666567266, 7.273493247339502e-05, 3.7526551750488579e-05, 5.8054585679201409e-05, 6.6728294768836349e-05, 4.7912231821101159e-05, 3.7206129491096362e-05, 0.0001737091806717217, 0.00022976943000685424, 0.00020448460418265313, 8.3117498434148729e-05, 0.00010582799586700276, 0.00017777657194528729, 7.3277762567158788e-05, 0.00023366235836874694, 8.5680534539278597e-05, 0.00015447659825440496, 0.00010121841478394344, 0.00012253252498339862, 3.3584045013412833e-05, 7.5577860116027296e-05, 0.00010478933836566284, 0.00014175388787407428, 0.00011103844008175656, 0.00013654996291734278, 6.3258725276682526e-05, 0.00019088681438006461, 3.0041443096706644e-05, 6.7001848947256804e-05, 0.00012907404743600637, 9.6222080173902214e-05, 0.00010794623813126236, 0.00010075880709337071, 0.00014234302216209471, 0.00011444278061389923, 7.7225929999258369e-05, 8.478902600472793e-05, 2.6532479751040228e-05, 0.0001509357534814626, 9.1058886027894914e-05, 2.2082987925386988e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-91,97,71,52,-35,106,-64,61,-89,-80,47,51,-42,-71,-90,102,78,48,78,67,-75,-82,50,-32,-40,-64,-63,-67,62,-62,-114,-12,42,68,64,-65,53,-50,-23,50,-73,57,61,-92,11,76,-33, 82,-96,127,86,-77,-69,-57,-84,97,-102,-63,73,79,-110,-95,90,-38,95,82,127,84,-117,53,71,-51,-78,-69,-80,55,79,-30,-127,-86,80,81,84,-82,83,-82,-16,76,-94,83,89,-73,-127,94,-103, 35,-46,70,37,18,-42,-47,-39,42,-31,4,34,28,-79,-55,-2,-53,38,33,70,33,-55,32,25,-28,-46,-43,-23,30,31,87,-89,-84,44,35,34,-30,39,-38,-11,41,-40,33,43,-6,-10,36,-74, 
  /* [0][1][][] */ 92,-112,-42,94,54,-82,127,-90,87,-113,-71,81,82,-110,-13,-127,127,107,74,-37,84,108,-127,73,73,-75,-94,-98,-127,86,-69,-8,-88,70,106,96,-85,79,-80,89,84,-101,87,91,-88,106,94,-91, 127,-127,-66,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-22,95,-65,127,127,-49,127,127,69,127,127,-127,-127,-127,52,127,-28,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 64,-77,-34,66,36,-63,-49,-62,56,-42,-61,58,48,-54,-17,9,-62,51,58,-28,56,64,51,63,65,-65,-61,-44,36,55,127,15,-62,69,48,49,-50,60,-60,56,61,-57,53,62,-62,-67,58,-57, 
  /* [0][2][][] */ 46,-50,-48,50,26,-52,63,-42,41,-72,-4,39,56,-73,82,-80,73,50,34,-30,26,-12,-78,30,-24,-44,-48,-48,-74,32,-41,91,-74,36,48,43,-27,37,-43,-87,47,-49,40,45,-22,15,40,-75, 73,-73,-50,81,-57,-63,-73,-68,51,-77,-67,60,74,-47,127,31,-46,59,61,-43,55,-19,41,67,-48,-66,-77,-61,31,61,-24,118,-55,65,56,58,-50,61,-67,-105,69,-67,60,62,-86,49,63,-53, 41,-40,-27,47,28,-20,-18,-34,15,-27,-53,28,31,6,67,23,-36,22,28,-30,29,-1,39,41,-24,-29,-47,-23,33,34,61,67,1,34,16,22,-23,30,-29,-55,28,-31,25,29,-63,9,31,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0030846204608678818, 0.0018018442206084728, 0.0069049433805048466, 0.0020684285555034876, 0.0062471558339893818, 0.0026398038025945425, 0.0081737348809838295, 0.0057605672627687454, 0.0030912347137928009, 0.0015948783839121461, 0.0024673198349773884, 0.0028359524440020323, 0.0020362697541713715, 0.0015812604688107967, 0.0073826401494443417, 0.0097652003169059753, 0.0086905956268310547, 0.003532493719831109, 0.0044976896606385708, 0.0075555038638412952, 0.0031143047381192446, 0.0099306497722864151, 0.0036414226051419973, 0.0065652555786073208, 0.0043017826974391937, 0.005207632202655077, 0.0014273218112066388, 0.0032120589166879654, 0.0044535468332469463, 0.006024540401995182, 0.0047191334888339043, 0.0058033731766045094, 0.0026884956751018763, 0.0081126894801855087, 0.0012767612934112549, 0.0028475786093622446, 0.0054856468923389912, 0.0040894383564591408, 0.0045877150259912014, 0.0042822491377592087, 0.0060495780780911446, 0.0048638181760907173, 0.00328210205771029, 0.0036035336088389158, 0.0011276303557679057, 0.0064147692173719406, 0.0038700024597346783, 0.00093852699501439929, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 660, 1019, 2629, 486, 9207, 18588, 2535, -125, -739, -671, 1261, 1149, 3546, 1317, 26646, 3121, 2225, -1243, -222, 3269, -1908, 12192, 10369, 11717, 5436, 448, 3467, 3672, 8957, -517, 8742, 6226, 656, -125, 5422, 3211, -1798, 352, -729, 6000, 1268, -618, -1098, 56, 1030, 2712, 965, 1043, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00037574197631329298, 0.00068698427639901638, 0.00022091333812568337, 0.00029142861603759229, 0.00023756478913128376, 0.00021710530563723296, 0.0004388498782645911, 0.00023072441399563104, 0.00040200786315836012, 0.00064093817491084337, 0.00080644822446629405, 0.00027320138178765774, 0.00035358971217647195, 0.00058828538749366999, 0.00013584847329184413, 0.00039886074955575168, 0.00022717921820003539, 0.0003019167052116245, 0.00024108082288876176, 0.00027769495500251651, 0.00032181281130760908, 0.00021062635642010719, 0.0003559446195140481, 0.00013416398724075407, 0.00029264236218295991, 0.00025396727141924202, 0.0020043500699102879, 0.00050418073078617454, 0.00019521720241755247, 0.00043200558866374195, 0.00029755505966022611, 0.00019404917838983238, 0.00061888835625723004, 0.00022969445853959769, 0.00067913025850430131, 0.00056756206322461367, 0.00076983362669125199, 0.00032154491054825485, 0.00021976364951115102, 0.00031181235681287944, 0.00014785505481995642, 0.00020299157768022269, 0.00027751695597544312, 0.00027190634864382446, 0.0018937861314043403, 0.00051600666483864188, 0.00025429861852899194, 0.0011025839485228062, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,4,0,72,-34,38,27,-33, 
  /* [1][0][][] */ 28,76,50,19,20,-46,108,127, 
  /* [2][0][][] */ -41,0,3,-3,-127,-14,14,9, 
  /* [3][0][][] */ 104,-8,-13,-127,-122,19,40,-14, 
  /* [4][0][][] */ -127,55,-4,-20,82,-19,46,12, 
  /* [5][0][][] */ -102,-29,20,-9,-127,9,7,87, 
  /* [6][0][][] */ -14,-127,26,-20,11,3,-2,33, 
  /* [7][0][][] */ -61,-7,-1,102,127,-31,-36,3, 
  /* [8][0][][] */ 67,-1,0,-127,-4,-19,-43,-33, 
  /* [9][0][][] */ -3,-127,-13,-8,5,95,-53,87, 
  /* [10][0][][] */ -92,1,-4,19,-127,67,63,-18, 
  /* [11][0][][] */ 121,9,37,16,-60,-51,-39,-127, 
  /* [12][0][][] */ 3,10,38,-6,8,-76,127,63, 
  /* [13][0][][] */ 73,-20,-15,-20,127,126,120,-47, 
  /* [14][0][][] */ 127,51,-12,21,-105,-13,-31,-27, 
  /* [15][0][][] */ -20,-127,23,-13,8,9,5,39, 
  /* [16][0][][] */ -48,-21,-1,0,-127,-5,7,3, 
  /* [17][0][][] */ -19,110,-123,3,18,-127,109,-96, 
  /* [18][0][][] */ 127,-25,-39,16,-54,24,13,99, 
  /* [19][0][][] */ 127,-36,-13,-5,48,-10,31,2, 
  /* [20][0][][] */ 127,25,-16,127,-2,33,4,-55, 
  /* [21][0][][] */ 7,35,-68,11,-24,95,-127,-97, 
  /* [22][0][][] */ -127,28,25,-3,-25,2,-41,-21, 
  /* [23][0][][] */ -42,-59,4,21,-127,66,81,-14, 
  /* [24][0][][] */ 127,5,-6,-3,-89,-18,3,9, 
  /* [25][0][][] */ 27,-11,-1,-23,127,51,50,-39, 
  /* [26][0][][] */ -1,-94,3,-39,8,-127,82,-55, 
  /* [27][0][][] */ -20,-127,28,-13,-2,-55,34,-7, 
  /* [28][0][][] */ -105,45,-27,2,-8,-25,127,91, 
  /* [29][0][][] */ -10,42,12,6,-4,40,-94,-127, 
  /* [30][0][][] */ 127,-27,9,13,-72,6,-39,-28, 
  /* [31][0][][] */ -21,-23,54,-12,19,-111,127,69, 
  /* [32][0][][] */ -69,31,3,4,-127,-100,-100,43, 
  /* [33][0][][] */ -26,16,-2,19,-127,-59,-50,18, 
  /* [34][0][][] */ 4,-127,51,-8,-10,85,-69,60, 
  /* [35][0][][] */ -24,-49,-127,-12,-5,-70,43,-55, 
  /* [36][0][][] */ 10,127,57,10,-13,14,-25,-44, 
  /* [37][0][][] */ -127,36,33,-18,61,-27,-8,-112, 
  /* [38][0][][] */ -127,-17,-58,-13,43,27,38,121, 
  /* [39][0][][] */ 2,-34,68,1,14,-97,127,98, 
  /* [40][0][][] */ -27,-12,-14,-41,-127,102,110,-34, 
  /* [41][0][][] */ -127,56,6,-83,-101,-103,-100,46, 
  /* [42][0][][] */ -43,-127,-97,-4,-10,67,-116,-83, 
  /* [43][0][][] */ -68,7,-22,-127,94,63,63,4, 
  /* [44][0][][] */ 127,-5,13,-99,29,-37,-14,41, 
  /* [45][0][][] */ -17,-127,1,-10,-15,-66,73,-1, 
  /* [46][0][][] */ 118,-1,-9,-26,127,-43,-30,-1, 
  /* [47][0][][] */ 127,-7,2,115,-7,28,17,-39, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00076076213736087084, 0.0013909322442486882, 0.00044728166540153325, 0.00059005344519391656, 0.00048099574632942677, 0.00043957156594842672, 0.00088853621855378151, 0.00046714607742615044, 0.00081394246080890298, 0.0012977030128240585, 0.0016328099882230163, 0.00055314891505986452, 0.00071591057348996401, 0.0011910973116755486, 0.00027505145408213139, 0.00080757052637636662, 0.00045996814151294529, 0.000611288589425385, 0.0004881146305706352, 0.00056224700529128313, 0.00065157213248312473, 0.00042645368375815451, 0.00072067853761836886, 0.00027164086350239813, 0.00059251091443002224, 0.0005142057198099792, 0.0040581934154033661, 0.0010208111489191651, 0.0003952549013774842, 0.00087467866251245141, 0.00060245761414989829, 0.00039289001142606139, 0.0012530589010566473, 0.00046506075887009501, 0.0013750302605330944, 0.0011491389013826847, 0.0015586767112836242, 0.00065102969529107213, 0.00044495391193777323, 0.00063132424838840961, 0.00029936106875538826, 0.00041099562076851726, 0.00056188664166256785, 0.00055052683455869555, 0.0038343353662639856, 0.0010447549866512418, 0.00051487662130966783, 0.0022323939483612776, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -41909, 26435, -15317, -12672, 16611, -7920, 34481, 43409, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00053154636407271028, 0.0007924041710793972, 0.0015804249560460448, 0.0017523806309327483, 0.00073158292798325419, 0.00058811996132135391, 0.00077519915066659451, 0.0010716201504692435, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-13,-35,17,9,-20,-2,4,-120,127,-35,106,122,10,76,-23,-3,-31,3,2,-6,-3,-24,-37,27,-93,17,61,-11,9,20,-37,-2,-76,115,20,2,-1,-3,-19,116,2,48,-22,-29,26,-14,-14, 
  /* [1][0][][] */ -1,33,127,2,-8,-24,1,-79,29,-4,18,2,-16,3,-2,-114,10,-57,10,5,-28,29,25,-37,-21,-11,10,-2,14,-6,14,-2,-1,14,12,13,-15,-29,65,-52,7,39,-7,22,-17,11,23,-3, 
  /* [2][0][][] */ 4,-48,19,-40,35,26,-4,-30,3,3,-1,18,-12,58,10,0,-35,127,-27,-32,-14,24,-35,-8,121,-2,-2,-6,-28,-10,2,-37,-9,-16,2,13,-8,-1,-14,7,18,-22,-14,1,-1,22,-23,-36, 
  /* [3][0][][] */ 3,-86,-1,6,2,-6,-11,-2,-9,-12,18,19,11,-11,47,2,-11,-20,5,26,-3,20,-24,4,4,51,2,4,-7,8,127,2,12,8,-2,2,-18,-13,-5,12,-8,8,-10,27,-7,0,0,36, 
  /* [4][0][][] */ -92,9,5,4,3,-38,4,5,36,-34,21,-16,-32,1,-9,-12,5,9,-3,27,11,-23,16,4,-5,47,3,108,-1,2,-4,-29,0,-127,-29,16,5,-2,3,-1,-46,-7,-11,18,-60,2,6,10, 
  /* [5][0][][] */ -21,29,27,10,-45,11,0,44,18,9,16,9,-7,-45,13,39,2,-80,17,5,43,-39,11,40,11,2,-87,-46,-39,-32,23,1,-1,-65,-1,-62,69,19,-40,12,29,-45,6,7,127,-12,-40,2, 
  /* [6][0][][] */ -21,-26,-19,-9,35,-25,1,-25,-9,-5,33,-20,-13,41,-5,-56,-4,-2,-2,-20,-35,50,-11,-77,4,-7,-51,-70,23,47,-16,4,-1,-57,-15,59,-69,-51,11,-61,-13,15,14,39,127,-29,38,10, 
  /* [7][0][][] */ 15,34,-75,26,-21,15,6,59,-8,-3,65,-32,8,-29,-12,-7,-19,-127,39,-41,61,42,15,-57,21,-17,25,3,-22,29,-13,8,-1,39,-1,-24,-8,-54,-40,-70,-13,-27,36,64,-29,-19,-5,1, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.022590721026062965, 0.033677175641059875, 0.067168056964874268, 0.074476175010204315, 0.031092274934053421, 0.024995097890496254, 0.032945964485406876, 0.045543856918811798, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52289, 118, 7938, -499, 5618, -4879, 1123, 17670, 981, 26330, -2715, 17537, -6224, -747, 21396, 440, 495, 16517, 26824, 11551, -71, -47, 950, 10906, -8216, 22840, 46145, 35779, 3368, 235, -6, 1505, 455, 17989, -6918, 14671, -10423, 21364, -22662, 96711, 18897, 20635, 11256, -1818, 15636, 2996, 1454, 126, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035071044112555683, 0.00037660173256881535, 0.00019122101366519928, 0.00037433553370647132, 0.00015802655252628028, 9.881457663141191e-05, 0.0010597225045785308, 0.00019415555289015174, 0.0001658175460761413, 0.00018286134582012892, 0.00011410964361857623, 0.00024365789431612939, 0.00029456260381266475, 0.0002620793238747865, 0.00011571652430575341, 0.0033446613233536482, 0.00020187052723485976, 0.00024974212283268571, 8.7914937466848642e-05, 0.00017109705368056893, 0.00027426410815678537, 0.00018940390145871788, 0.00023139311815612018, 0.00019662355771288276, 0.00017471019236836582, 0.00016364695329684764, 0.00063779711490496993, 9.2747817689087242e-05, 0.00020719635358545929, 0.0032856545876711607, 8.7630483903922141e-05, 0.00015284138498827815, 0.0018272683955729008, 0.00016019731992855668, 0.00020051123283337802, 0.00016589353617746383, 0.0004208046302665025, 0.00012119620078010485, 0.00027876780950464308, 2.4121130991261452e-05, 0.00017052376642823219, 6.2252765928860754e-05, 0.00014353453298099339, 0.0001823810744099319, 0.00015494985564146191, 0.00012284840340726078, 0.00019049244292546064, 0.00015758891822770238, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,21,109,4,80,-1,28,15,8,9,7,-8,-8,-44,9,-2,8,-24,-115,-6,-23,127,-10,-2,6,-5,9,-5,5,16,98,20,29,38,-27,1,34,-2,1,18,-68,-8,-8,16,3,-7,-10, 127,9,15,-127,27,86,10,11,123,127,7,43,-50,-24,6,8,127,-56,-60,-56,-101,24,-110,15,17,70,-32,-84,23,21,9,-124,6,-61,127,10,-40,-47,-6,115,-78,-98,-29,3,-35,-8,-127,22, -32,-3,8,15,-1,64,4,18,27,8,-14,31,-14,-3,16,4,-104,29,-3,78,-31,-12,-18,-6,-4,-59,-3,29,-17,5,4,-22,8,-24,16,-19,0,47,42,-13,50,37,-15,11,-44,3,-2,-6, 
  /* [0][1][][] */ 125,7,1,-98,13,-27,35,-16,8,8,-12,53,-6,-1,18,-32,0,-50,-61,-86,10,-74,-125,-18,5,98,-15,-127,-9,33,12,-108,17,-53,-2,127,-3,58,-41,40,-62,-127,39,-88,-45,-14,-13,-5, 26,-127,-127,115,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-83,127,127,-107,127,127,112,127,127,-127,-127,29,-127,-127,93,127,-127,127,-29,-41,127,-127,127,127,127,-81,127,127,127,-121,102,106, 53,5,49,-13,5,-61,44,18,-24,14,-104,-8,1,-40,127,5,63,-66,-71,86,14,-46,11,-33,1,6,-38,69,20,40,1,3,33,-44,8,66,-5,64,68,-10,-81,8,-84,-31,27,-16,-11,5, 
  /* [0][2][][] */ -53,-7,25,-16,6,34,-37,23,7,-24,12,33,7,-6,-38,18,4,22,-14,106,6,-32,-17,-12,-3,22,0,51,-10,3,47,-31,-18,-44,-32,-39,-1,31,9,-23,9,-5,41,-37,-36,18,-11,17, 68,125,75,21,16,-21,123,35,18,-3,43,26,-5,-1,-90,25,-58,-57,-37,123,-37,48,11,19,31,-63,-41,30,76,0,127,22,86,-26,7,-35,-25,-17,-13,118,-27,-13,-40,45,21,-32,7,-127, -42,-4,7,-3,5,-6,-61,8,-19,-11,-40,-40,20,-9,-9,12,33,24,-9,-127,24,-10,4,-9,-7,10,-10,-55,-15,8,6,9,-20,87,-37,-22,-5,36,25,-61,5,8,-37,7,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014905192889273167, 0.01600557379424572, 0.0081268930807709694, 0.015909260138869286, 0.0067161284387111664, 0.0041996194049715996, 0.04503820464015007, 0.0082516111433506012, 0.0070472452789545059, 0.0077716070227324963, 0.0048496597446501255, 0.010355460457503796, 0.012518910691142082, 0.01113837119191885, 0.0049179522320628166, 0.14214810729026794, 0.0085794972255825996, 0.010614040307700634, 0.0037363849114626646, 0.0072716246359050274, 0.011656223796308041, 0.0080496659502387047, 0.0098342075943946838, 0.0083565013483166695, 0.0074251829646527767, 0.0069549954496324062, 0.027106376364827156, 0.003941782284528017, 0.0088058449327945709, 0.13964031636714935, 0.0037242956459522247, 0.0064957588911056519, 0.077658906579017639, 0.0068083861842751503, 0.0085217272862792015, 0.0070504751056432724, 0.01788419671356678, 0.0051508382894098759, 0.011847631074488163, 0.0010251480853185058, 0.0072472598403692245, 0.0026457423809915781, 0.0061002173461019993, 0.0077511952258646488, 0.006585368886590004, 0.0052210572175681591, 0.008095928467810154, 0.0066975289955735207, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 67609, 8642, 5961, 8672, 1450, 12762, -2057, -297, 1067, 2486, 3992, 334, 1919, -922, 887, -2356, 4326, 10467, -274, 33971, 4027, 3292, 8048, -632, 3552, 5150, 28621, 11438, -70, -2780, 130, 2657, -2418, 11204, 3612, 8569, 7591, 4415, 28058, 2190, -917, 3257, 1333, 3843, 5072, 2242, -1422, 3095, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.4139181631617248e-05, 0.00026390381390228868, 0.00025933785946108401, 0.00037073230487294495, 0.0015504425391554832, 0.00039489721530117095, 0.00093294220278039575, 0.00096146547002717853, 0.00053929031128063798, 0.0005479687824845314, 0.0005601588636636734, 0.00046824518358334899, 0.00050202279817312956, 0.00050318276043981314, 0.00050683948211371899, 0.0015473203966394067, 0.00037519383477047086, 0.00040535291191190481, 0.0018340208334848285, 7.9719247878529131e-05, 0.00030156280263327062, 0.0003032576059922576, 0.00049234769539907575, 0.00083504640497267246, 0.00034009804949164391, 0.00022317274124361575, 0.00014148218906484544, 0.00031845882767811418, 0.00093805172946304083, 0.00093594775535166264, 0.00049082841724157333, 0.00031384045723825693, 0.00081632181536406279, 0.00019591872114688158, 0.00029420555802062154, 0.00021633373398799449, 0.00048347908887080848, 0.00030291560688056052, 8.3855462435167283e-05, 0.0020690315868705511, 0.0006214183522388339, 0.00084561150288209319, 0.00035916233900934458, 0.00038892432348802686, 0.00023314938880503178, 0.00048647893709130585, 0.0008182577439583838, 0.00085603893967345357, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 66,20,-4,-11,127,30,-47,-17, 
  /* [1][0][][] */ -7,1,6,127,11,-4,7,11, 
  /* [2][0][][] */ 33,-127,-23,40,-10,-66,82,7, 
  /* [3][0][][] */ 127,-28,-4,24,-18,-37,27,6, 
  /* [4][0][][] */ 12,-47,127,-15,-8,-48,12,-91, 
  /* [5][0][][] */ 75,-2,2,1,127,17,-7,-6, 
  /* [6][0][][] */ -14,89,-16,127,22,49,-68,-54, 
  /* [7][0][][] */ -2,127,-2,3,-2,-15,12,-5, 
  /* [8][0][][] */ 127,62,-9,3,-57,-19,1,-42, 
  /* [9][0][][] */ -127,6,7,18,63,11,-8,8, 
  /* [10][0][][] */ -75,-11,18,127,43,27,-19,3, 
  /* [11][0][][] */ -127,3,11,-72,41,3,-25,-49, 
  /* [12][0][][] */ 127,34,8,13,-43,-20,-3,-51, 
  /* [13][0][][] */ -9,80,-127,-15,3,108,-70,70, 
  /* [14][0][][] */ -52,-25,-11,127,25,15,-5,-30, 
  /* [15][0][][] */ -5,127,1,-5,-1,-14,9,-51, 
  /* [16][0][][] */ -12,-127,-17,16,-6,-109,117,-32, 
  /* [17][0][][] */ 24,127,4,-11,11,73,-89,-17, 
  /* [18][0][][] */ -6,44,-127,-3,3,60,-27,57, 
  /* [19][0][][] */ -86,14,0,2,-127,5,28,35, 
  /* [20][0][][] */ -127,-15,-2,1,76,-32,36,-2, 
  /* [21][0][][] */ -58,-2,2,2,-127,-2,13,1, 
  /* [22][0][][] */ -127,-18,2,2,71,-18,30,52, 
  /* [23][0][][] */ -23,-26,-7,-5,-2,87,-127,-93, 
  /* [24][0][][] */ -9,41,-127,0,8,48,-18,76, 
  /* [25][0][][] */ 107,-27,-14,127,-88,-21,10,-54, 
  /* [26][0][][] */ 0,-22,-3,-1,-7,123,127,-27, 
  /* [27][0][][] */ 66,-5,0,11,127,23,30,-20, 
  /* [28][0][][] */ -7,124,-69,4,6,79,-31,127, 
  /* [29][0][][] */ -6,11,-6,-8,1,88,-127,-84, 
  /* [30][0][][] */ 4,-7,2,-127,-5,2,-4,-13, 
  /* [31][0][][] */ -73,1,5,5,-127,13,18,3, 
  /* [32][0][][] */ -4,47,20,-127,-10,33,-107,-127, 
  /* [33][0][][] */ -67,-8,-2,-1,-127,49,48,-3, 
  /* [34][0][][] */ -127,84,-1,25,43,-26,18,3, 
  /* [35][0][][] */ -14,127,-12,-12,8,-83,67,-31, 
  /* [36][0][][] */ 3,55,4,-24,-8,103,-127,-36, 
  /* [37][0][][] */ 27,-62,-14,25,14,-127,121,-16, 
  /* [38][0][][] */ 5,-127,11,4,22,52,-50,67, 
  /* [39][0][][] */ -1,-127,-15,-6,-6,-9,-45,-91, 
  /* [40][0][][] */ 111,48,-1,-15,-58,93,-127,-111, 
  /* [41][0][][] */ 5,-119,15,4,-2,78,-50,127, 
  /* [42][0][][] */ 54,-12,-5,-127,-56,3,4,-33, 
  /* [43][0][][] */ -91,-33,19,-127,70,16,-26,-12, 
  /* [44][0][][] */ -4,-35,-3,20,-37,99,127,-7, 
  /* [45][0][][] */ -127,-30,1,7,14,8,27,-24, 
  /* [46][0][][] */ 7,66,127,6,-1,17,16,29, 
  /* [47][0][][] */ 3,11,10,127,15,1,6,-5, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00017452776955906302, 0.00071810308145359159, 0.00070567877264693379, 0.0010087918490171432, 0.0042188763618469238, 0.0010745464824140072, 0.0025386093184351921, 0.0026162234134972095, 0.0014674514532089233, 0.0014910663012415171, 0.0015242364024743438, 0.0012741320533677936, 0.001366043696179986, 0.0013692000648006797, 0.0013791501987725496, 0.0042103808373212814, 0.0010209319880232215, 0.0011029972229152918, 0.004990515299141407, 0.00021692235895898193, 0.00082057621330022812, 0.00082518788985908031, 0.0013397169532254338, 0.0022722270805388689, 0.0009254336473532021, 0.00060727063100785017, 0.00038498418871313334, 0.00086655159248039126, 0.0025525128003209829, 0.0025467877276241779, 0.0013355828123167157, 0.00085398461669683456, 0.0022212760522961617, 0.00053311028750613332, 0.00080055656144395471, 0.00058866117615252733, 0.0013155847555026412, 0.0008242572657763958, 0.00022817733406554908, 0.0056299981661140919, 0.0016909283585846424, 0.0023009756114333868, 0.00097730907145887613, 0.0010582937393337488, 0.00063441786915063858, 0.0013237475650385022, 0.0022265438456088305, 0.0023293495178222656, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -4103, -25374, 28179, 22861, 4395, 2361, 39087, 11088, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013140597147867084, 0.00062965461984276772, 0.0014118225080892444, 0.0013393652625381947, 0.0011049500899389386, 0.0011518095852807164, 0.00075120193650946021, 0.00065659324172884226, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -13,-1,7,-95,11,26,8,8,3,5,-1,-8,101,0,0,7,0,-7,-5,-1,81,-3,-2,4,32,37,13,12,2,5,3,-127,12,6,0,1,-31,1,-17,32,8,-25,-10,4,0,-2,5,1, 
  /* [1][0][][] */ -35,-7,-2,-8,44,25,-30,79,17,9,-32,-25,10,0,19,35,0,40,16,-51,3,24,127,20,-28,-1,55,6,19,-2,15,-14,14,-9,-8,-23,3,-55,9,3,-8,-10,-81,-7,-34,9,-49,-100, 
  /* [2][0][][] */ -63,17,2,13,48,-10,31,25,-6,55,9,-4,0,0,8,56,0,16,-127,25,1,12,3,-13,-35,2,35,6,12,33,25,6,2,-5,-14,-12,12,7,4,-4,40,-11,-29,-2,26,-61,26,16, 
  /* [3][0][][] */ 1,-2,0,9,-5,29,-1,-2,65,19,-2,-5,24,0,-33,-9,0,2,-8,-2,-2,0,7,-20,-13,-5,-8,1,-10,-5,-1,-9,-49,47,-56,-5,7,-1,3,-127,-1,3,-3,-55,-5,-1,-2,3, 
  /* [4][0][][] */ -1,-4,82,36,4,-18,0,-6,6,-6,0,-6,-81,0,-9,4,0,10,7,2,65,5,0,-2,-17,31,-8,49,-4,1,-1,99,1,3,0,0,18,-11,-13,-20,-2,-127,6,3,2,-4,2,3, 
  /* [5][0][][] */ -9,43,5,-6,5,48,27,10,-18,28,9,57,24,0,-127,0,0,15,-37,23,-12,11,-15,41,-22,-2,25,-4,-11,24,25,-18,49,29,-38,-3,6,17,-47,17,28,-14,-9,26,23,58,23,25, 
  /* [6][0][][] */ -24,-57,3,7,38,-48,-23,10,28,-24,-14,87,-5,0,-127,41,0,-4,51,-19,-4,4,24,-33,30,0,-5,-6,47,-14,-12,-5,92,-32,27,0,-3,-11,-73,-20,-13,-16,-6,-26,-21,-85,-18,-26, 
  /* [7][0][][] */ -116,-24,-10,9,127,20,63,28,16,4,28,-32,-31,0,89,104,0,14,3,61,-12,1,-27,46,16,8,45,9,54,61,55,-10,-13,-14,-21,-27,6,24,27,36,73,1,-29,-14,59,2,62,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.055847536772489548, 0.026760321110486984, 0.060002453625202179, 0.056923024356365204, 0.04696037620306015, 0.048951905220746994, 0.031926080584526062, 0.027905212715268135, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 65317, 58709, 61548, 43154, -414, 13869, 2655, 23854, 29021, 17179, 29420, 6290, -46090, -127, 45335, 758, -204, 22655, 4371, 2107, -15638, 3487, 52502, 28469, -27203, 30516, 32704, 22895, -2470, 15984, -7534, -50942, 11820, 104417, 29032, 1931, 60529, -255, 127150, -22484, 14283, -28337, 4158, 90460, -2349, 77497, 1347, -22934, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.2502836196217686e-05, 6.6608808992896229e-05, 0.00017604233289603144, 0.0001231792411999777, 0.00016035033331718296, 0.00018159276805818081, 0.00015088680083863437, 6.8306660978123546e-05, 8.1600519479252398e-05, 3.6245259252609685e-05, 8.6062864284031093e-05, 2.9541079129558057e-05, 0.00017487301374785602, 0.005541567225009203, 5.6878296163631603e-05, 0.00022780448489356786, 0.0027484172023832798, 2.3469403458875604e-05, 8.2276776083745062e-05, 0.00017207436030730605, 0.00011615800758590922, 0.00017625739565119147, 0.00010851045226445422, 4.0874772821553051e-05, 0.00011388647544663399, 9.035108087118715e-05, 3.5325316275702789e-05, 4.8263329517794773e-05, 0.0002775291504804045, 6.3005027186591178e-05, 5.6538239732617512e-05, 0.00018902607553172857, 0.00020801469509024173, 8.9231780293630436e-06, 8.8557622802909464e-05, 0.00015216946485452354, 1.3618277989735361e-05, 0.00043508849921636283, 3.6234887375030667e-05, 8.0872145190369338e-05, 7.4279829277656972e-05, 0.00022335471294354647, 8.9835142716765404e-05, 9.4501365310861729e-06, 0.00017161852156277746, 7.4984498496633023e-05, 0.00019176521163899451, 0.00012470166257116944, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-6,-18,8,-39,-79,-68,-28,-49,9,64,34,-71,115,-43,-113,-85,37,-7,-1,-73,-111,-79,-35,-125,-62,-21,71,15,95,27,-127,-88,-8,54,18,47,-127,78,-77,-14,105,-109,-2,-35,-87,107, 75,11,-28,-28,58,-127,-127,-81,60,-76,-115,108,38,-82,-1,62,-52,-113,59,7,11,-111,-127,-70,-4,-127,-119,-41,-55,21,-56,54,28,-127,63,84,13,72,-92,127,-127,6,125,-127,2,-23,-127,94, -32,43,6,-6,-64,-108,-58,-17,87,-7,-127,38,8,-71,-100,-11,-127,-24,26,11,-15,-77,-35,-23,-11,-30,-57,-13,-10,18,-24,9,106,-87,69,32,14,35,-5,16,-79,3,7,-78,-17,5,-55,15, 
  /* [0][1][][] */ -86,-127,-44,-44,-9,55,99,-105,-27,-107,-20,111,89,-64,27,-97,-121,-94,90,-77,41,-88,-102,-127,42,-119,-78,-37,127,-60,127,84,-44,-84,-15,83,-35,-77,-107,90,41,59,105,-109,-91,-117,82,120, 127,-82,-127,-127,127,41,94,-127,101,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-119,127,-98,-127,-127,-120,-127,-71,127,28,-112,127,127,-68,-127,-96,90,60,127,127,-117,-112,-127,125,127, -53,31,-61,-86,-119,-22,31,-38,127,-19,-76,36,55,-70,-25,-44,-37,-30,53,-71,57,-83,-38,-23,48,-4,-45,-60,15,-89,-35,20,29,-98,116,23,-36,-63,1,-15,36,53,11,-74,-57,-37,65,35, 
  /* [0][2][][] */ -61,-107,-34,-34,1,34,-5,-34,-39,-58,-16,60,76,-127,-127,-64,-43,-18,64,74,51,-34,-13,-60,33,-55,-11,-58,76,28,77,63,107,-26,-38,-9,-95,35,-19,30,9,38,16,-56,96,-77,3,32, 87,-73,-89,-85,81,18,6,-47,47,-71,-32,56,82,-26,16,93,-24,-30,77,116,81,-54,-18,-57,94,-67,-18,-98,-50,39,-45,111,-18,-49,66,7,-127,50,-15,-2,10,33,17,-66,127,-100,-12,41, -29,30,-42,-37,-79,-19,22,-12,59,-4,-13,33,30,-43,111,-29,-93,-5,29,59,74,-29,-1,-2,43,3,-4,-63,-13,28,-20,39,-90,-42,64,2,-20,21,26,-39,6,36,-4,-15,63,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039313705638051033, 0.0028308744076639414, 0.0074817989952862263, 0.0052351178601384163, 0.0068148891441524029, 0.0077176927588880062, 0.0064126891084015369, 0.002903033047914505, 0.0034680219832807779, 0.0015404234873130918, 0.0036576716229319572, 0.0012554958229884505, 0.007432103157043457, 0.23551659286022186, 0.0024173276033252478, 0.0096816904842853546, 0.1168077290058136, 0.00099744962062686682, 0.0034967630635946989, 0.0073131602257490158, 0.0049367151223123074, 0.0074909389950335026, 0.0046116942539811134, 0.0017371778376400471, 0.0048401751555502415, 0.0038399207405745983, 0.0015013259835541248, 0.0020511914044618607, 0.011794988065958023, 0.0026777137536555529, 0.0024028751067817211, 0.0080336080864071846, 0.0088406242430210114, 0.00037923504714854062, 0.003763698972761631, 0.0064672022126615047, 0.0005787768168374896, 0.018491260707378387, 0.001539982738904655, 0.0034370659850537777, 0.0031568927224725485, 0.0094925751909613609, 0.0038179934490472078, 0.00040163079393096268, 0.0072937868535518646, 0.0031868410296738148, 0.0081500215455889702, 0.005299820564687252, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4298, 135, 10231, 6162, 6102, 6566, 8625, -34, 63, -344, 2360, 421, 11301, -77672360, 2824, 19486, -62701156, -107, -550, 8622, 3602, -15, 13, 423, 3403, -779, 65, 666, 4184, 1710, 2498, 13222, 3978, 289, 288, -1649, 311, 3583, -127, 11146, 2242, 13923, -237, -80, 12711, 176, 7528, 4391, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0004913551383651793, 0.00045814635814167559, 0.00030913413502275944, 0.00030855211662128568, 0.00032603219733573496, 0.00031490754918195307, 0.00044080795487388968, 0.0016065932577475905, 0.00045570259680971503, 0.0022616637870669365, 0.00063284108182415366, 0.0020162425935268402, 0.00019397618598304689, 2.0880486228946893e-09, 0.00093162228586152196, 0.00016972253797575831, 2.0880486228946893e-09, 0.0066791651770472527, 0.00039284795639105141, 0.00044618672109209001, 0.00029537803493440151, 0.0048418897204101086, 0.00034127812250517309, 0.0015283273532986641, 0.0011184161994606256, 0.0006834008963778615, 0.0023648769129067659, 0.0018875537207350135, 0.00027154618874192238, 0.0017165621975436807, 0.0011759038316085935, 0.00017733436834532768, 0.00019399661687202752, 0.011229922994971275, 0.00055864220485091209, 0.00072507152799516916, 0.0049848901107907295, 0.00035597491660155356, 0.0028433394618332386, 0.00031313649378716946, 0.0012717080535367131, 0.00016038517060223967, 0.00060226843925192952, 0.010358085855841637, 0.00039402235415764153, 0.00050955713959410787, 0.00037221590173430741, 0.00020218154531903565, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 19,-127,50,-44,27,-16,-52,22, 
  /* [1][0][][] */ 81,79,-22,-92,13,-10,-90,127, 
  /* [2][0][][] */ 33,6,-46,127,53,124,44,96, 
  /* [3][0][][] */ 78,78,-88,127,-90,-5,-13,12, 
  /* [4][0][][] */ -38,-89,68,13,4,30,-37,-127, 
  /* [5][0][][] */ 16,2,-38,46,7,-32,45,127, 
  /* [6][0][][] */ 59,-18,-127,-77,107,11,51,-28, 
  /* [7][0][][] */ 127,14,19,-24,27,-3,86,-55, 
  /* [8][0][][] */ 16,-89,12,104,6,20,-17,-127, 
  /* [9][0][][] */ 111,-127,13,3,-21,16,-117,94, 
  /* [10][0][][] */ -120,-31,-127,25,-1,7,-111,62, 
  /* [11][0][][] */ -21,-45,-10,-108,-127,-32,49,-17, 
  /* [12][0][][] */ 16,8,-43,68,-65,-25,52,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -9,-29,-5,12,42,127,43,40, 
  /* [15][0][][] */ 43,2,18,-127,69,44,-59,74, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,28,127,28,-30,-5,30,30, 
  /* [18][0][][] */ 97,-127,28,38,-10,24,-118,9, 
  /* [19][0][][] */ -127,-7,31,67,-61,-60,-105,60, 
  /* [20][0][][] */ 33,32,-45,115,-16,-127,-4,63, 
  /* [21][0][][] */ 57,17,127,4,-11,-9,63,7, 
  /* [22][0][][] */ -76,-19,-127,2,6,9,-97,6, 
  /* [23][0][][] */ -97,127,-18,-19,8,-9,123,-73, 
  /* [24][0][][] */ 7,-48,-52,82,-8,-55,93,127, 
  /* [25][0][][] */ 16,51,37,35,124,127,-75,-47, 
  /* [26][0][][] */ -80,-29,-127,0,5,18,-90,2, 
  /* [27][0][][] */ 0,-26,-31,8,-45,127,67,46, 
  /* [28][0][][] */ 6,-19,-16,39,27,127,46,56, 
  /* [29][0][][] */ 90,30,127,-1,-19,-13,85,-3, 
  /* [30][0][][] */ -84,127,-26,-31,9,-9,105,-47, 
  /* [31][0][][] */ -42,-87,-13,7,23,-66,127,105, 
  /* [32][0][][] */ 3,9,-48,126,-17,92,94,127, 
  /* [33][0][][] */ 4,62,-8,-103,10,-8,-9,127, 
  /* [34][0][][] */ -19,88,-3,-90,23,-4,14,127, 
  /* [35][0][][] */ 127,1,-22,-31,16,29,102,-32, 
  /* [36][0][][] */ -127,-5,21,73,-38,18,-115,92, 
  /* [37][0][][] */ -7,-24,-8,25,29,127,47,51, 
  /* [38][0][][] */ 12,20,4,80,127,-9,-23,31, 
  /* [39][0][][] */ 9,25,37,-118,25,5,-37,127, 
  /* [40][0][][] */ 102,30,127,6,-7,-7,92,-3, 
  /* [41][0][][] */ 6,-27,-34,89,61,127,71,113, 
  /* [42][0][][] */ -76,0,127,25,-39,18,-32,64, 
  /* [43][0][][] */ -11,-49,11,97,-17,5,12,-127, 
  /* [44][0][][] */ 32,-11,-78,-127,72,-29,-17,-109, 
  /* [45][0][][] */ -92,127,-2,-48,9,0,74,-60, 
  /* [46][0][][] */ -127,-25,32,23,-30,32,-86,38, 
  /* [47][0][][] */ 106,16,127,-3,23,-21,123,-19, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00092644832329824567, 0.00086383329471573234, 0.00058287126012146473, 0.00058177387109026313, 0.00061473250389099121, 0.00059375702403485775, 0.00083114177687093616, 0.0030292256269603968, 0.00085922557627782226, 0.0042643588967621326, 0.0011932195629924536, 0.0038016177713871002, 0.00036574137629941106, 3.937008052901092e-09, 0.0017565704183652997, 0.00032001122599467635, 3.937008052901092e-09, 0.012593541294336319, 0.00074071338167414069, 0.00084128341404721141, 0.00055693421745672822, 0.009129364974796772, 0.00064347864827141166, 0.002881655702367425, 0.0021087697241455317, 0.0012885498581454158, 0.0044589666649699211, 0.0035589756444096565, 0.00051199935842305422, 0.0032365717925131321, 0.0022171624004840851, 0.00033436328521929681, 0.00036577990977093577, 0.021173978224396706, 0.0010533177992329001, 0.0013671197229996324, 0.0093989921733736992, 0.00067118939477950335, 0.0053611062467098236, 0.00059041770873591304, 0.0023978007957339287, 0.00030240564956329763, 0.0011355748865753412, 0.019530132412910461, 0.00074292771751061082, 0.00096076808404177427, 0.00070181168848648667, 0.0003812125651165843, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -449, -42172, -7306, -14797, -31594, -2482, -25316, -27767, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0023033928591758013, 0.0027398611418902874, 0.0025663033593446016, 0.0012609338155016303, 0.0011836605845019221, 0.0022583461832255125, 0.0016284406883642077, 0.0011390886502340436, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-24,3,2,125,0,-2,1,-1,-127,-94,-3,0,120,-2,0, 
  /* [1][0][][] */ 0,-26,-1,84,72,12,23,5,0,-6,127,-45,0,27,-13,0, 
  /* [2][0][][] */ 0,-2,-2,-13,-57,4,9,1,0,4,-17,0,0,127,-7,0, 
  /* [3][0][][] */ 0,-9,-18,-127,85,24,75,18,-1,63,-2,38,0,-3,17,0, 
  /* [4][0][][] */ 0,46,-25,35,-54,31,127,10,0,-59,14,-9,0,-6,14,0, 
  /* [5][0][][] */ 0,-16,-12,-1,-22,-23,-12,17,-1,11,-5,-46,0,-3,127,0, 
  /* [6][0][][] */ 0,20,-3,1,51,-20,-23,-8,0,-108,116,62,0,127,62,0, 
  /* [7][0][][] */ 0,15,-14,127,8,-5,20,8,1,68,-52,73,0,-8,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.097894199192523956, 0.11644409596920013, 0.1090678870677948, 0.053589686751365662, 0.050305571407079697, 0.095979712903499603, 0.069208726286888123, 0.04841126874089241, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 7190, 64880, 8788, 9024, 3698, 12904, 1054, -19667, 4409, 27479, 15238, -445, 24876, 10680, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00036215450381860137, 6.1900471337139606e-05, 0.00040227535646408796, 0.00018595076107885689, 0.00089501251932233572, 0.00041007960680872202, 0.0036950444336980581, 1.6815309209050611e-05, 0.00037755878292955458, 0.00023265724303200841, 0.00082791520981118083, 0.00072724185883998871, 0.00028209082665853202, 0.00019508638069964945, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,91,-2,-72,67,-95,77,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,15,-29,14,-28,1,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,33,-127,7,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-40,52,-76,0,0,5,40,2,-27,23, 23,-4,31,-2,-27,40,-35,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.01539156585931778, 0.0026307699736207724, 0.017096702009439468, 0.007902907207608223, 0.03803803026676178, 0.017428383231163025, 0.15703938901424408, 0.00071465061046183109, 0.016046248376369476, 0.0098879327997565269, 0.035186395049095154, 0.030907778069376945, 0.011988859623670578, 0.0082911709323525429, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 4282, -67751, 47320, 322648, -2547, 72965, -10253, -93445, 55457, 20192, 570397, -1073741824, 35274, 23779, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00019486602104734629, 0.00020476084318943322, 3.7860481825191528e-05, 1.1377056580386125e-05, 0.00020373897859826684, 5.0866994570242241e-05, 0.00026796228485181928, 3.8813172977825161e-06, 4.4685846660286188e-05, 0.00014852147432975471, 9.9126555141992867e-06, 1.1533876076441629e-09, 0.0001072566446964629, 0.00013350909284781665, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 54,1,35, 0,-20,19, -127,-122,-64, 
  /* [1][1][][] */ 6,-2,2, -20,5,-4, 1,-33,5, 
  /* [1][2][][] */ -3,18,-2, -5,6,-4, 38,-22,10, 
  /* [2][0][][] */ 25,-9,-8, 74,114,0, 36,-40,6, 
  /* [2][1][][] */ 6,11,-2, 71,127,-28, 17,-6,-7, 
  /* [2][2][][] */ 49,-66,20, 76,-42,-20, 32,-56,14, 
  /* [3][0][][] */ 5,34,4, 31,95,21, 0,8,-4, 
  /* [3][1][][] */ 19,36,5, 65,127,26, -13,-16,4, 
  /* [3][2][][] */ 5,3,3, 25,26,6, -2,-4,2, 
  /* [4][0][][] */ 40,79,-10, 15,87,-12, -20,10,-5, 
  /* [4][1][][] */ 45,94,46, 33,127,28, 25,51,-19, 
  /* [4][2][][] */ 54,73,28, 43,114,8, -27,19,13, 
  /* [5][0][][] */ 7,0,-120, -4,-1,-104, -5,30,-26, 
  /* [5][1][][] */ 4,-45,-127, -2,-47,-115, 1,15,-22, 
  /* [5][2][][] */ -3,6,-19, 1,-5,-14, -1,13,-10, 
  /* [6][0][][] */ 22,-64,31, 44,-87,36, 7,-22,6, 
  /* [6][1][][] */ 34,-96,58, 60,-127,68, 5,-31,13, 
  /* [6][2][][] */ 18,-35,11, 12,-45,23, -15,5,-3, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ 119,122,110, 118,121,108, 124,127,115, 
  /* [8][1][][] */ 119,120,109, 116,118,106, 123,126,113, 
  /* [8][2][][] */ 119,120,109, 117,120,108, 121,123,111, 
  /* [9][0][][] */ -20,-4,6, -12,-6,-3, 6,6,-12, 
  /* [9][1][][] */ 96,114,-11, 74,127,15, -4,23,26, 
  /* [9][2][][] */ -26,-22,16, 3,-28,0, 12,6,-18, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-103,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -11,-25,1, 10,-42,6, 9,-101,-53, 
  /* [11][1][][] */ -43,-41,-16, -33,-62,-34, -14,-59,-54, 
  /* [11][2][][] */ -7,-39,-78, 117,127,64, -39,14,-47, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -9,-17,-5, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 8,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 1,4,-4, 
  /* [14][0][][] */ 45,-6,-39, 78,-27,-53, 30,-10,-23, 
  /* [14][1][][] */ 89,-17,-76, 127,-41,-91, 57,-20,-40, 
  /* [14][2][][] */ 54,-10,-48, 72,-23,-56, 23,-9,-22, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.049690831452608109, 0.052214011549949646, 0.009654422290623188, 0.0029011492151767015, 0.051953434944152832, 0.012971082702279091, 0.068330377340316772, 0.00098973582498729229, 0.011394890025258064, 0.037872973829507828, 0.0025277270469814539, 2.9411381774480105e-07, 0.027350442484021187, 0.034044817090034485, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.53036433458328247, } };
const TfArray<1, int> quant46_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.36750128865242004, } };
const TfArray<1, int> quant50_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.51123923063278198, } };
const TfArray<1, int> quant53_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.4939020574092865, } };
const TfArray<1, int> quant54_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.30395174026489258, } };
const TfArray<1, int> quant58_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.17204910516738892, } };
const TfArray<1, int> quant61_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27460730075836182, } };
const TfArray<1, int> quant62_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.18473696708679199, } };
const TfArray<1, int> quant65_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.3292425274848938, } };
const TfArray<1, int> quant66_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.041690926998853683, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1109381765127182, } };
const TfArray<1, int> quant69_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 688, (TfLiteIntArray*)&tensor_dimension69, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.11.2023 09:54:47

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0022452904377132654, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 20474, -32426, -32325, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00025599286891520023, 0.00018054019892588258, 0.00017767834651749581, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 49,84,125,-61,-55,17,18,21,-9,33,23,18,-23,-60,48,12,-32,51,51,84,-18,-3,30,-48,-127,67,-35,-3,56,35,-13,37, 
  /* [1][0][][] */ 67,-43,-70,18,-12,126,-40,-8,123,-45,-4,-79,-65,108,36,-53,93,-44,-10,-95,-127,16,109,73,12,19,1,-14,-69,-53,-19,-27, 
  /* [2][0][][] */ -36,75,-81,83,83,-47,-47,117,93,44,127,-34,-100,-90,98,122,-86,-52,8,-116,73,116,-52,-103,102,-63,-18,-123,24,-80,90,-23, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0045754946768283844, 0.0032268897630274296, 0.0031757382676005363, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 490, 292, 148, -156, -55, 6, 589, -14, -97, -448, -29, 304, -397, -203, 119, 19, -330, -401, -253, -374, 357, -272, 106, 55, 287, -160, -461, -233, -200, 109, 8, -166, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.2603300244081765e-05, 4.5452765334630385e-05, 4.1248240449931473e-05, 4.1999108361778781e-05, 4.0718783566262573e-05, 4.5342527300817892e-05, 4.780670496984385e-05, 4.295967664802447e-05, 4.1573195630917326e-05, 4.3461161112645641e-05, 4.1236988181481138e-05, 5.4104923037812114e-05, 4.2901425331365317e-05, 4.6209384890971705e-05, 4.3170923163415864e-05, 4.5437209337251261e-05, 4.0665589040145278e-05, 4.2468105675652623e-05, 4.2812760511878878e-05, 4.1145671275444329e-05, 4.5223518100101501e-05, 4.1361017792951316e-05, 3.9372236642520875e-05, 4.4784123019780964e-05, 4.6652163291582838e-05, 4.77157263958361e-05, 4.2847746954066679e-05, 4.142570833209902e-05, 4.2272728023817763e-05, 4.1445498936809599e-05, 4.3505755456862971e-05, 4.3443222239147872e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -28,-37,113,27,127,-46,-79,-97,78,-100,-97,4,33,13,-27,69,-44,-23,-58,-62,-65,-93,14,120,-92,28,88,-44,123,-30,-11,-67,93,-54,-75,82,-98,-70,-81,41,87,-73,-84,111,66,-97,121,-2,26,-47,-66,106,-75,-46,-95,115,7,82,112,-97,-83,107,-39,56,-40,32,82,108,68,114,86,-112,110,-86,21,96,-118,22,-49,40,68,18,98,9,-47,-37,-71,120,37,124,8,-107,16,78,38,40, 
  /* [1][0][][] */ -65,28,-57,4,-38,78,42,12,68,-88,-96,104,70,-20,31,49,108,-37,31,119,-42,4,40,33,27,7,-35,108,14,10,94,-61,41,101,-7,23,55,60,-16,-57,-58,9,-13,-86,-30,32,-31,-47,-27,-79,114,54,21,80,-66,-41,22,87,67,79,-51,105,-67,-77,-55,28,82,43,92,31,19,15,-109,84,-45,48,86,-37,-35,58,-77,84,-46,-127,28,116,-71,-71,79,79,79,21,82,90,20,0, 
  /* [2][0][][] */ 38,36,-49,97,-30,-65,94,102,-109,87,-38,122,75,-16,89,-115,-52,-32,44,46,-108,-11,122,27,-23,73,106,31,-61,73,79,88,-82,-26,-98,-119,-76,92,108,-31,-127,-84,14,-1,-92,116,-36,-76,99,35,83,-100,-23,58,21,10,-71,85,-67,15,-27,92,-46,62,87,43,57,85,-109,65,17,-83,36,-87,36,41,-59,-17,7,4,35,-94,-19,-54,-1,-104,-22,-43,89,115,-22,-5,-52,-97,-57,-79, 
  /* [3][0][][] */ 69,3,33,-34,-81,59,-120,36,47,32,63,-1,104,100,73,-4,107,108,-68,33,127,-95,-67,-122,-40,-102,-80,102,44,-80,93,14,-50,-34,-22,-7,-96,-23,42,46,-23,-90,-101,1,78,33,-44,-93,74,-80,55,3,90,31,100,-91,-125,-113,-111,-71,-91,25,-33,95,65,-37,-69,-36,-45,-70,1,110,29,-110,63,-57,43,99,94,-62,-90,-122,49,99,30,48,-44,-119,-79,48,-13,-104,94,-81,-86,50, 
  /* [4][0][][] */ 52,107,-9,49,-39,-9,34,7,54,105,-9,54,57,-34,-11,-90,-24,3,-91,39,127,-98,90,28,-58,8,73,-71,-53,66,-68,-49,81,125,22,-103,-54,-1,-126,53,-47,-59,-78,-96,39,113,42,54,28,-37,1,-73,-105,53,-78,36,32,-87,39,4,23,-92,-27,-48,-41,55,-1,-32,29,-100,-104,-76,-49,25,117,47,80,-24,-8,-67,8,-42,-87,-21,0,79,93,4,-112,-75,33,58,38,122,-97,-5, 
  /* [5][0][][] */ 98,-82,69,81,38,-127,26,53,107,-109,0,-63,3,86,31,39,60,61,-66,93,32,48,15,-28,-97,-41,-11,-95,46,16,22,-89,-24,0,-64,24,-107,-30,54,24,-79,-46,40,91,-26,30,40,-47,-96,104,2,43,24,5,31,-18,76,54,-61,-40,20,-52,50,-59,-40,103,-28,32,75,6,90,-77,-40,81,-46,-69,-6,-50,13,79,109,36,22,115,-72,75,1,46,64,-89,121,89,-30,33,80,-69, 
  /* [6][0][][] */ 14,-17,124,68,-90,-55,9,75,-18,-50,15,-68,55,63,117,-95,61,6,8,83,-67,-91,123,68,-52,-75,0,-28,-9,-109,54,-77,-84,-101,-40,-83,25,40,-94,76,83,56,26,13,-97,100,-81,-28,-63,14,-31,-57,74,-50,92,-24,7,-18,-56,127,-88,38,59,-74,-37,62,107,-44,64,-11,-74,-5,72,-67,-51,-12,-68,-62,-40,-22,33,0,38,-29,-54,-65,-24,-92,80,94,94,2,-43,-60,67,-43, 
  /* [7][0][][] */ 111,67,-43,-44,-80,120,-20,-4,112,11,-98,15,69,-87,48,57,52,20,-13,127,60,34,-7,86,-97,108,44,50,-79,117,-19,40,27,27,68,103,-110,90,-10,-27,98,-74,85,67,54,-2,106,-114,54,-51,-101,-66,-32,88,24,39,110,-89,11,-68,14,-18,84,-102,-65,-57,66,26,-113,24,60,91,86,27,64,52,-57,52,-101,38,92,-36,-11,-76,87,36,-113,95,87,8,77,70,-53,-32,0,-56, 
  /* [8][0][][] */ 14,35,-53,-92,60,30,-78,-28,10,42,45,99,16,-48,-89,-77,-73,102,-68,34,39,-29,80,111,-127,111,52,68,-70,34,-90,127,106,-34,51,2,115,7,-17,75,87,110,-113,-127,-6,-25,-18,109,24,-82,-58,5,-82,-12,-26,-101,36,119,-94,98,122,39,54,127,-35,-44,-27,109,-87,60,23,2,80,78,5,16,-45,104,85,74,42,81,-106,-80,29,44,79,-35,44,-37,-83,113,-84,-90,-39,77, 
  /* [9][0][][] */ -3,-1,103,35,86,-101,-59,-123,30,43,-19,45,-30,-85,-110,-36,-1,-10,-102,-69,-5,88,-117,-114,101,-17,-21,18,-21,-62,-96,95,54,-9,18,-26,-84,8,-38,-55,38,-77,44,-99,71,12,-112,43,43,-19,-74,-51,68,-81,-73,96,82,-67,-20,-14,-90,97,85,-84,-77,-5,93,36,-49,91,102,-99,-1,73,-107,-104,-85,-127,-49,94,24,20,97,21,-53,-101,26,-25,89,24,-41,105,103,-7,54,-45, 
  /* [10][0][][] */ -70,85,89,-69,-24,113,111,25,37,39,23,-71,117,86,-35,-3,-39,87,-115,-49,-14,28,57,-74,8,62,-120,-127,-54,94,-98,-82,91,106,126,79,-48,10,-35,37,-35,123,-117,-42,-97,-61,0,-65,-1,6,48,12,55,24,-59,-26,-115,-16,38,-58,3,70,119,54,126,-83,-104,-20,16,-19,-105,-65,90,70,-83,104,-10,64,68,16,81,0,66,105,-107,74,102,-27,43,10,-18,-70,-54,-41,-45,-59, 
  /* [11][0][][] */ 96,16,-6,89,90,52,45,42,91,90,-56,95,-2,-32,28,-52,-47,-83,66,48,29,63,27,-83,-88,-85,-17,58,81,12,30,-11,-65,-42,39,39,-45,65,-9,-50,-17,88,-63,21,-28,-40,-67,-65,71,99,127,63,-63,-52,22,25,-49,-52,4,-73,-4,69,78,-4,61,67,-41,20,75,38,-61,-49,50,92,-61,47,-52,35,-34,75,-89,14,-40,-35,39,-59,9,-28,-75,4,-2,-44,-61,-35,-16,-41, 
  /* [12][0][][] */ 7,57,-64,-12,87,8,-44,28,-85,50,-24,6,-52,2,39,-86,-108,-43,-52,-89,17,-20,7,89,-67,-61,90,-107,84,5,-46,110,-93,-80,-54,5,-12,-84,-25,33,106,30,-121,-48,-31,-92,-49,109,-53,-127,-86,98,32,-8,-90,75,-17,-72,47,58,49,101,-13,43,104,25,-55,107,50,90,40,63,75,107,-24,-14,-44,26,-126,-104,-67,93,37,6,-46,23,43,106,-103,-118,86,37,91,-23,20,64, 
  /* [13][0][][] */ 113,-46,88,91,86,99,71,52,77,-101,11,-27,71,57,52,-36,-111,-59,-68,23,61,-30,106,-54,-56,61,9,8,-83,-91,85,40,52,90,-29,48,-78,-26,28,69,-55,70,-49,5,-34,35,8,-32,41,99,-44,-90,-107,18,82,-79,-47,38,-30,-68,-31,120,-58,23,-62,-47,-93,88,-23,-6,79,-12,-79,48,-81,-40,-110,55,76,-52,60,-99,86,42,-69,-100,96,127,-14,-43,-56,57,99,-38,83,5, 
  /* [14][0][][] */ -68,-97,99,58,45,-25,-13,-120,-82,-38,69,74,-37,-110,-85,-97,-44,-57,5,39,-45,36,2,65,-113,-51,-25,39,-106,-125,-67,42,105,-24,-36,11,102,119,29,-105,-3,-109,41,88,74,-110,67,-86,116,42,46,55,84,-23,-4,23,-80,-4,51,65,-45,-78,-27,85,-122,-10,77,-104,-82,-84,-98,79,-1,92,45,-70,49,-105,58,35,55,-48,-118,-31,-109,-88,-127,103,114,8,89,-58,50,118,-23,70, 
  /* [15][0][][] */ 8,-25,-29,68,82,-73,60,-92,47,9,-67,13,116,8,-80,-127,87,15,-97,37,54,19,71,106,57,60,41,87,22,66,63,-89,2,13,-54,-1,-64,112,103,-64,20,110,-44,-20,28,-73,-38,-76,-6,-70,9,32,-93,-88,-37,4,65,49,-35,96,-32,-74,6,107,-23,87,-66,3,-60,8,60,-60,19,-13,65,-107,9,55,100,63,-78,61,-92,-68,-115,-28,-93,32,88,70,-125,-32,59,116,-99,112, 
  /* [16][0][][] */ -57,8,103,-59,49,111,-61,39,65,42,-112,76,-26,-62,-67,-52,110,85,80,62,113,78,-46,45,-28,86,-68,60,-107,8,52,15,-93,72,56,72,-37,54,-42,-68,25,-51,77,88,71,118,117,-17,-51,-112,-4,124,-56,109,61,42,22,106,62,15,115,127,43,75,48,29,-45,107,55,112,-43,-20,34,110,52,93,-23,95,-114,-8,27,-96,57,38,21,97,120,28,77,17,1,124,66,-30,-65,37, 
  /* [17][0][][] */ 28,-119,24,76,-47,-121,-75,-102,34,-96,78,43,90,53,-124,40,25,46,108,109,-104,-21,6,-60,19,60,-88,18,101,-60,-41,70,-40,-31,25,-1,-57,94,-92,-39,-105,-50,-23,-17,0,4,79,-119,78,104,-23,19,-29,72,94,-83,-127,78,-91,-123,24,-102,67,91,-93,-83,35,-113,-119,-11,102,21,7,-127,-75,59,111,-57,34,-67,3,-26,-86,-103,-123,65,73,-42,12,70,-106,-126,-21,89,6,7, 
  /* [18][0][][] */ -91,93,102,-79,-1,-107,-107,11,-12,78,-112,-39,-43,27,57,-64,22,-39,52,-27,95,-47,17,-78,33,-100,-25,102,25,35,-4,37,32,-41,-112,-113,-35,29,-29,57,-47,-5,-43,-9,-121,11,23,-3,6,-33,59,35,-111,-24,7,81,-55,30,-21,-121,69,109,12,23,-65,-127,-33,82,65,-68,-71,105,-107,-48,-93,-112,51,51,-8,-84,-65,-26,-34,-74,96,-35,64,61,-114,-83,-69,106,79,-49,45,-15, 
  /* [19][0][][] */ 15,26,73,35,61,-91,95,91,91,-67,25,-17,-105,31,-62,56,72,-113,107,56,-27,78,-62,9,74,-86,25,-76,-98,-126,-72,44,78,-89,30,-4,5,-76,-62,-110,42,-124,-90,7,-93,26,75,-101,-33,36,-45,43,-41,12,3,-14,22,96,-3,-33,54,-59,100,60,-73,-7,-32,-7,-13,52,72,-56,-70,-127,-60,-88,-27,-121,10,105,55,-122,-34,75,-94,-12,3,-9,89,26,-10,62,-37,114,68,-54, 
  /* [20][0][][] */ -19,69,78,87,-78,106,25,55,5,20,-83,13,11,100,57,-76,-30,-28,-54,-14,33,-33,-61,-52,69,-87,-93,67,46,32,-39,103,89,55,-2,54,51,-22,-26,-103,-75,-23,-70,-85,-23,-65,-73,110,57,-90,-78,39,61,124,71,14,106,60,111,90,121,-37,-55,-18,-10,-73,-37,8,-73,-58,-56,94,-62,-85,57,23,127,88,106,102,77,19,91,-43,55,125,-18,55,33,89,19,56,41,23,-21,17, 
  /* [21][0][][] */ 89,76,55,-113,83,-78,68,5,-4,-66,-83,40,23,37,-62,-105,-115,-30,12,2,116,-60,66,-97,37,-81,-36,61,3,21,-10,-25,12,19,-104,-118,101,100,-127,-39,-8,6,23,-24,-104,-89,-81,87,-23,-67,5,88,21,71,-101,36,-61,58,-55,113,63,-100,13,-6,87,25,-48,-74,-115,-5,53,84,31,-26,75,56,-114,-40,57,105,10,100,44,-78,20,-104,63,-87,-105,77,98,-123,-45,-53,71,-27, 
  /* [22][0][][] */ 35,-53,-69,-114,107,-66,119,66,-106,97,-79,-118,115,-127,-127,-89,48,93,-120,-71,96,-79,40,36,101,7,-120,123,-55,-82,-66,-121,54,64,15,17,14,-18,-57,-126,2,-9,10,109,62,-119,100,-24,-72,-82,-8,-11,-69,-108,-48,33,-38,-35,-33,-30,110,-72,-75,-114,-79,26,-123,-63,118,125,-31,-4,-63,4,61,-89,55,-52,73,99,121,-108,-99,-118,91,94,114,-30,-65,36,-62,68,13,15,-30,121, 
  /* [23][0][][] */ 69,-74,5,56,87,-127,1,-108,63,-79,86,72,-9,-109,12,-30,85,-26,-99,90,89,-81,99,-41,-11,9,84,14,67,32,79,-26,-29,41,5,48,97,-1,-107,10,-94,3,12,-104,-57,-73,120,25,81,-106,-115,-43,69,-63,-63,89,-99,-6,84,43,-119,-80,-40,3,8,50,-117,-98,71,-8,97,-82,-2,-18,-55,-89,32,-25,93,119,-38,-59,8,-79,99,5,118,-3,-90,47,110,8,90,-49,-16,91, 
  /* [24][0][][] */ -80,-42,-104,-58,-125,-69,-52,-105,67,106,84,33,127,66,-30,-119,-65,62,14,-5,115,-71,-46,-26,23,8,82,52,96,97,3,-42,22,24,59,33,-49,-66,42,-2,-53,-75,95,-5,30,-37,53,60,-55,-41,12,27,65,69,80,-41,8,96,23,0,108,-33,69,120,-82,98,-40,-66,-83,53,-47,-5,-22,57,107,93,83,-65,-84,-75,-57,-82,-32,-100,10,74,-8,-71,46,-87,16,-52,0,53,-71,41, 
  /* [25][0][][] */ -77,-56,-64,-7,97,-33,-90,50,41,-94,-45,17,66,-15,-104,-14,-67,53,49,-88,52,75,-15,-48,21,-64,-90,42,72,-61,31,127,84,-108,39,61,90,-67,-10,-22,-87,85,-93,-5,84,28,40,30,-98,83,-71,16,49,-28,-58,-2,-11,39,-101,72,96,45,47,36,-3,78,-16,-12,-77,2,-23,-104,19,-105,54,24,70,61,16,22,53,29,-56,79,-65,-49,-98,-75,-22,-46,105,60,-110,23,-26,-60, 
  /* [26][0][][] */ 62,-117,-37,-29,-113,6,-19,-22,-113,-127,102,79,-83,-50,2,-20,107,28,-94,-66,14,61,92,6,28,66,8,35,5,9,-95,-2,-20,-62,-102,-98,-77,84,-57,105,-101,99,50,25,-76,72,-40,94,-23,26,-6,101,-6,-46,-9,-108,103,73,47,17,3,-109,74,-16,118,-24,-68,55,-78,74,79,95,77,-94,-80,-4,43,-117,-104,16,-32,73,82,-69,75,-2,-50,14,-85,109,-6,22,-56,120,50,87, 
  /* [27][0][][] */ 13,4,-69,-109,-57,-73,-73,-20,43,93,36,-111,-36,56,83,-34,65,-20,82,-91,-101,9,-34,-26,-106,44,-115,-6,65,26,-38,-12,58,69,-99,-99,-101,-68,-119,89,-100,13,25,12,99,20,69,104,89,69,55,-79,-95,-89,-11,-39,109,-33,-121,-80,-62,-67,-36,52,39,-49,-118,105,62,7,-127,2,54,-49,-11,-97,43,-73,88,100,86,-35,116,-61,-79,-89,-39,31,-54,-6,-42,-56,58,12,88,54, 
  /* [28][0][][] */ 103,-8,82,40,-105,-62,-104,-76,-44,-111,56,69,-60,-88,-1,98,90,108,-75,78,-34,18,-114,-82,-119,77,-91,-70,-77,-75,-6,-22,-108,12,76,69,13,-113,-38,26,102,39,-99,51,-114,-14,13,45,20,-56,-53,-32,-55,20,52,35,68,-18,77,47,-5,-44,-91,-1,67,69,-27,76,-78,21,-94,-48,67,33,2,-108,-127,-70,-93,41,-82,-95,113,-37,57,-110,62,-90,-111,-77,-45,-67,-39,49,-104,-76, 
  /* [29][0][][] */ 52,57,70,-51,-87,9,-116,14,103,-16,-89,-94,100,-102,-45,-39,-95,104,38,-77,-82,-27,64,13,-23,-2,-45,-14,-99,-13,106,-6,42,2,-85,-59,0,104,-10,98,49,110,-41,92,-2,108,-59,-20,15,-14,52,-101,99,-103,113,42,-86,53,-53,127,-125,111,-106,-65,-69,-63,63,88,100,-88,50,-77,115,76,60,38,119,-54,-27,39,-6,-84,-16,-83,68,121,48,79,-41,101,75,80,-104,6,-6,55, 
  /* [30][0][][] */ 28,-63,-60,33,-97,23,-67,-34,121,-14,-2,-57,-99,-1,58,18,-4,36,89,-99,42,-101,-111,14,-115,23,-83,94,-31,-107,-90,7,-81,-68,-127,-52,15,-16,-19,13,88,-78,-10,98,103,-51,102,56,-69,72,16,-116,90,-50,-9,102,-101,-55,-81,-66,-114,-8,-72,-36,-113,-85,-109,91,-59,102,46,-47,-88,105,40,-83,-58,-70,-80,-56,30,23,-114,-10,-104,29,-89,107,-36,-114,63,56,-47,-2,9,-65, 
  /* [31][0][][] */ 83,-92,32,107,66,54,-59,-98,-29,-25,-76,-92,119,-117,-48,124,-63,-89,62,43,58,38,-31,102,70,-114,34,32,-77,-81,46,108,17,24,-90,-7,93,-31,-68,-104,61,-64,-10,30,6,-54,-36,29,70,18,91,-33,-115,-52,-85,20,-120,77,5,127,-43,-2,81,-77,70,111,-42,-70,92,-99,-127,17,-108,-41,-4,3,-64,-46,49,89,-76,-35,52,71,55,96,-87,18,13,-57,-81,-58,18,101,-8,-15, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018106402130797505, 0.0019317424157634377, 0.001753050135448575, 0.0017849620198830962, 0.0017305483343079686, 0.0019270573975518346, 0.0020317849703133106, 0.0018257861956954002, 0.0017668608343228698, 0.0018470992799848318, 0.0017525720177218318, 0.0022994591854512691, 0.0018233105074614286, 0.0019638987723737955, 0.0018347641453146935, 0.0019310814095661044, 0.0017282875487580895, 0.0018048944184556603, 0.0018195422599092126, 0.0017486909637227654, 0.0019219995010644197, 0.0017578431870788336, 0.0016733199590817094, 0.0019033252028748393, 0.0019827168434858322, 0.0020279183518141508, 0.001821029232814908, 0.0017605925677344203, 0.0017965908627957106, 0.0017614336684346199, 0.0018489945214241743, 0.0018463368760421872, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1952, 3286, 7878, 2308, -3143, -3397, 21103, 2293, 2460, -1500, 7025, -308, -9902, 2204, 14702, 6922, 15502, 5310, -3947, -4887, 3557, 32606, 19837, 17240, 1058, 912, 3739, 2521, 2062, -4162, 5847, -2425, -292, 5069, 34, 900, 10441, 4506, -1716, 4088, 8007, 6184, 5341, 11313, 4025, 3811, 1655, 7645, 5223, -5805, -4991, 283, -199, -1315, 2088, -41, 232, -629, -4947, 7886, -923, 1304, -1192, -1476, -3397, 5416, 17939, 1559, -2718, 729, 1538, 2381, 1909, -1068, 622, 10473, -384, 15184, 15763, -900, 9276, 1558, -513, 1037, 15392, 8246, 3512, 1212, 5343, 3933, -310, -6417, 778, -1864, -1656, -2127, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00032439746428281069, 0.00047491100849583745, 0.00030389236053451896, 0.00038439684431068599, 0.00033418100792914629, 0.00043148268014192581, 0.00015742819232400507, 0.00031454261625185609, 0.00024506499175913632, 0.00043939272291027009, 0.00027899674023501575, 0.0002352174196857959, 0.00025569053832441568, 0.0012660525972023606, 0.00021101157472003251, 0.0001718689309200272, 0.00012078580039087683, 0.00027227806276641786, 0.00049165793461725116, 0.00034292993950657547, 0.00017254857812076807, 8.2060592831112444e-05, 0.00015469989739358425, 9.7439471574034542e-05, 0.00018197100143879652, 0.00054382282542064786, 0.00079217733582481742, 0.00043071873369626701, 0.00024045922327786684, 0.00046710629248991609, 0.000252552330493927, 0.00031951459823176265, 0.000188647914910689, 0.00022905420337338001, 0.00035005016252398491, 0.00027263336232863367, 0.00018258951604366302, 0.00024024545564316213, 0.00034242859692312777, 0.00042937655234709382, 0.00015737148351036012, 0.00041785239591263235, 0.00028793886303901672, 0.00020571167988236994, 0.00047461359645240009, 0.00026589634944684803, 0.00031075987499207258, 0.00027599555323831737, 0.00026119456742890179, 0.00022853956033941358, 0.00031807462801225483, 0.00022231694310903549, 0.00050655769882723689, 0.00023049430456012487, 0.00037656165659427643, 0.00035669328644871712, 0.00043075278517790139, 0.00042342065717093647, 0.00031178540666587651, 0.00023341288033407182, 0.00081334298010915518, 0.00050981604726985097, 0.00022747745970264077, 0.00052067992510274053, 0.00055468699429184198, 0.00035260006552562118, 0.00012209187843836844, 0.00024918746203184128, 0.00042726672836579382, 0.000374490802641958, 0.00023752056586090475, 0.00021305042901076376, 0.00069260550662875175, 0.00037798023549839854, 0.00030032123322598636, 0.00020777908503077924, 0.00032084560371004045, 0.00012343084381427616, 0.00011556832760106772, 0.00020950326870661229, 0.00015860803250689059, 0.00020727899391204119, 0.00018573951092548668, 0.00022125594841782004, 0.00011964141594944522, 0.00028989018755964935, 0.00066037866054102778, 0.00024365170975215733, 0.00013603930710814893, 0.00052737334044650197, 0.0003109559474978596, 0.00030653655994683504, 0.0002609138609841466, 0.00056063238298520446, 0.00038209531339816749, 0.00020035395573358983, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -8,108,-9,-127,-29,-12,-19,-83,-30,10,-13,58,40,-58,-29,60, 
  /* [1][0][][] */ -25,20,-62,5,-25,-37,16,-76,63,63,-66,24,1,1,36,-127, 
  /* [2][0][][] */ -5,16,-47,34,45,37,-27,-86,127,-50,-2,-5,-13,116,-53,4, 
  /* [3][0][][] */ 37,-54,19,-101,18,-18,-17,2,127,13,88,56,8,26,10,119, 
  /* [4][0][][] */ -78,70,16,59,25,-17,7,24,-15,8,6,-34,-127,-14,-23,9, 
  /* [5][0][][] */ 9,48,116,-1,17,76,-88,63,-59,59,-34,-48,34,-45,-127,29, 
  /* [6][0][][] */ 62,-49,127,-100,60,-10,-60,110,-93,-123,46,-44,-7,101,-40,95, 
  /* [7][0][][] */ 31,127,-23,-37,100,19,11,-40,126,98,-20,23,27,-11,42,35, 
  /* [8][0][][] */ 26,-93,6,-89,24,-56,14,-73,17,49,60,-18,18,127,76,62, 
  /* [9][0][][] */ 17,-39,-3,127,33,-10,31,-46,-53,109,22,-19,-4,-53,-18,-14, 
  /* [10][0][][] */ -12,19,-54,-127,6,9,5,16,21,-50,5,-48,4,-36,5,21, 
  /* [11][0][][] */ 0,6,25,-24,89,-32,82,-67,-93,26,-13,19,0,127,-66,-16, 
  /* [12][0][][] */ 110,-53,-125,-31,49,-110,20,20,7,73,-100,-63,-23,127,3,58, 
  /* [13][0][][] */ -14,11,-25,11,7,-127,-9,19,1,-12,1,5,10,-19,10,17, 
  /* [14][0][][] */ 12,-17,103,-18,66,15,-127,-78,-6,-22,41,35,18,-58,-32,-41, 
  /* [15][0][][] */ -121,16,-7,-98,-15,-7,127,32,-46,75,104,-38,-5,46,117,16, 
  /* [16][0][][] */ 33,99,127,127,6,34,119,79,-126,-8,-100,-20,16,2,-1,-102, 
  /* [17][0][][] */ -28,-100,-20,28,-68,-19,-48,8,-127,-40,3,-54,1,39,51,-34, 
  /* [18][0][][] */ 2,45,9,64,51,3,13,1,78,46,-21,-25,4,127,53,27, 
  /* [19][0][][] */ 30,-18,22,9,77,22,-70,-74,-87,-58,-43,-127,-19,-45,9,-25, 
  /* [20][0][][] */ 81,-34,-76,-37,-4,-90,38,7,-61,10,-127,-43,19,6,37,4, 
  /* [21][0][][] */ 66,-4,125,-37,16,22,2,117,5,-82,123,77,4,127,51,115, 
  /* [22][0][][] */ -10,42,-51,127,-56,20,120,44,-26,9,-31,11,18,25,36,-8, 
  /* [23][0][][] */ 96,-4,93,-101,73,20,-10,41,7,-5,-11,-49,-16,0,-127,34, 
  /* [24][0][][] */ -127,49,18,-14,3,103,13,-15,5,25,104,3,-81,7,56,-27, 
  /* [25][0][][] */ 26,21,3,16,3,4,63,-54,-7,-127,-21,-25,-13,-35,17,27, 
  /* [26][0][][] */ -36,-8,-4,12,-42,-4,-28,-28,-105,-34,-1,-40,20,127,-37,41, 
  /* [27][0][][] */ -2,26,9,64,41,-34,-26,-38,52,1,-31,-4,4,127,-12,19, 
  /* [28][0][][] */ 24,56,65,58,127,-8,10,48,-77,-7,-37,-21,20,88,28,-28, 
  /* [29][0][][] */ 5,-16,14,8,22,-11,-4,27,-31,-10,-31,-127,8,-24,-18,9, 
  /* [30][0][][] */ -26,91,-46,77,-37,-12,54,-127,-36,67,-5,0,66,45,87,84, 
  /* [31][0][][] */ -51,-31,-8,-65,-2,2,-65,-109,28,94,-9,-127,-44,-50,12,22, 
  /* [32][0][][] */ -127,-87,-19,68,54,36,-21,1,-9,-58,-121,43,68,-1,57,78, 
  /* [33][0][][] */ 0,-48,-48,-12,-102,-20,-91,-12,57,4,3,-60,37,-122,127,37, 
  /* [34][0][][] */ 50,-18,54,17,38,12,-49,69,-83,-54,55,12,4,-6,-10,127, 
  /* [35][0][][] */ -34,58,-75,21,-8,-20,35,-127,80,84,-97,-11,5,-7,78,-127, 
  /* [36][0][][] */ -23,37,7,127,40,15,121,4,-25,50,-35,-25,-23,22,-71,-53, 
  /* [37][0][][] */ 14,-12,14,-52,1,-10,-46,-44,-73,-6,-6,-4,0,-127,45,-35, 
  /* [38][0][][] */ 35,93,-12,-44,127,-2,26,-35,125,87,-18,6,6,-35,46,7, 
  /* [39][0][][] */ -34,57,-13,-127,-19,17,-30,19,39,-76,-23,-26,22,72,52,18, 
  /* [40][0][][] */ 2,-34,11,-93,7,-12,-14,-36,-127,-3,-17,-25,-11,-123,75,-46, 
  /* [41][0][][] */ -4,-24,-47,-25,0,-35,15,-22,-37,10,-54,-12,-127,8,26,38, 
  /* [42][0][][] */ 127,114,-36,-36,-70,-51,-4,-59,12,25,104,-62,-46,59,104,-125, 
  /* [43][0][][] */ -29,125,-56,-19,71,-3,127,-26,63,87,-26,6,25,-109,-63,-53, 
  /* [44][0][][] */ -17,-14,2,-49,48,-2,-82,-127,-25,-18,5,-8,-17,-34,64,-49, 
  /* [45][0][][] */ -16,69,-127,-38,37,-53,44,-69,23,41,20,-75,34,-8,48,-30, 
  /* [46][0][][] */ 11,6,-19,-100,-7,22,32,-40,-127,-36,10,-5,-9,-121,78,-36, 
  /* [47][0][][] */ 16,45,28,-22,127,-20,-28,15,-70,34,-6,15,4,3,123,-23, 
  /* [48][0][][] */ -127,-88,-27,48,63,10,3,-25,-3,-15,-122,46,53,6,78,48, 
  /* [49][0][][] */ 4,24,99,87,127,4,58,40,-111,-47,-27,-65,11,122,17,-65, 
  /* [50][0][][] */ 19,-29,-106,-4,31,-127,-14,-10,-5,-26,8,-39,31,-10,-4,-5, 
  /* [51][0][][] */ 17,28,37,-1,24,5,-3,13,-127,43,-13,-109,0,-100,-12,98, 
  /* [52][0][][] */ 5,61,7,67,52,7,-9,56,86,108,-19,-54,42,127,58,39, 
  /* [53][0][][] */ 4,-49,-26,-3,-92,-17,-86,-3,39,11,4,-57,33,-127,113,14, 
  /* [54][0][][] */ 45,-1,-34,16,127,81,-110,-24,-73,-16,-23,-69,12,-35,-26,-45, 
  /* [55][0][][] */ 44,-7,14,0,48,-41,-80,-127,-30,-68,-49,24,-6,-25,14,-11, 
  /* [56][0][][] */ -13,9,25,-28,-12,-36,-108,70,-16,127,-10,-21,25,4,-6,15, 
  /* [57][0][][] */ 2,22,-35,-17,-35,-42,127,78,-35,14,-21,-21,27,37,106,-16, 
  /* [58][0][][] */ 44,29,-127,43,97,107,-31,60,-96,-41,1,3,-31,26,-10,-29, 
  /* [59][0][][] */ -88,70,104,32,-76,-67,109,127,21,14,25,-7,7,8,59,-2, 
  /* [60][0][][] */ 22,-6,-60,-1,18,-127,-30,-3,-19,-29,-19,-35,25,-16,3,17, 
  /* [61][0][][] */ 17,-10,31,127,89,26,40,9,-98,-7,24,39,-17,28,41,-57, 
  /* [62][0][][] */ -32,127,9,-49,-42,-10,-75,48,-27,-85,-108,-65,-6,-103,-56,-30, 
  /* [63][0][][] */ -41,20,-23,127,-71,17,-64,-41,-62,-40,-46,-42,31,55,31,32, 
  /* [64][0][][] */ -1,1,3,49,7,16,-12,70,28,7,-11,-43,-19,-127,47,-6, 
  /* [65][0][][] */ -14,-33,-3,-127,39,-23,81,-24,-15,25,-2,-107,-2,4,21,-30, 
  /* [66][0][][] */ 25,-8,77,-8,10,-1,-25,127,34,-46,73,69,-11,91,0,61, 
  /* [67][0][][] */ -2,55,-11,-127,-8,8,-47,32,84,-97,-24,-12,44,86,73,24, 
  /* [68][0][][] */ -51,46,127,-8,9,8,0,9,-42,-24,-9,-23,15,-19,106,-21, 
  /* [69][0][][] */ 127,98,-8,6,-59,-25,-21,-44,2,20,96,-71,-61,61,54,-103, 
  /* [70][0][][] */ 39,11,-59,-17,-32,40,73,127,-37,90,-43,-1,20,69,-24,12, 
  /* [71][0][][] */ 13,-11,-7,15,2,-86,-8,20,-33,24,-87,12,-127,-7,34,52, 
  /* [72][0][][] */ 15,9,-127,14,18,16,27,92,-40,-24,8,-4,18,22,-4,10, 
  /* [73][0][][] */ -39,25,29,-1,43,-18,-59,-127,11,-77,24,-32,16,-35,38,-6, 
  /* [74][0][][] */ 9,15,29,127,10,-11,-96,81,-80,-5,-67,40,21,-123,39,-88, 
  /* [75][0][][] */ 0,11,-57,9,6,-19,0,-12,115,12,-27,-3,7,127,-38,13, 
  /* [76][0][][] */ 0,-15,2,28,9,-18,-19,71,23,-23,-16,-127,-7,-6,-1,6, 
  /* [77][0][][] */ 3,23,-24,127,-54,18,89,76,-1,22,-22,21,-12,-17,-4,-9, 
  /* [78][0][][] */ 27,2,20,-117,41,-43,-47,25,13,-75,-7,-56,23,127,23,47, 
  /* [79][0][][] */ -4,-97,-93,-41,-96,-11,18,-89,127,14,20,66,17,39,49,-56, 
  /* [80][0][][] */ -23,15,90,-83,11,-9,39,-103,-73,20,-54,-127,26,102,84,-44, 
  /* [81][0][][] */ -40,37,-126,21,66,-127,-22,52,-9,-46,58,1,25,0,13,2, 
  /* [82][0][][] */ 127,4,2,19,16,-114,-14,21,-14,-5,-98,4,118,9,-9,19, 
  /* [83][0][][] */ -38,81,-114,-96,-30,-3,56,-127,65,42,-40,-120,26,56,61,95, 
  /* [84][0][][] */ -36,33,55,-38,-7,-42,58,-127,-51,45,-15,-69,21,55,64,0, 
  /* [85][0][][] */ -81,127,20,-125,-84,-37,-37,-7,-66,-13,-85,18,-3,-10,-98,-28, 
  /* [86][0][][] */ -3,16,-12,-9,-10,-20,127,7,-11,-39,1,-15,8,32,70,-19, 
  /* [87][0][][] */ -31,-39,0,-127,7,-28,65,-13,1,22,-5,-121,-18,5,20,-47, 
  /* [88][0][][] */ 127,-14,43,10,34,-94,-17,17,-49,9,-122,-61,25,25,55,1, 
  /* [89][0][][] */ 26,-17,-33,-39,29,-18,-36,-2,-35,19,37,-55,127,-14,16,-57, 
  /* [90][0][][] */ 0,-58,37,-56,61,3,-56,92,64,-76,-28,-20,-8,115,23,-127, 
  /* [91][0][][] */ -36,9,-32,-38,21,-6,-29,-99,-4,64,-4,-127,-15,-13,-10,19, 
  /* [92][0][][] */ -32,32,44,18,3,-127,21,-7,-2,-30,1,-22,6,-26,20,3, 
  /* [93][0][][] */ 41,-18,127,-5,-48,51,22,-24,-15,32,-68,-13,-29,-11,28,-2, 
  /* [94][0][][] */ 20,1,-8,-34,25,-2,-11,-2,-22,-25,21,-44,127,-16,39,-26, 
  /* [95][0][][] */ 127,92,1,34,-96,-14,-58,-15,-28,-25,88,-60,-53,33,76,-86, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00081281806342303753, 0.0011899484088644385, 0.00076144002377986908, 0.00096315395785495639, 0.00083733192877843976, 0.001081133377738297, 0.00039445585571229458, 0.00078812555875629187, 0.00061404070584103465, 0.0011009529698640108, 0.00069906091084703803, 0.0005893664201721549, 0.00064066436607390642, 0.0031722516287118196, 0.00052871566731482744, 0.00043063890188932419, 0.00030264380620792508, 0.00068222644040361047, 0.0012319098459556699, 0.00085925345774739981, 0.00043234185432083905, 0.00020561298879329115, 0.00038761977339163423, 0.000244146678596735, 0.00045595091069117188, 0.0013626154977828264, 0.001984898466616869, 0.0010792191606014967, 0.00060250039678066969, 0.0011703927302733064, 0.00063280115136876702, 0.00080058345338329673, 0.00047268075286410749, 0.00057392369490116835, 0.00087709410581737757, 0.00068311672657728195, 0.0004575006605591625, 0.00060196476988494396, 0.00085799733642488718, 0.0010758561547845602, 0.0003943137708120048, 0.0010469809640198946, 0.00072146649472415447, 0.00051543611334636807, 0.0011892032343894243, 0.00066623627208173275, 0.00077864743070676923, 0.00069154106313362718, 0.00065445539075881243, 0.0005726342205889523, 0.00079697545152157545, 0.00055704265832901001, 0.0012692430755123496, 0.0005775320460088551, 0.00094352191081270576, 0.00089373922673985362, 0.0010793044930323958, 0.0010609329910948873, 0.00078121700789779425, 0.00058484490728005767, 0.0020379316993057728, 0.0012774072820320725, 0.00056997296633198857, 0.0013046280946582556, 0.0013898370089009404, 0.00088348315330222249, 0.00030591635731980205, 0.00062437006272375584, 0.0010705697350203991, 0.00093833316350355744, 0.00059513724409043789, 0.00053382426267489791, 0.0017354089068248868, 0.00094707636162638664, 0.0007524920511059463, 0.00052061624592170119, 0.00080391846131533384, 0.00030927127227187157, 0.0002895707730203867, 0.00052493641851469874, 0.0003974120772909373, 0.00051936320960521698, 0.00046539338654838502, 0.00055438419803977013, 0.00029977640951983631, 0.00072635582182556391, 0.0016546606784686446, 0.00061049958458170295, 0.00034086336381733418, 0.0013213993515819311, 0.00077913870336487889, 0.00076806539436802268, 0.00065375200938433409, 0.0014047339791432023, 0.00095738715026527643, 0.00050201168050989509, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9305, 11328, -19466, -275, -11570, 8778, 29243, -50949, -2684, 14972, 24245, 17899, -6874, 11239, -5883, 10338, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0009180536144413054, 0.00049699266673997045, 0.0002138702548108995, 0.00020960751862730831, 0.00038949257577769458, 0.0004200707480777055, 0.00035423101508058608, 0.00028642543475143611, 0.00033791028545238078, 0.00028677275986410677, 0.00078017509076744318, 0.00053465616656467319, 0.00046454695984721184, 0.00023655836412217468, 0.00051600969163700938, 0.00049088167725130916, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -18,-9,-2,-38,12,-11,-34,-2,12,5,-12,7,-10,-5,-28,6,0,0,-10,-2,5,-24,-3,9,6,11,2,127,32,-30,49,-6,5,3,7,5,-15,10,-39,-9,2,4,1,26,5,8,16,4,31,4,-4,5,18,-13,-9,70,8,5,-24,-31,-3,19,-6,-21,-43,-54,-20,28,1,6,12,-20,-1,-33,-5,-31,-33,17,-4,4,-6,-25,18,16,0,-10,-3,-81,2,-16,5,1,42,-36,-28,-14, 
  /* [1][0][][] */ 29,-68,-87,-58,127,-27,65,21,-25,-66,-47,-8,4,-13,-50,52,-51,-5,34,33,28,36,-12,-45,0,2,-10,-47,38,-16,-49,16,-12,27,2,6,4,9,15,8,-18,32,-38,-7,-16,61,27,13,27,-73,7,-41,-10,32,40,26,-51,-25,-29,-33,15,-21,-5,-30,-72,93,-27,-26,-17,-36,-18,13,50,-76,-19,0,20,-36,47,9,21,-30,28,0,-55,34,-22,39,3,-45,-15,2,12,-2,21,93, 
  /* [2][0][][] */ -15,77,-85,1,78,84,11,88,3,-108,24,-30,4,4,36,7,7,-17,-45,64,26,-1,75,3,49,37,-4,-40,30,-2,54,-81,20,39,-28,45,-127,-112,60,45,-4,-56,27,-19,27,-28,0,68,-8,30,-10,-13,96,-5,-6,59,15,12,14,24,15,14,41,-32,0,12,-36,13,-38,8,-20,-22,-48,-83,30,56,55,49,25,-23,19,-44,3,4,-42,19,43,66,2,39,23,-25,-4,-34,-42,-2, 
  /* [3][0][][] */ 60,41,114,10,24,-6,-2,13,-10,-87,35,-63,1,40,37,80,11,6,36,5,107,-13,35,11,60,-16,-15,13,23,43,-15,82,-105,8,16,-5,-6,-41,1,67,-91,-27,85,2,5,60,-60,-94,-59,-8,-42,45,0,-127,5,6,-110,84,59,43,13,93,7,-59,27,76,12,-40,44,-8,-3,-61,45,-52,38,-27,12,-16,18,32,-35,-56,6,15,-16,2,36,43,48,31,39,43,53,119,76,-43, 
  /* [4][0][][] */ 9,7,1,-16,127,26,-18,-23,-39,-57,-22,-40,-48,24,-8,44,28,-90,-49,67,-18,17,29,-20,1,-9,8,-27,13,-8,68,-60,99,7,-31,22,44,3,26,5,-36,-24,-24,-32,8,-66,-10,28,52,10,0,14,7,-30,12,-28,16,-18,-35,42,-5,58,62,32,30,59,-27,-17,-43,13,38,63,25,-82,-30,-37,14,33,81,-49,6,-36,-3,-2,-69,10,65,74,-42,36,13,-42,-1,3,39,-27, 
  /* [5][0][][] */ -3,-6,-27,3,15,-30,30,-30,-26,-34,-7,5,0,22,-3,14,-2,-8,3,-17,17,19,-40,56,5,-3,4,-76,-4,30,21,29,7,-4,4,-43,17,9,2,-8,-7,-11,31,-22,-6,-10,7,-21,-5,-24,14,-17,6,-10,-11,-49,-14,7,-18,19,58,4,-8,33,-12,61,-4,67,2,89,2,21,8,11,1,72,-44,-3,11,3,-13,-11,-4,20,-4,6,-6,127,4,18,-5,-6,-7,1,-43,15, 
  /* [6][0][][] */ 30,-97,-10,-52,-17,-5,36,7,-2,12,-26,-61,-36,-8,-38,49,32,-12,-8,2,-44,41,13,-1,-30,3,-18,-6,-6,12,47,-7,70,8,66,-7,-20,7,17,-117,-6,100,-15,-24,24,-33,-15,18,-12,17,-35,58,-4,-56,-19,2,2,-75,-3,10,-16,58,24,-73,31,-30,-5,-38,-20,-11,127,-4,-33,24,-22,29,-99,1,32,4,25,31,18,-11,-27,3,40,31,-7,-7,34,-46,-29,-15,-45,-18, 
  /* [7][0][][] */ 7,127,64,29,103,61,35,-17,-22,-40,39,-20,-19,28,24,6,5,-31,19,33,30,-43,40,5,-7,20,19,-4,1,-14,12,12,35,-2,-35,8,20,-16,-4,96,-55,35,21,21,-17,-6,11,-22,-31,-10,27,21,10,-46,-37,39,40,14,-25,7,-9,-36,1,-3,-51,75,-27,-70,0,-29,3,74,-23,-32,9,16,63,49,41,-21,-49,-25,-14,2,-20,45,4,-9,-9,43,-19,-42,-23,1,31,-5, 
  /* [8][0][][] */ -31,-6,48,19,-127,-45,43,-20,29,93,76,8,-20,31,22,-3,-43,-2,-4,-17,-51,6,-109,72,31,-28,58,-2,17,30,-2,43,92,-12,4,9,-29,-26,37,26,5,-34,47,3,-25,-10,39,10,-88,9,35,26,-51,-32,-31,48,4,-68,-84,-22,14,-41,-30,4,-12,84,-12,-69,24,-6,-52,-15,38,55,72,-13,-28,-40,-16,11,-84,3,-16,14,27,16,81,79,30,-45,42,59,-5,-12,56,18, 
  /* [9][0][][] */ -11,-91,0,32,81,96,-50,-13,27,-49,99,77,-29,35,86,-127,6,-36,-4,-2,-68,-35,28,-10,0,4,-3,45,-32,21,5,-32,34,11,-101,46,-6,-20,-7,75,14,-76,8,50,-7,-1,-80,-25,36,35,-2,-80,56,36,-16,-59,-18,82,-5,-1,16,-62,-26,119,-108,-3,-17,-13,16,51,-64,-72,23,-17,13,21,55,-73,19,-4,-5,-20,11,37,0,-71,42,19,27,-32,-38,44,-60,-1,19,-53, 
  /* [10][0][][] */ -52,-22,-47,-46,-19,-21,56,-30,28,22,29,31,23,-8,-7,-3,-12,5,-35,-30,-5,40,10,24,-15,-2,8,-112,19,-38,56,-38,14,17,-2,1,-10,24,15,-16,5,-33,18,-50,25,-13,28,30,8,23,-21,-24,-23,-17,-6,-45,11,3,-4,-30,15,4,-9,11,-51,93,-24,-39,7,-33,-6,-20,-27,-3,28,46,-20,42,-14,3,-10,-12,6,22,0,-15,4,127,-7,-12,7,15,6,-46,47,-40, 
  /* [11][0][][] */ -103,17,10,10,18,-74,-31,10,-55,-15,1,19,35,42,-24,-24,46,-4,-69,-61,17,-7,-12,-2,84,20,77,15,-35,32,-40,-2,0,26,1,5,-11,-15,43,8,-34,-1,12,3,87,34,63,26,54,38,5,39,20,-66,26,-2,-82,-26,-43,-38,-2,-11,6,21,-17,-28,21,4,19,12,-4,39,-30,12,46,16,-19,95,-127,60,-34,-9,-68,-59,122,21,68,0,23,53,-29,-66,-21,55,-9,-15, 
  /* [12][0][][] */ -13,-3,-41,3,58,14,0,-11,-9,24,19,-17,4,-21,28,-10,-38,-2,2,-29,-10,-8,-46,51,-31,29,-23,90,-11,21,-43,4,-9,30,0,34,-20,-23,3,3,-2,-20,-6,-6,-20,-11,19,25,4,-5,0,-30,-20,15,-8,-32,-8,-10,16,20,-14,-17,-8,41,34,-76,5,39,-36,-127,-7,32,4,-5,17,73,5,-20,-6,-3,-2,25,-49,-7,17,-8,7,-44,-7,10,6,5,-37,27,-8,22, 
  /* [13][0][][] */ -66,53,-25,-30,-45,-2,-7,9,-42,-27,21,27,79,13,-23,9,-11,21,-60,7,11,-12,42,-47,51,26,-3,19,7,-28,-36,-80,-72,-30,12,12,-16,30,34,-30,-18,87,-9,11,57,-21,-12,-1,58,-20,31,75,64,-47,66,-16,-22,49,51,11,13,38,-28,23,6,-24,1,-10,-6,16,24,-127,15,-5,-71,4,25,41,-32,-32,79,-27,-2,-46,22,-28,87,14,-26,-12,-33,17,26,-59,-37,5, 
  /* [14][0][][] */ -21,10,-32,-62,44,-13,7,21,-95,14,2,18,-30,-73,-75,-11,-90,-15,63,21,39,-4,17,-99,-47,15,-52,-24,20,-38,-20,-17,-62,-24,20,10,-17,18,-12,-15,13,89,-86,-11,-43,7,14,14,127,-37,17,-15,26,57,-104,23,-13,28,-99,10,12,37,29,29,9,27,-3,-7,-67,10,62,23,43,2,-29,1,52,-80,-22,-94,20,-39,6,23,23,-65,-53,-2,-64,13,18,48,15,27,3,-17, 
  /* [15][0][][] */ -38,-80,-16,-28,5,22,-6,-76,-12,20,-15,-37,39,-16,45,-8,-92,6,-8,20,-12,-5,-60,-53,-21,-3,-6,8,-28,-16,62,-97,-17,28,26,1,-9,21,-104,15,38,-85,-11,39,-31,-49,57,28,47,23,-14,-127,-7,44,-2,41,42,-7,-20,35,16,2,49,0,21,-12,-13,4,-11,34,9,50,-46,14,-6,-24,-26,-9,13,14,-14,47,-11,77,-16,-49,-50,-42,-39,67,19,75,-31,2,-15,-8, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.039017278701066971, 0.021122187376022339, 0.0090894857421517372, 0.0089083192870020866, 0.016553433611989021, 0.017853006720542908, 0.015054818242788315, 0.012173080816864967, 0.014361186884343624, 0.012187842279672623, 0.033157441765069962, 0.022722886875271797, 0.019743245095014572, 0.010053730569779873, 0.021930411458015442, 0.02086247131228447, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 17478, 61855, 232, 50, 14995, -3533, -13, -391, 4588, 13969, -3249, 133, 96, 4521, 3982, -9003, -4054, -690, -453, 13082, -11148, 14577, -3964, 5461, 29190, 158, -6338, 17498, 13324, -18860, 1629, 21867, 23252, -11327, 3062, 756, -243, -629, 3735, -7663, -5607, -1164, -6809, -3, 31413, -1821, 12767, 160, -13635, 1201, 161, 149, -1714, 16719, -2650, 17568, 15421, -32, 33128, -373, -9414, -1058, 1209, 16, -2938, 12619, -633, -8687, -2638, 2118, -152, -4431, 1625, 109, -2744, -5598, -442, -1644, 44224, -7939, -6697, -11645, -190, 473, 63100, -13107, -9129, -27539, -7868, 9156, -1717, 39005, 18, -2083, -3402, 444, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013677273818757385, 9.3514987383969128e-05, 0.00014261368778534234, 0.00024466743343509734, 0.00023349942057393491, 0.00021536856365855783, 6.0862683312734589e-05, 0.00010141951497644186, 0.00026869052089750767, 0.00017339689657092094, 0.00028794718673452735, 0.0001107286152546294, 0.00029725694912485778, 0.0002136433613486588, 0.00042614073026925325, 0.0001793652045307681, 0.00020090857287868857, 0.00018453935626894236, 0.00021373531490098685, 8.3291575720068067e-05, 6.7677385231945664e-05, 3.7468777009053156e-05, 0.0001412493729731068, 0.00012104485358577222, 8.5387830040417612e-05, 9.0547146101016551e-05, 0.00015423342119902372, 0.00017730274703353643, 7.9120014561340213e-05, 0.00049704592674970627, 0.00039171893149614334, 0.00023419657372869551, 0.0001069141217158176, 0.00014756344899069518, 0.00027105977642349899, 0.0004891927819699049, 0.00041772201075218618, 0.00019364379113540053, 0.00025072932476177812, 7.0246860559564084e-05, 0.00023644242901355028, 0.00023891506134532392, 0.00035059041692875326, 6.8538531195372343e-05, 0.00041772425174713135, 0.00010406868386780843, 0.00010913632286246866, 0.00032414298038929701, 0.00081066804705187678, 0.00011654667468974367, 0.0004398355376906693, 0.00017917930381372571, 0.00030988210346549749, 0.0001691982033662498, 0.0003064592310693115, 0.00010469635162735358, 0.00017983776342589408, 0.00048542540753260255, 4.8440509999636561e-05, 0.0001651912898523733, 0.00028956503956578672, 0.00032109854510053992, 0.00011403572716517374, 0.00015454291133210063, 0.00013404240598902106, 0.00014335133892018348, 0.00034710808540694416, 0.0002492491330485791, 0.00023405317915603518, 0.00018030502542387694, 0.00023129823966883123, 0.00010717893746914342, 0.00028557871701195836, 0.00014199457655195147, 0.00021566795476246625, 0.00033490124042145908, 0.0001361116737825796, 7.4332143412902951e-05, 5.7665540225571021e-05, 0.00015858479309827089, 0.00025705271400511265, 0.00023582178982906044, 0.00016345878248102963, 0.00029786248342134058, 5.5444281315430999e-05, 0.00012433693336788565, 8.1262413004878908e-05, 0.00052027124911546707, 0.00024469912750646472, 0.00013895575830247253, 0.000404351856559515, 2.5930658011930063e-05, 0.00014502640988212079, 0.00011523938155733049, 0.00029461065423674881, 0.00029071408789604902, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-12,127,22,71,71,-60,-12,-19,-14,-6,-28,0,38,4,-8,-44,26,22,19,-127,127,4,-83,6,50,-29,-123,-127,37,25,14,29,57,-18,-30,-8,30,-3,-14,26,-109,72,25,-66,36,44,-18,52,-25,18,2,-6,15,48,-90,-48,-59,-18,-11,0,11,37,71,-24,71,15,-7,16,20,127,23,23,27,1,-10,18,127,-4,-13,14,-28,20,126,19,-81,-15,2,-31,-16,-40,1,-26,-14,26, 127,-127,71,106,-43,127,42,-119,71,3,-18,127,127,-100,-12,16,12,127,127,-110,127,-73,80,67,-127,-116,-67,-34,-55,47,-62,-21,-94,52,-127,-84,-42,-16,-52,63,-1,127,127,78,-52,-112,-114,-51,-15,-127,40,83,68,-31,45,81,-46,42,-78,-111,-45,-43,-61,65,75,-59,24,33,-79,33,-17,91,118,127,12,22,2,60,-32,54,66,127,127,-23,-6,77,-118,127,-118,-98,5,-127,-91,-127,-38,105, -74,-14,27,-80,14,-21,65,-8,81,-35,-27,19,-18,-4,-7,-9,-10,-17,7,-3,-20,-98,30,-2,-124,97,9,-54,123,50,-16,9,-1,15,12,-29,-9,32,20,16,25,11,-121,63,18,-18,37,13,-15,11,-19,4,-11,1,-4,20,-65,8,-29,52,1,40,31,-1,-6,-37,-30,28,9,2,-2,35,9,-25,-9,4,-12,-5,-84,1,-19,-24,-19,2,-108,10,-38,-22,-48,25,-25,-31,30,-26,-14,1, 
  /* [0][1][][] */ -64,-76,70,-36,-48,90,19,127,-50,-23,-1,-122,26,-116,79,29,-2,-59,-18,89,51,-69,48,51,-93,-12,127,-22,-22,64,122,-104,-127,93,-86,-56,-35,33,-28,102,-47,-25,-5,45,-47,127,-24,62,16,95,18,-3,14,-54,27,31,127,121,-71,-85,127,-32,-35,127,74,-36,-15,1,127,40,127,96,-41,102,-4,13,15,13,-31,10,-41,125,-80,109,3,33,-54,31,79,-127,-32,-9,127,-70,-23,0, 67,125,55,-114,127,83,89,38,-127,127,127,-39,-64,-127,-127,127,127,-62,-124,-49,97,99,-121,127,-113,-92,-46,127,-127,109,-127,-127,-89,127,104,127,127,-127,-105,127,-64,-93,113,-127,-127,-34,-127,-127,127,-113,83,42,127,127,127,-127,102,-127,-127,127,19,-79,-127,-99,-127,127,-127,127,-121,-127,-106,-82,-127,-78,127,127,-127,127,-78,127,127,30,-42,-127,62,127,94,47,127,15,127,-1,-68,36,127,-127, -54,-16,-49,39,-56,-91,38,-26,19,-34,-29,94,2,95,15,11,-6,63,-6,127,3,-79,-41,9,-74,103,-73,-19,-69,-18,19,-64,-72,39,4,-19,-29,45,-67,49,127,-5,-41,25,-40,-59,17,43,8,117,-13,6,-37,-71,4,18,96,4,3,23,-35,127,90,-54,-43,14,36,-9,-74,123,-18,-86,-2,-52,-16,-20,27,16,76,-37,-67,-43,56,14,-47,-17,72,23,16,64,-44,23,-42,98,-26,-4, 
  /* [0][2][][] */ -67,1,-6,-23,13,-40,65,24,56,-29,-36,-4,19,20,-25,-2,-7,65,7,2,-54,-81,3,-8,-27,-54,36,-68,95,39,26,26,20,-8,-11,-46,-6,33,-2,0,-16,-4,-68,102,2,30,10,34,-14,-30,9,-20,22,-1,8,15,-69,24,-14,14,14,1,-21,-6,1,-45,-46,17,-29,16,25,29,13,-18,29,4,18,4,-79,-13,-7,-8,17,14,-127,6,17,-44,-56,-51,-28,-49,9,59,-19,-7, 121,32,-127,-38,-72,-21,37,30,-64,-29,-20,-109,-76,115,-11,37,2,-49,-9,-125,90,-52,-38,0,-116,127,-52,21,-36,-22,-9,-5,-60,16,25,5,-23,-30,127,58,12,-12,66,-35,-40,77,-67,-43,-32,-6,-127,-127,-53,-25,0,38,-63,-8,13,39,-8,-16,8,-48,-53,35,66,-21,115,111,-21,-70,11,-56,5,4,101,4,51,20,12,-98,-49,2,3,8,127,39,-58,39,-19,-111,41,82,-10,26, -54,12,-19,24,15,-64,-127,3,-11,-8,-16,3,16,-23,20,-2,-7,-16,5,17,-45,-74,15,3,23,-96,22,4,-50,-41,-5,16,45,-22,-7,-26,-36,1,42,-37,22,-1,-51,-34,2,66,24,17,-9,-4,8,-9,18,6,-7,-5,-60,-13,6,-36,-13,11,83,-12,35,-1,0,29,4,6,-2,21,-19,17,0,14,36,0,75,-14,3,-7,-8,-18,78,0,40,-39,61,41,-17,-51,-7,5,-15,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0058128410018980503, 0.0039743869565427303, 0.006061081774532795, 0.010398365557193756, 0.009923725388944149, 0.0091531639918684959, 0.0025866639334708452, 0.00431032944470644, 0.011419346556067467, 0.0073693678714334965, 0.01223775465041399, 0.0047059659846127033, 0.012633419595658779, 0.0090798428282141685, 0.018110981211066246, 0.007623021025210619, 0.0085386140272021294, 0.0078429225832223892, 0.0090837506577372551, 0.0035398919135332108, 0.0028762887232005596, 0.0015924230683594942, 0.0060030980966985226, 0.0051444061100482941, 0.0036289826966822147, 0.0038482537493109703, 0.0065549202263355255, 0.0075353663414716721, 0.0033626006916165352, 0.021124452352523804, 0.016648054122924805, 0.0099533544853329659, 0.0045438501983880997, 0.0062714465893805027, 0.011520040221512318, 0.020790692418813705, 0.017753185704350471, 0.0082298610359430313, 0.010655996389687061, 0.0029854916501790285, 0.010048802942037582, 0.010153889656066895, 0.014900092035531998, 0.002912887604907155, 0.017753280699253082, 0.0044229188933968544, 0.0046382937580347061, 0.013776076026260853, 0.034453392028808594, 0.0049532335251569748, 0.01869300939142704, 0.0076151201501488686, 0.013169988989830017, 0.0071909232065081596, 0.013024517334997654, 0.0044495947659015656, 0.0076431049965322018, 0.020630579441785812, 0.0020587216131389141, 0.0070206294767558575, 0.012306514196097851, 0.013646688312292099, 0.0048465183936059475, 0.0065680737607181072, 0.0056968024000525475, 0.0060924319550395012, 0.014752093702554703, 0.01059308834373951, 0.0099472599104046822, 0.0076629635877907276, 0.0098301749676465988, 0.0045551047660410404, 0.0121370954439044, 0.0060347695834934711, 0.0091658877208828926, 0.0142333023250103, 0.0057847457937896252, 0.0031591160222887993, 0.0024507853668183088, 0.0067398534156382084, 0.010924740694463253, 0.010022426024079323, 0.0069469981826841831, 0.012659154832363129, 0.0023563818540424109, 0.005284319631755352, 0.0034536526072770357, 0.022111527621746063, 0.01039971224963665, 0.0059056193567812443, 0.017184954136610031, 0.0011020529782399535, 0.0061636222526431084, 0.0048976736143231392, 0.012520953081548214, 0.012355349026620388, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1491, 7076, 14844, 22844, 16379, -3003, -1741, 6400, 30100, -3238, 14389, 4389, 9922, 10792, 32233, 1588, 2833, 6463, 13984, 4932, -66, 691, 15423, -1144, 3905, 56, 10619, 9917, 6548, 39984, 58195, 17643, 6030, -533, 13469, 3221, 1786, 3924, 24284, -973, 15068, 7311, 37690, -4106, 27340, 7932, 5717, 17827, 46942, 9192, -414, 7249, -4208, -290, -2342, 8360, -682, 13539, 6232, 7546, 4805, 14822, 8646, 6167, 8355, 7672, 5429, -4170, 6966, -3032, 5135, 9417, 19708, 6274, -3551, -5666, 6104, 366, 2897, -905, 15963, 12893, 5038, 15892, 2891, 351, 12574, 74360, 7863, 10408, 7963, -226, 6020, 7417, 3756, 10009, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00023316165606956929, 0.00021045173343736678, 0.00012834004883188754, 9.9575103376992047e-05, 0.00018462701700627804, 0.00034310107002966106, 0.00046583043877035379, 0.00025911917327903211, 7.7310091000981629e-05, 0.00042328442214056849, 0.00018635312153492123, 0.00020645227050408721, 0.00012929114745929837, 0.00021266797557473183, 7.4522024078760296e-05, 0.00036306070978753269, 0.00017129926709458232, 0.00019200218957848847, 0.00015973263361956924, 0.0002375181793468073, 0.00037690394674427807, 0.00036334170727059245, 0.0001333496329607442, 0.00049433042295277119, 0.00067598558962345123, 0.00025493663270026445, 0.00021029551862739027, 0.00014683161862194538, 0.00024581403704360127, 8.7872125732246786e-05, 4.8836212954483926e-05, 0.00013844794011674821, 0.00026646148762665689, 0.00033209336106665432, 0.0001491229486418888, 0.00018077938875649124, 0.00029083038680255413, 0.00037825200706720352, 0.00011089434701716527, 0.00060371641302481294, 0.00012339180102571845, 0.00021130595996510237, 7.0846108428668231e-05, 0.00024699568166397512, 0.00012013613013550639, 0.0001924532261909917, 0.00030022114515304565, 0.00015272559539880604, 8.7208689365070313e-05, 0.00023244536714628339, 0.00026466723647899926, 0.0002386085398029536, 0.00024843410938046873, 0.00023796311870682985, 0.00045056754606775939, 0.00013585505075752735, 0.0001785530912457034, 0.00013615547504741699, 0.00033662005444057286, 0.00019672150665428489, 0.00033704913221299648, 9.5224510005209595e-05, 0.00017331226263195276, 0.00016455067088827491, 0.0002933524374384433, 0.00025218911468982697, 0.00023556269297841936, 0.00031522524659521878, 0.00023823209630791098, 0.00023839346249587834, 0.00021476253459695727, 0.00016658486856613308, 0.00010610518074827269, 0.00016163931286428124, 0.00043818136327899992, 0.00023647421039640903, 0.00027791730826720595, 0.00027950585354119539, 0.00025646280846558511, 0.00040587427793070674, 0.00012801142293028533, 0.00012762164988089353, 0.00017289046081714332, 0.0001231961214216426, 0.00041746324859559536, 0.00024859057157300413, 0.00018475241085980088, 5.12763908773195e-05, 0.00017469110025558621, 0.00021677922632079571, 0.00016133270401041955, 0.00041110962047241628, 0.00024976441636681557, 0.00021576012659352273, 0.0003060404269490391, 0.00016832334222272038, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 29,69,-30,112,47,46,2,5,65,46,-92,127,-3,-104,24,-86, 
  /* [1][0][][] */ 20,43,0,-42,32,-21,122,-127,-11,55,-19,-33,-3,-45,41,2, 
  /* [2][0][][] */ -127,38,-80,-15,-6,-35,40,108,-53,41,123,34,-60,-21,34,-28, 
  /* [3][0][][] */ -64,106,61,32,-54,26,54,121,-7,74,-105,22,25,-127,-60,-63, 
  /* [4][0][][] */ 20,-13,34,68,-29,67,0,32,9,-20,4,-2,16,2,-127,-33, 
  /* [5][0][][] */ -7,-38,37,1,20,-33,-12,12,-64,72,-30,-127,-5,23,-46,-29, 
  /* [6][0][][] */ -4,29,7,-32,44,68,-58,-76,-6,8,72,3,127,-34,19,-50, 
  /* [7][0][][] */ 26,31,127,-2,-14,-13,25,-7,-72,35,-75,-36,0,-6,38,-25, 
  /* [8][0][][] */ 4,32,53,49,-51,125,48,57,38,-2,-3,-94,-35,-9,-127,-64, 
  /* [9][0][][] */ 10,-85,42,43,-8,-19,2,29,127,6,78,13,-19,22,-81,-33, 
  /* [10][0][][] */ -14,-107,16,-32,-108,16,54,127,99,114,49,-36,-54,92,85,-25, 
  /* [11][0][][] */ 15,-11,-4,-100,27,-16,-72,-127,-40,34,-13,-52,13,-40,40,-57, 
  /* [12][0][][] */ -37,-11,-1,-49,-44,-39,-90,-27,-59,-81,-15,18,2,127,108,63, 
  /* [13][0][][] */ -17,-85,-57,27,-10,-65,10,-22,50,15,-9,-7,18,25,127,38, 
  /* [14][0][][] */ -8,-51,73,39,23,38,12,127,35,49,21,-53,23,41,-66,120, 
  /* [15][0][][] */ 10,-25,-3,65,21,-13,107,-3,0,-127,8,-48,-10,-14,0,-35, 
  /* [16][0][][] */ 29,-69,-61,32,1,-10,42,-71,127,72,94,-3,-5,96,82,117, 
  /* [17][0][][] */ -58,-54,46,109,92,31,9,-44,102,-23,11,-31,0,16,-127,11, 
  /* [18][0][][] */ 13,13,2,24,-115,-13,-17,46,-72,-3,-37,-63,37,-127,45,-5, 
  /* [19][0][][] */ 47,-17,105,-47,36,38,-127,108,94,-108,42,45,5,55,9,30, 
  /* [20][0][][] */ 34,-13,51,-50,-6,0,-35,46,-17,-59,89,-14,-4,25,-50,127, 
  /* [21][0][][] */ -53,-56,34,-56,15,-4,-126,-67,-45,56,-23,-4,-127,-12,38,18, 
  /* [22][0][][] */ 14,-31,8,-27,9,-76,-3,-15,-127,26,-11,-38,-21,-9,91,-26, 
  /* [23][0][][] */ 12,12,17,3,9,3,-13,9,-8,-4,47,-12,127,-6,1,-52, 
  /* [24][0][][] */ -4,4,34,-57,-10,-21,35,11,-65,8,-8,-127,26,-109,32,3, 
  /* [25][0][][] */ -83,-9,2,12,68,-42,-75,-127,-38,56,-13,-81,-101,-50,-31,-40, 
  /* [26][0][][] */ 47,-13,28,-97,127,-15,19,5,94,-14,57,-17,14,83,10,94, 
  /* [27][0][][] */ 122,-22,18,-52,-29,-54,7,-29,-29,26,-127,26,24,-9,15,42, 
  /* [28][0][][] */ -90,-32,-127,-106,55,-31,90,-51,-11,48,-100,51,91,-31,-34,74, 
  /* [29][0][][] */ -70,-43,6,127,-22,8,14,-49,-38,-23,-74,84,34,-100,66,-49, 
  /* [30][0][][] */ 83,-16,127,-8,67,55,-17,91,-72,-82,59,-54,-6,17,-103,101, 
  /* [31][0][][] */ -12,-83,1,-64,9,-59,12,-41,-18,41,115,19,-20,103,66,127, 
  /* [32][0][][] */ -18,78,-36,22,-127,34,-55,-54,-45,-33,14,48,-1,63,52,63, 
  /* [33][0][][] */ 33,-19,30,127,27,6,20,-31,-87,58,63,-15,14,15,-8,82, 
  /* [34][0][][] */ 50,-3,31,5,104,-43,-127,-17,-45,117,-12,-7,-25,-3,-13,0, 
  /* [35][0][][] */ 82,25,7,-1,24,-127,-43,-18,-26,-12,-87,-1,85,17,-13,23, 
  /* [36][0][][] */ 24,0,-127,14,66,23,-29,11,-31,-10,7,-5,7,9,-21,-5, 
  /* [37][0][][] */ 9,-3,127,-15,-61,43,33,-70,1,24,-32,40,25,15,19,-14, 
  /* [38][0][][] */ -122,41,-6,43,21,80,31,-33,26,-4,127,-23,-3,5,-20,-42, 
  /* [39][0][][] */ -3,-7,11,33,26,-25,-127,35,5,28,-14,-45,-4,-14,-3,-2, 
  /* [40][0][][] */ 31,86,-4,127,18,48,50,36,-70,-14,-17,54,12,21,-91,-49, 
  /* [41][0][][] */ 25,-3,-64,-27,-56,-16,127,87,-74,69,-52,-5,34,62,42,-10, 
  /* [42][0][][] */ 29,-1,-21,6,41,0,-3,127,47,-112,64,47,-29,26,-96,3, 
  /* [43][0][][] */ -79,-33,45,-15,41,-4,-115,-76,-43,39,-40,-38,-127,-35,-2,0, 
  /* [44][0][][] */ 2,9,-20,-3,-17,-11,7,-65,127,-18,26,32,18,83,6,37, 
  /* [45][0][][] */ -74,-62,38,-68,49,18,21,62,38,-60,-4,-22,19,127,-39,104, 
  /* [46][0][][] */ -21,28,-30,109,-74,-23,-5,-69,-127,44,-53,-1,-5,31,-1,-34, 
  /* [47][0][][] */ -26,4,-127,105,3,60,19,-30,0,63,41,69,-70,-8,16,-17, 
  /* [48][0][][] */ -13,-27,28,-127,24,-23,-55,-23,-51,38,29,-43,24,22,68,22, 
  /* [49][0][][] */ -23,-23,10,102,-22,24,-66,-15,42,-9,-127,-70,-45,-68,-91,-108, 
  /* [50][0][][] */ 7,53,32,-114,63,16,-23,37,127,-26,-31,-3,5,-35,12,-27, 
  /* [51][0][][] */ 14,-22,7,-1,47,-14,-53,-127,16,-71,-2,-12,-1,-11,-8,-21, 
  /* [52][0][][] */ 32,10,-9,36,43,-23,-78,106,-92,127,-49,-67,87,124,10,-41, 
  /* [53][0][][] */ 18,114,-4,-75,-20,-3,19,-15,-59,-21,-67,71,36,-127,-109,1, 
  /* [54][0][][] */ -5,8,13,24,40,-29,3,-30,-1,27,-12,-17,-13,127,-35,-4, 
  /* [55][0][][] */ -126,104,105,-36,29,-17,-40,-17,-67,4,107,-34,-14,-48,127,-10, 
  /* [56][0][][] */ 61,15,15,-127,84,8,-10,29,63,-41,48,123,-26,28,78,76, 
  /* [57][0][][] */ -29,-12,19,61,-19,33,45,127,-5,-2,17,-17,23,48,18,27, 
  /* [58][0][][] */ 12,127,-6,-117,9,41,-3,9,94,-18,-2,86,6,-79,29,60, 
  /* [59][0][][] */ 41,36,53,-127,-49,0,46,-11,20,28,28,-50,-6,-116,-66,19, 
  /* [60][0][][] */ 47,-4,110,-35,-28,127,42,-21,-14,48,-44,1,27,5,22,-5, 
  /* [61][0][][] */ -37,33,-30,-69,-66,16,127,114,-29,78,20,14,19,68,20,-50, 
  /* [62][0][][] */ -33,-1,12,-31,-101,21,-65,17,-46,-35,28,-34,18,-127,106,-9, 
  /* [63][0][][] */ 8,-9,6,-84,56,-32,-119,-127,-78,108,10,-18,20,-3,19,-55, 
  /* [64][0][][] */ -47,-25,21,41,61,3,-10,-127,20,-75,3,-47,1,-24,-5,-10, 
  /* [65][0][][] */ -127,4,38,-54,1,43,27,-50,-72,20,36,-16,5,9,-21,-22, 
  /* [66][0][][] */ 63,-9,71,34,-45,16,-18,39,-43,5,81,-106,-11,44,-127,-34, 
  /* [67][0][][] */ 48,-17,-17,61,62,-12,-59,-105,18,-127,-58,-14,-62,6,-57,12, 
  /* [68][0][][] */ 13,-24,-45,53,-65,-90,-24,-52,-29,-19,60,-46,-34,60,127,-7, 
  /* [69][0][][] */ -26,46,-46,64,3,-109,29,87,32,11,50,-3,127,33,-20,-10, 
  /* [70][0][][] */ 28,26,-53,-39,-46,10,127,112,-29,67,-41,9,20,66,21,-10, 
  /* [71][0][][] */ 9,-3,-16,-40,20,-1,4,40,-37,-45,-21,9,6,-127,61,19, 
  /* [72][0][][] */ 54,6,-39,38,30,-61,-47,-127,10,66,-68,22,87,55,35,35, 
  /* [73][0][][] */ -62,-127,-39,-76,-90,-3,70,-30,-33,11,-20,-21,21,-65,67,-8, 
  /* [74][0][][] */ -33,27,59,84,-5,-9,-127,73,9,-46,-41,-50,-4,-12,-9,4, 
  /* [75][0][][] */ -58,27,-45,20,-30,91,91,127,2,56,-4,-37,-113,63,8,13, 
  /* [76][0][][] */ 35,-28,-15,-10,29,-78,-127,-91,-7,-2,-18,-29,44,0,53,-20, 
  /* [77][0][][] */ -54,4,-36,-29,-55,-14,-22,-38,127,17,-48,25,-30,34,46,-63, 
  /* [78][0][][] */ -106,-126,20,89,80,54,-58,49,-30,-104,-127,87,69,-63,100,63, 
  /* [79][0][][] */ 20,-1,34,-58,127,-3,55,13,88,36,0,41,-27,-31,26,-41, 
  /* [80][0][][] */ -2,-62,47,-127,-14,-23,-9,-16,-72,-38,0,-75,31,112,-30,27, 
  /* [81][0][][] */ 6,-25,63,35,23,66,-26,-34,6,-32,-8,-52,-3,41,-127,20, 
  /* [82][0][][] */ -33,-36,46,-126,-19,-41,-12,-38,-42,-25,-12,-127,-31,-103,-93,29, 
  /* [83][0][][] */ 8,18,-47,-82,-51,2,-17,47,-82,-10,3,-98,11,-127,16,69, 
  /* [84][0][][] */ 127,41,22,40,-68,-18,-59,13,-21,-46,100,13,-71,21,86,-85, 
  /* [85][0][][] */ -24,-5,18,-11,35,-25,-68,127,-98,-96,-76,6,-24,56,68,-116, 
  /* [86][0][][] */ 23,-32,-4,3,-98,72,-112,54,-122,-111,50,-53,-4,-127,-11,82, 
  /* [87][0][][] */ 109,-46,20,-33,-73,-61,8,5,-9,12,-127,-16,-2,-20,6,86, 
  /* [88][0][][] */ 66,53,-12,-11,-24,-53,-19,3,63,19,59,29,-28,-25,127,-121, 
  /* [89][0][][] */ 44,77,-59,-18,-30,-8,17,-65,38,36,28,-27,-19,8,-14,-127, 
  /* [90][0][][] */ -33,-43,7,-88,-104,6,110,-73,127,-91,11,-87,61,-23,-41,9, 
  /* [91][0][][] */ 4,20,-20,-88,-43,10,25,-35,-29,25,66,40,-11,2,44,127, 
  /* [92][0][][] */ 15,16,5,-1,41,-15,-74,-127,45,-74,6,-10,-47,-16,16,-19, 
  /* [93][0][][] */ 99,-29,44,-102,-51,-20,-43,23,42,-45,60,-39,-4,127,-35,27, 
  /* [94][0][][] */ -90,57,-85,-6,61,-127,-19,12,3,-56,72,-35,19,-11,-26,-10, 
  /* [95][0][][] */ -20,23,29,-127,-6,-12,-18,-14,0,-40,-15,-80,3,6,-52,-13, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00072249578079208732, 0.00065212475601583719, 0.000397686060750857, 0.00030855240765959024, 0.00057210196973755956, 0.0010631639743223786, 0.0014434643089771271, 0.00080293009523302317, 0.0002395600313320756, 0.0013116273330524564, 0.00057745061349123716, 0.00063973164651542902, 0.00040063323103822768, 0.0006589922122657299, 0.00023092067567631602, 0.0011250127572566271, 0.00053080340148881078, 0.0005949553451500833, 0.00049496197607368231, 0.00073599530151113868, 0.0011679086601361632, 0.0011258834274485707, 0.00041320922900922596, 0.001531776855699718, 0.0020946699660271406, 0.00078996969386935234, 0.0006516407011076808, 0.00045498571125790477, 0.0007617016090080142, 0.00027228851104155183, 0.00015132830594666302, 0.00042900728294625878, 0.00082568160723894835, 0.0010290545178577304, 0.00046208582352846861, 0.00056017935276031494, 0.00090119329979643226, 0.0011720858747139573, 0.00034362723818048835, 0.0018707303097471595, 0.00038235299871303141, 0.00065477174939587712, 0.00021953016403131187, 0.00076536316191777587, 0.00037226467975415289, 0.00059635296929627657, 0.00093029235722497106, 0.00047324932529591024, 0.00027023273287340999, 0.00072027620626613498, 0.00082012178609147668, 0.00073937396518886089, 0.00076982041355222464, 0.00073737400816753507, 0.0013961693039163947, 0.00042097273399122059, 0.00055328075541183352, 0.00042190364911220968, 0.0010430812835693359, 0.00060957903042435646, 0.0010444108629599214, 0.00029507128056138754, 0.00053704105084761977, 0.00050989160081371665, 0.00090900837676599622, 0.00078145600855350494, 0.00072993582580238581, 0.00097678543534129858, 0.00073820748366415501, 0.0007387075456790626, 0.00066548259928822517, 0.00051619490841403604, 0.00032878710771910846, 0.00050087017007172108, 0.0013577883364632726, 0.00073276035254821181, 0.00086117972387000918, 0.00086610211292281747, 0.00079469883348792791, 0.0012576787266880274, 0.00039666774682700634, 0.0003954599960707128, 0.00053573399782180786, 0.00038174662040546536, 0.001293589361011982, 0.00077030522515997291, 0.00057249050587415695, 0.00015888965572230518, 0.00054131360957399011, 0.00067173171555623412, 0.00049992010463029146, 0.0012739014346152544, 0.00077394262189045548, 0.00066857383353635669, 0.00094832450849935412, 0.00052158191101625562, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -1165, -527, -19779, 27829, 21424, 5114, -3329, -4701, 20745, 6097, 26643, 26894, -6735, 13638, 37197, -25952, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00039759182254783809, 0.00022904400248080492, 0.00027245216188021004, 0.00025177063071168959, 0.00034358838456682861, 0.00031182458042167127, 0.00026629611966200173, 0.00034615315962582827, 0.00021282651869114488, 0.00028217813814990222, 0.00034750468330457807, 0.00071991747245192528, 0.00037888012593612075, 0.00042593938997015357, 0.00054805399850010872, 0.00031957559986039996, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -8,5,-10,17,51,60,-37,-20,37,2,5,8,11,22,19,56,-8,-19,-3,5,89,-54,25,-20,-29,-46,-37,-101,-8,-4,37,35,127,-13,13,10,2,-33,-22,0,-41,6,12,-40,1,-21,-8,31,-19,23,5,-8,-37,-26,14,6,38,28,-18,-31,-63,31,-12,-17,13,11,60,0,-6,4,3,-38,-68,-10,-9,5,2,-84,16,-17,45,-14,-59,-48,31,-17,-3,16,5,-6,9,-36,35,18,-11,127, 
  /* [1][0][][] */ 69,-112,61,81,-25,-93,-39,-33,-22,-100,-11,24,-4,-52,-43,-62,-110,-11,11,32,-22,-127,-53,45,116,-64,-81,29,-48,114,-16,32,4,-7,0,26,-26,-23,85,-30,5,-64,77,-15,-66,1,59,2,35,18,13,-57,66,-80,37,-17,21,14,-22,-94,39,-51,4,-70,-1,-113,39,39,18,60,-47,-15,-97,43,-15,46,28,113,30,-21,30,2,-102,52,-113,71,-25,52,-42,25,34,10,11,-44,37,12, 
  /* [2][0][][] */ 26,1,10,-21,11,-6,7,24,63,-16,18,78,-22,3,60,11,-10,-13,9,-11,-25,-53,19,-38,10,5,-19,32,10,20,104,-53,29,-84,-24,60,20,127,-45,-27,15,-29,7,18,-46,-48,-40,24,19,25,-36,-15,18,16,-10,-41,-17,13,0,46,14,14,75,90,3,-59,4,-63,0,1,-3,20,-12,10,-23,19,22,56,3,14,28,78,23,-29,-17,11,20,24,10,23,4,-41,-42,14,-5,71, 
  /* [3][0][][] */ -8,-16,-31,28,33,0,17,-37,-11,23,11,13,-5,-21,54,4,51,-25,21,-4,-18,-13,6,-9,-9,12,14,4,36,-38,47,-8,21,5,-35,47,-8,5,-29,8,12,-76,21,-40,2,6,13,0,-127,25,-9,28,-115,-36,-13,-54,17,26,-11,52,-3,10,14,27,-9,-74,-48,17,64,15,3,39,-45,11,-15,-30,-43,-55,21,-36,25,-23,27,46,48,53,44,22,13,-3,-17,19,-30,2,-13,-20, 
  /* [4][0][][] */ -5,-49,27,-63,-9,-23,-36,5,-31,-51,-33,5,3,75,18,2,45,-24,12,-7,-17,30,74,10,-1,5,23,30,16,2,-7,-11,-15,-11,7,26,30,-32,-7,-12,16,3,-85,-42,27,0,0,-6,-5,90,-13,-21,-32,-5,7,-19,10,-34,18,46,16,7,9,-5,43,-101,16,-12,-47,22,-11,13,-15,11,-31,29,-20,70,46,0,22,9,127,-52,31,-15,-15,2,66,17,1,14,-31,27,-2,-40, 
  /* [5][0][][] */ -14,-9,9,-10,-21,-26,-1,122,50,-25,-22,-22,-23,21,43,24,-30,-20,-2,-37,-56,-11,-10,-36,5,8,17,88,78,5,56,44,-50,8,0,-2,-60,-55,-35,-10,-22,-16,-8,-13,55,18,9,25,5,22,-13,7,-26,-8,-3,-18,-11,-38,-10,40,-42,24,-27,-42,-1,23,-18,20,-3,18,4,6,31,-2,6,-12,2,34,-4,121,-8,-42,14,26,-2,-2,15,-28,-5,-10,22,-127,-37,-22,-5,-123, 
  /* [6][0][][] */ -37,-18,8,-70,-19,-46,-36,32,-7,12,-33,-11,31,-59,-12,-24,-21,-89,21,35,1,6,-36,47,86,-25,-13,-3,8,-13,7,-21,-41,-9,1,-2,16,-8,44,44,-3,-17,-69,-21,-15,-24,19,-127,24,46,25,6,12,-7,-10,-38,51,-33,-5,12,23,34,-7,-3,33,66,44,-18,-40,-11,4,-44,21,-2,56,-20,-32,39,10,-1,-37,2,41,-19,-9,51,11,-47,34,2,-33,-9,-26,5,-12,17, 
  /* [7][0][][] */ 23,24,31,-24,-2,12,1,-44,0,-6,-10,-16,-11,-98,29,13,3,-24,-12,-6,14,-19,-37,-11,-17,-7,3,-24,13,16,10,9,-15,19,-27,-21,4,2,-38,17,4,-23,-16,32,1,13,-16,71,-3,21,-21,-22,-24,5,0,-69,29,9,-8,10,-5,1,-5,0,-20,48,9,-27,-1,-9,6,54,-15,-6,-11,9,48,-4,-5,-26,7,-39,48,-4,-22,127,-1,7,-36,-23,-9,28,-30,7,-5,5, 
  /* [8][0][][] */ -60,35,-35,10,43,-25,-9,29,8,53,-50,18,8,36,67,-24,-22,22,-89,13,15,27,-17,-5,-41,-25,17,39,74,-74,0,-14,54,-11,17,4,-28,51,-31,39,1,13,13,-127,-50,6,78,-12,-60,41,-3,55,-104,83,22,-10,15,-28,-30,-3,9,-30,4,41,-42,34,25,-16,-7,6,41,68,-32,32,47,29,-2,-74,-16,-33,-1,-14,15,-16,-56,15,9,-43,8,36,-30,10,27,-7,-14,-8, 
  /* [9][0][][] */ 16,-64,-17,-40,15,48,-10,3,25,-7,7,21,-48,-37,0,33,-2,2,42,-22,-38,-9,-25,-42,40,13,21,-1,-23,-32,-30,14,4,10,-11,36,9,57,-62,12,8,-12,-20,-108,2,-2,39,-126,-47,9,-1,23,-6,21,-11,-11,-61,37,-19,21,30,5,21,32,24,127,31,35,29,-11,22,2,-15,-20,-36,22,54,-15,15,3,0,1,20,-59,10,27,5,-6,-58,28,-41,14,1,22,8,-34, 
  /* [10][0][][] */ 25,44,-11,32,53,-127,-14,-18,-4,42,29,11,-21,-2,22,-85,5,25,-35,36,-87,-13,-16,-16,-66,-20,-52,64,8,22,7,31,-15,-27,46,-15,72,-24,-3,-8,-2,68,53,-21,-62,-19,-45,19,-15,-7,-40,-13,-17,-2,-13,-21,19,15,-25,-8,8,12,-18,18,0,39,46,38,16,-1,31,50,-45,-22,-58,-20,-1,33,-27,0,22,-8,-75,-39,42,-34,77,-9,-15,33,33,-7,72,39,-13,-121, 
  /* [11][0][][] */ 40,31,-25,15,4,10,49,-3,0,-11,-21,-13,4,-6,40,7,-13,-18,-87,-4,-3,3,1,-17,-44,-20,-11,17,18,24,2,1,7,-2,-10,22,2,23,-6,15,0,9,50,-108,24,-24,11,-4,-127,31,11,-53,27,23,-6,1,-11,-15,4,4,16,-17,-1,17,-50,52,-15,7,8,-13,34,12,-63,-29,16,34,-6,-32,-59,6,16,10,84,33,14,-4,-14,-15,-5,11,-29,3,-5,15,-20,6, 
  /* [12][0][][] */ -51,-10,11,2,-31,29,0,-5,127,5,-15,18,4,16,-46,-50,18,16,7,76,47,24,4,-25,-7,-5,9,-36,-121,15,32,-39,16,4,-8,-25,19,-4,28,-21,-47,-30,-1,9,4,34,21,5,6,11,-47,9,19,-12,4,-6,84,-23,3,23,15,-17,13,-19,-13,34,-41,-5,-6,22,-18,-32,26,0,-79,7,23,-19,6,-78,-8,9,39,41,-26,-15,-29,-29,8,13,-3,43,-20,-27,15,6, 
  /* [13][0][][] */ 37,-18,-23,26,22,-13,3,13,-15,-2,16,0,15,-17,2,-26,16,-76,-42,22,-12,-14,20,4,4,5,4,-1,-19,-40,-2,8,-4,-6,24,42,18,-12,13,19,1,19,20,42,14,20,-19,-127,29,-8,2,5,-22,-8,9,10,-11,8,23,12,16,24,-7,0,-7,-24,-13,-55,0,15,-9,-46,-10,37,-15,11,-33,13,20,-5,26,-13,-19,26,8,35,6,18,3,-7,22,-18,8,8,-12,-14, 
  /* [14][0][][] */ -103,-49,32,45,18,-34,-47,19,-12,12,-3,2,60,16,-127,-3,66,-16,-12,38,-4,-10,20,24,-106,-1,27,-13,-57,-62,-22,-8,-21,9,29,-65,26,17,19,18,12,41,-14,-21,7,103,40,55,-90,39,11,19,-50,-21,27,5,3,1,64,41,26,48,6,33,0,-28,-30,28,-7,60,-50,-85,-64,3,-6,34,-20,46,89,1,32,14,33,40,37,9,38,27,27,31,57,-10,1,7,16,-24, 
  /* [15][0][][] */ 95,-20,22,-1,0,72,19,-8,-11,62,15,5,-64,-4,-13,35,13,45,52,-11,23,30,-70,60,27,4,42,-12,21,30,-50,-82,21,-60,55,3,33,-35,-46,-100,-11,36,1,35,1,54,-24,-50,105,-55,-53,26,29,-112,57,-88,0,-55,19,4,-127,10,11,3,85,-27,-55,37,-18,71,-40,-1,39,40,24,-1,31,-48,74,-10,-5,-3,44,79,-16,-9,-8,-58,17,-6,52,-13,-53,45,24,-10, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.016897652298212051, 0.0097343698143959045, 0.011579216457903385, 0.010700251907110214, 0.014602506533265114, 0.013252544216811657, 0.011317584663629532, 0.014711509458720684, 0.009045126847922802, 0.011992570944130421, 0.014768948778510094, 0.030596490949392319, 0.01610240526497364, 0.018102424219250679, 0.023292293772101402, 0.013581962324678898, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10018, -8613, 2796, 47779, -1516, -4950, -10887, 1876, -2957, 565, 3144, -965, 1210, -4374, 5666, -6758, -427, 17858, 24913, 2564, 2926, -2479, 246, 373, 16039, -951, -2529, -3434, -5245, -7776, 8080, -8839, -384, -2084, -920, 11793, 1090, -4706, 22007, 874, -178, 1825, -8732, -7547, -7861, 69089, 12, 16572, 29322, -13539, -857, 6286, 7527, -418, -6391, 2330, -10935, 1532, 2766, -7008, -2105, -849, -11026, -1982, 1617, 16505, 28922, 29407, -11809, 22, -8396, -561, 50957, 9891, -161, 760, 19414, 33241, -102, -4813, -1799, -1869, 1254, -3222, 981, 1517, 2176, -743, 1830, -2701, 510, -1329, -143, -444, 44, 49339, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020318487077020109, 0.00014254437701310962, 0.00026297438307665288, 4.361302126199007e-05, 0.00015434612578246742, 0.00017318592290394008, 0.00035722187021747231, 7.6469805208034813e-05, 0.00010793371620820835, 0.00037413425161503255, 0.00018000448471866548, 0.00036084969178773463, 9.594205766916275e-05, 0.00045047170715406537, 0.00017293420387431979, 0.00010925267270067707, 0.00011130978964501992, 0.00031856322311796248, 5.9967434935970232e-05, 0.00021570459648501128, 4.0959963371278718e-05, 0.00019136993796564639, 0.0001691785582806915, 0.00033246751991100609, 0.00022489138063974679, 0.00027934531681239605, 0.00013539982319343835, 0.00020729027164634317, 0.0001089538709493354, 0.00010094897879753262, 0.00010640195978339761, 0.00017726882651913911, 0.00013373847468756139, 0.00013434987340588123, 0.00022897815506439656, 0.00019985689141321927, 0.00043555800220929086, 0.00013202939589973539, 5.9731624787673354e-05, 0.0001527963177068159, 0.00021122542966622859, 0.00031516890157945454, 0.00043311869376339018, 0.00015970569802448153, 0.0001678423723205924, 5.2098526793997735e-05, 0.00022896559676155448, 0.00020380798378027976, 9.0542627731338143e-05, 0.00017542763089295477, 0.00015561285545118153, 0.00019425951177254319, 0.00023287412477657199, 0.00028442006441764534, 0.00025036113220266998, 0.00048025115393102169, 0.00036358734359964728, 0.0002201376628363505, 0.00013012503040954471, 8.6294763605110347e-05, 0.00029749207897111773, 0.0001465225504944101, 0.00032208312768489122, 0.00013638338714372367, 0.00023043293913360685, 0.0001800445606932044, 7.689895574003458e-05, 6.157565803732723e-05, 0.00037363977753557265, 0.00027191941626369953, 0.00021903264860156924, 0.00010740797006292269, 0.00011251288378844038, 0.00016531396249774843, 0.00016031156701501459, 0.00024684640811756253, 0.00055677362252026796, 5.6411623518215492e-05, 0.00029504217673093081, 0.00039737005135975778, 0.00016851203690748662, 0.0010947457049041986, 0.000104990613181144, 0.00018566184735391289, 0.00013395289715845138, 8.912970224628225e-05, 0.00014162229490466416, 0.00017839306383393705, 0.00023231770319398493, 0.00012438712292350829, 0.00023563901777379215, 0.00011815061589004472, 0.00015670845459681004, 0.00043134926818311214, 0.027767729014158249, 8.110628550639376e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,8,-19,105,-18,26,-61,-54,16,-4,98,-9,3,-9,-3,56,4,14,-37,3,74,3,32,-36,2,18,46,47,23,13,23,46,-6,30,12,-15,5,48,-59,-27,18,9,26,20,-86,-60,26,-4,-12,-19,-6,-7,48,5,-8,2,-4,-35,26,-31,28,-3,127,27,-13,-11,11,-55,64,35,2,-8,76,-33,72,3,16,-127,30,63,1,15,127,-13,38,29,-30,-19,36,-5,-16,84,0,20,-2,12, -49,16,-7,11,51,-6,-10,-127,37,14,-127,-5,-17,-13,5,88,16,-31,-13,-16,79,-96,127,25,-60,-30,-103,-15,28,36,-49,17,122,16,-12,-2,-24,127,-62,-127,8,-18,-31,15,47,-127,127,-43,-78,52,51,6,38,-64,32,57,36,42,-100,83,127,33,4,-19,43,-39,-97,-2,35,-31,-17,47,-48,-47,106,-5,-31,-60,-33,64,-65,62,-16,9,-11,48,53,-41,-28,53,-14,74,-127,-31,23,-127, 0,-2,-22,-72,7,22,38,22,-4,0,3,62,0,-12,-10,10,-13,17,-18,17,7,25,23,-35,0,-30,12,11,-5,5,46,-79,47,19,8,-23,13,5,-34,-22,6,2,-18,10,24,-34,20,1,7,-4,7,-6,4,6,-5,8,-7,45,7,-3,12,-18,2,-17,-27,-18,29,-51,-106,-8,41,-18,-127,-21,-10,15,10,-13,6,11,-13,23,-36,-4,-40,21,25,36,-25,-15,24,-9,19,7,-2,-46, 
  /* [0][1][][] */ -40,60,-16,38,-86,-14,-9,-44,25,96,-44,-21,-32,-26,-5,65,127,-24,-94,-14,57,-127,-28,14,-35,-46,-126,-8,39,35,-50,27,-125,-75,-52,4,66,-1,-53,46,-20,86,1,-2,35,-54,-13,-31,127,44,-3,20,43,10,-35,-17,31,10,-127,127,-36,-87,20,127,-59,-36,-82,126,-36,127,-18,54,-36,-53,38,7,-35,-70,127,48,127,36,5,0,127,27,-98,48,-37,-35,-103,42,95,102,28,-58, 127,127,127,127,-47,-127,127,24,127,-127,14,-127,-106,127,127,127,-17,-127,-63,-127,127,22,-67,127,127,127,-53,-127,127,127,-127,127,-7,-127,-120,127,-127,-43,92,109,-127,-127,127,127,127,-116,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-42,41,-106,-27,-70,-65,127,127,-70,127,127,-106,-127,127,-41,127,-127,-127,-127,124,-76,127,-42,127,76,127,-38,-127,-27,-106,-127,-127,-23,-127,-22,-127,-127,117, -24,68,-37,3,127,74,-20,49,4,24,-14,-7,-25,-29,-13,-6,-105,-22,-127,39,30,76,-11,-119,-34,-40,127,70,11,34,72,8,127,-48,127,-4,56,5,-96,13,35,24,-25,0,-22,-52,-13,-42,82,18,-11,39,-6,-5,-74,-13,24,20,127,-87,2,127,-1,-35,-111,-30,-75,100,15,-17,112,25,-20,-54,14,45,-29,-8,-45,-2,-46,8,46,23,-89,34,127,-45,32,-22,127,-9,-112,34,33,17, 
  /* [0][2][][] */ -4,-43,-20,-59,-5,15,41,33,-3,10,-20,53,23,-35,-7,8,39,2,6,21,-7,30,-16,-27,2,-23,11,4,-11,-6,48,-75,-40,69,-24,-25,30,-34,-59,16,8,10,-32,19,12,-82,-12,0,-10,9,17,-7,7,1,-22,6,1,44,-51,34,-4,-12,5,19,-8,-10,23,-53,-55,12,-18,-10,-118,-28,0,16,15,-10,57,17,23,21,-41,16,11,24,-21,10,5,23,22,-4,20,40,-7,-31, -28,-13,-25,25,-45,77,-24,67,4,-6,54,-13,127,-7,-17,-16,-2,-41,-61,24,-19,79,-44,-114,-46,-46,103,69,12,42,53,-2,-126,67,-13,-23,-28,-26,-127,-5,43,-13,-14,38,-27,-44,-18,-47,-61,30,70,25,-12,-81,30,53,18,26,74,-54,23,-56,-9,2,18,-27,-127,-55,-10,-26,-61,26,35,-43,-28,-8,-45,22,-57,1,50,33,17,11,4,61,-93,127,15,123,-30,-17,114,-21,46,80, -10,-37,-25,28,12,66,-42,15,3,-6,0,13,12,-49,-9,-12,-45,-6,17,21,-21,5,-19,5,-4,20,0,51,-3,-6,33,28,19,46,22,-23,-5,-26,-36,8,11,-10,21,9,-75,-33,-13,5,-2,-14,0,-4,-9,8,-17,-5,0,-50,11,-27,-20,47,9,-28,-10,-3,33,-55,46,7,54,-18,28,-52,-16,21,10,12,-6,22,-29,32,91,-15,-18,53,37,-8,108,12,3,-18,10,-22,-7,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0086353570222854614, 0.0060581360012292862, 0.011176411062479019, 0.0018535533454269171, 0.0065597100183367729, 0.007360401563346386, 0.015181928873062134, 0.0032499667722731829, 0.0045871827751398087, 0.015900705009698868, 0.0076501904986798763, 0.015336111187934875, 0.0040775374509394169, 0.019145047292113304, 0.007349703460931778, 0.004643238615244627, 0.0047306660562753677, 0.013538937084376812, 0.0025486159138381481, 0.0091674448922276497, 0.0017407984705641866, 0.0081332223489880562, 0.0071900887414813042, 0.014129869639873505, 0.0095578832551836967, 0.011872176080942154, 0.0057544922456145287, 0.0088098365813493729, 0.0046305395662784576, 0.0042903316207230091, 0.0045220833271741867, 0.0075339251197874546, 0.0056838849559426308, 0.0057098697870969772, 0.009731571190059185, 0.0084939179942011833, 0.018511215224862099, 0.0056112492457032204, 0.002538593951612711, 0.0064938436262309551, 0.0089770806953310966, 0.013394678011536598, 0.018407544121146202, 0.006787491962313652, 0.0071333008818328381, 0.0022141872905194759, 0.0097310375422239304, 0.0086618391796946526, 0.0038480616640299559, 0.0074556744657456875, 0.0066135465167462826, 0.008256029337644577, 0.0098971500992774963, 0.012087852694094181, 0.010640347376465797, 0.020410673692822456, 0.015452462248504162, 0.0093558505177497864, 0.0055303135886788368, 0.0036675273440778255, 0.012643413618206978, 0.0062272083014249802, 0.013688532635569572, 0.0057962937280535698, 0.0097933998331427574, 0.0076518934220075607, 0.0032682055607438087, 0.0026169654447585344, 0.015879690647125244, 0.011556575074791908, 0.0093088876456022263, 0.0045648384839296341, 0.0047817975282669067, 0.0070258434861898422, 0.0068132416345179081, 0.010490972548723221, 0.023662878200411797, 0.0023974939249455929, 0.012539292685687542, 0.016888227313756943, 0.0071617616340517998, 0.046526689082384109, 0.0044621010310947895, 0.0078906286507844925, 0.0056929979473352432, 0.0037880123127251863, 0.0060189473442733288, 0.0075817047618329525, 0.0098735019564628601, 0.0052864528261125088, 0.010014657862484455, 0.0050214012153446674, 0.0066601093858480453, 0.018332343548536301, 1.1801284551620483, 0.0034470169339329004, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 16308, 1213, 6285, -605, 4273, 4263, 12880, 5269, -1085, 12581, 5889, 2183, 5795, 22252, -335, -1913, 8698, 9423, 2193, -130, -579, 13016, 4580, 3434, 6749, 4088, 4901, 5247, -44, -39, 4586, 10435, 13069, 2130, 4583, -551, 17088, 11009, 801, 3332, 811, 10041, 11127, 3592, 3507, 13083, 15519, 6612, 4383, 3959, 243, -643, 16565, 7131, 7722, 11304, -301, 8045, 3264, 3733, 11068, 5090, 3508, 9949, 4885, 4441, 6963, -722, 17282, 7688, 5772, -1112, -1703, 3009, 1417, 3151, 20853, 13301, 12426, -2380, 4846, -5030, -1501, 501, 5646, 3760, 6110, 3337, 10350, 3840, 6927, 3422, 13979, 18704, -10751, 13043, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00016019736358430237, 0.00026409508427605033, 0.00020704751659650356, 0.00092181790387257934, 0.00037580516072921455, 0.00020702906476799399, 0.00023967611195985228, 0.00067319319350644946, 0.00042367758578620851, 0.00014348921831697226, 0.00024253223091363907, 0.00038003650843165815, 0.00047792657278478146, 0.00021396168449427933, 0.00033724028617143631, 0.00037190195871517062, 0.00025574452592991292, 0.00025065930094569921, 0.00024030508939176798, 0.00091703998623415828, 0.00040182785596698523, 0.000190710139577277, 0.00032849045237526298, 0.00023617540136910975, 0.00026279091252945364, 0.00049801619024947286, 0.00028561495128087699, 0.00018174733850173652, 0.00070645497180521488, 0.00036173773696646094, 0.0003121968184132129, 0.00018020800780504942, 0.00015031080693006516, 0.00050368299707770348, 0.00036296143662184477, 0.00045489324838854373, 0.00013258811668492854, 0.00023488819715566933, 0.00059485284145921469, 0.00028792503871954978, 0.0006384383887052536, 0.00018600111070554703, 0.00019350186630617827, 0.00019038056780118495, 0.00032223391463048756, 0.00025268335593864322, 0.00018579274183139205, 0.00022868749510962516, 0.00036510234349407256, 0.00022627454018220305, 0.00042668177047744393, 0.0010370700620114803, 0.00016155587218236178, 0.00022442085901275277, 0.00030521224834956229, 0.00016453432908747345, 0.0003947887453250587, 0.0002142086741514504, 0.00025522959185764194, 0.0004330301599111408, 0.00015107283252291381, 0.00027522104210220277, 0.00029330089455470443, 0.0002780047943815589, 0.00021526185446418822, 0.0002524133597034961, 0.00027560090529732406, 0.00045992512605153024, 0.00015495433763135225, 0.00015151982370298356, 0.00034035331918857992, 0.00044039409840479493, 0.00025497673777863383, 0.00042676605517044663, 0.00027822173433378339, 0.00041031892760656774, 0.00011543923756107688, 0.00033435295335948467, 0.00013291988580022007, 0.00051376287592574954, 0.00022211967734619975, 0.00040797473047859967, 0.00026505897403694689, 0.00051874044584110379, 0.00028300230042077601, 0.00040977407479658723, 0.00026896639610640705, 0.00040147436084225774, 0.00016585231060162187, 0.00041612872155383229, 0.00020101275003980845, 0.00048931228229776025, 0.00015293160686269403, 0.00014815552276559174, 0.00027387368027120829, 0.00025138855562545359, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 26,-41,127,102,90,-5,56,-66,108,-43,-37,-89,48,119,-29,-115, 
  /* [1][0][][] */ 70,44,-1,24,94,-42,-34,46,42,100,-64,127,8,-39,115,-76, 
  /* [2][0][][] */ 44,-47,11,13,-15,47,-57,102,-77,-58,2,88,20,-127,58,-103, 
  /* [3][0][][] */ 127,127,9,39,-110,2,-65,-33,2,-5,115,-44,-64,98,-58,-49, 
  /* [4][0][][] */ -9,-9,8,7,-33,27,-20,33,-56,-42,1,-14,0,-127,27,1, 
  /* [5][0][][] */ 88,-35,-19,1,-17,-95,-36,11,-4,18,-127,8,19,-17,-16,28, 
  /* [6][0][][] */ -100,-56,-29,122,-36,-2,-25,51,-127,-66,-86,-31,23,50,-12,86, 
  /* [7][0][][] */ -6,14,-75,46,39,-127,-23,43,5,-25,7,-7,8,22,-49,22, 
  /* [8][0][][] */ 32,-47,-5,-13,14,16,-63,-56,-17,15,-65,7,-127,4,-9,25, 
  /* [9][0][][] */ 26,-68,62,118,9,20,-8,-110,100,-127,-1,-37,-14,53,-65,53, 
  /* [10][0][][] */ -104,-58,48,-71,127,31,36,78,102,-96,-66,18,114,-102,-122,59, 
  /* [11][0][][] */ 45,0,-127,32,62,30,-31,46,-16,-30,-18,-4,0,10,-52,-4, 
  /* [12][0][][] */ 110,-50,-20,29,-3,-49,-61,-9,51,21,-127,-28,-40,-32,10,61, 
  /* [13][0][][] */ 24,-55,14,-64,53,-10,-64,-127,16,-17,25,-2,4,-20,27,15, 
  /* [14][0][][] */ -70,29,-88,-44,66,-127,57,-56,37,35,-5,-99,1,84,-7,39, 
  /* [15][0][][] */ 26,-13,51,44,46,-54,-39,5,16,-87,-63,-20,-127,-43,-16,55, 
  /* [16][0][][] */ -125,61,12,14,14,81,58,69,-17,26,127,9,17,4,15,-60, 
  /* [17][0][][] */ -23,-12,-39,-29,-27,21,42,61,-20,127,-13,8,-16,68,58,-1, 
  /* [18][0][][] */ -11,127,-51,-20,8,30,66,-85,11,122,-53,125,3,-44,27,-86, 
  /* [19][0][][] */ 13,-20,39,19,10,46,2,24,11,15,-40,-3,-127,0,-25,28, 
  /* [20][0][][] */ 110,-86,-7,-99,-27,29,28,-100,-62,4,-127,-32,42,32,68,5, 
  /* [21][0][][] */ 51,-28,127,55,-35,65,23,-5,5,21,-25,-17,-18,101,10,-1, 
  /* [22][0][][] */ 20,6,3,6,-20,17,35,127,34,-7,23,28,11,48,24,25, 
  /* [23][0][][] */ -21,43,-120,39,35,-127,10,62,-4,-7,2,22,-63,1,-14,46, 
  /* [24][0][][] */ 33,-64,-6,-61,47,8,-27,-16,27,40,65,79,-43,85,127,47, 
  /* [25][0][][] */ -127,-61,-47,21,21,28,39,-47,-55,13,-54,24,11,58,18,50, 
  /* [26][0][][] */ 19,2,40,5,-32,1,-45,77,-80,-44,-27,18,21,-127,39,-4, 
  /* [27][0][][] */ -97,52,-68,30,25,-10,2,44,43,-34,127,33,-15,9,-5,-10, 
  /* [28][0][][] */ -33,-4,16,26,-2,5,20,82,31,19,-25,-4,-127,-8,-16,47, 
  /* [29][0][][] */ -6,60,40,-38,42,-18,11,-15,-127,35,-39,4,1,40,-93,14, 
  /* [30][0][][] */ -8,7,-127,-34,26,-43,10,28,-21,-16,-2,-8,-25,-27,0,19, 
  /* [31][0][][] */ 127,-26,-104,12,40,-1,-41,64,-17,1,-72,-40,19,-2,-90,24, 
  /* [32][0][][] */ -112,57,36,23,-13,63,4,47,11,-24,127,3,-35,38,-6,-10, 
  /* [33][0][][] */ -2,-28,127,-19,-67,21,-2,-62,-5,12,-11,20,-9,13,46,20, 
  /* [34][0][][] */ -10,-39,-34,-88,12,34,14,-31,-9,-31,-10,-127,-2,9,27,12, 
  /* [35][0][][] */ 2,-54,31,41,39,-33,2,-34,-127,26,-31,7,-25,120,-28,-43, 
  /* [36][0][][] */ -99,38,-43,-3,-6,31,46,68,-11,35,127,-28,-16,28,18,-29, 
  /* [37][0][][] */ -22,21,127,-23,-108,-95,37,-22,40,36,-26,7,13,-78,67,37, 
  /* [38][0][][] */ 6,-13,-15,28,31,-53,-67,24,-15,-9,64,-6,127,18,-24,38, 
  /* [39][0][][] */ -9,-26,-21,-22,-44,-79,41,127,-44,-9,-29,-49,3,37,50,62, 
  /* [40][0][][] */ 60,-7,-21,-13,-24,62,-22,8,17,6,4,-4,127,1,-9,-5, 
  /* [41][0][][] */ -3,-27,-22,-127,48,4,-19,-89,4,-60,11,-52,13,5,-12,50, 
  /* [42][0][][] */ 48,33,12,111,-78,13,-61,17,-65,-50,67,-49,-12,127,-61,-5, 
  /* [43][0][][] */ 20,108,-16,127,28,20,37,-100,-36,56,-41,34,7,-48,63,22, 
  /* [44][0][][] */ -7,-13,-127,24,46,77,-43,48,-20,-23,34,-29,7,-24,-39,2, 
  /* [45][0][][] */ -10,19,-27,-127,-28,2,49,-29,-18,10,-50,7,0,-98,49,-18, 
  /* [46][0][][] */ 9,25,84,-45,14,-9,-66,27,6,-77,-36,3,5,127,76,-18, 
  /* [47][0][][] */ 5,-15,27,-56,-30,24,-63,43,-29,-44,26,30,-14,-127,43,13, 
  /* [48][0][][] */ 14,-7,17,-127,-16,-2,9,13,16,-32,18,-18,3,57,-6,57, 
  /* [49][0][][] */ 24,-44,6,127,117,-13,-24,58,-87,3,36,38,5,53,117,-15, 
  /* [50][0][][] */ -31,-69,89,-43,18,115,-57,-124,44,-36,127,25,91,-41,13,-110, 
  /* [51][0][][] */ 37,46,3,12,23,-7,-43,28,44,5,-7,127,21,30,28,-46, 
  /* [52][0][][] */ -23,56,127,9,13,-33,8,-45,-31,-1,-4,20,-6,61,-116,-26, 
  /* [53][0][][] */ 0,-19,-68,-127,-48,4,26,-50,-37,38,5,0,20,-49,67,20, 
  /* [54][0][][] */ 2,3,-16,-81,27,-1,-29,-9,62,-19,-1,-35,-1,127,23,33, 
  /* [55][0][][] */ -12,-35,-37,4,14,-28,-5,-127,7,-84,-10,-6,-14,-61,-50,-26, 
  /* [56][0][][] */ 26,29,22,60,-4,-31,10,127,21,-30,9,-43,88,-4,-50,36, 
  /* [57][0][][] */ 88,-46,127,3,-69,-27,6,-37,39,25,-109,10,46,-61,53,21, 
  /* [58][0][][] */ 127,98,58,91,-109,-28,-6,81,-27,35,83,-12,-86,-34,-52,-86, 
  /* [59][0][][] */ 112,-48,2,-3,-26,-32,-14,6,-29,10,-127,-12,14,-7,1,32, 
  /* [60][0][][] */ -127,34,10,-11,11,8,30,27,15,10,92,6,-25,-3,5,-37, 
  /* [61][0][][] */ -62,55,55,0,43,6,-85,-47,95,-68,88,-12,51,-31,-127,-68, 
  /* [62][0][][] */ -35,-27,-127,69,80,114,-13,110,15,-75,46,-6,-101,-18,-110,-34, 
  /* [63][0][][] */ -56,5,127,-45,-76,-61,36,-32,18,15,1,9,-2,-42,92,25, 
  /* [64][0][][] */ 38,58,-4,35,61,-14,56,-91,-21,127,-1,-4,2,-82,-13,37, 
  /* [65][0][][] */ 14,27,1,-31,59,11,-3,-127,-25,-91,-32,-52,7,-49,46,17, 
  /* [66][0][][] */ -127,7,-29,-1,-61,11,16,-41,-72,-29,-92,53,57,15,64,101, 
  /* [67][0][][] */ -2,-24,2,127,11,-4,-12,25,57,40,-1,1,-15,-53,-91,-19, 
  /* [68][0][][] */ 31,11,-9,127,-68,-34,6,-36,-52,19,-5,-46,-1,-59,-29,-46, 
  /* [69][0][][] */ 98,82,5,127,57,2,64,-92,5,103,4,77,18,-20,12,-10, 
  /* [70][0][][] */ 31,-18,15,-37,127,-13,33,32,62,-7,38,-14,27,67,38,51, 
  /* [71][0][][] */ 19,44,2,75,35,-127,-42,69,31,-87,0,13,9,-56,-46,44, 
  /* [72][0][][] */ -127,-62,-9,45,25,32,-27,19,-71,-25,-101,63,44,11,-12,110, 
  /* [73][0][][] */ -21,-19,-19,72,9,-14,13,-12,81,27,-6,-5,33,127,-73,-40, 
  /* [74][0][][] */ 41,-58,27,-32,-41,11,44,-41,-28,-28,-89,21,-127,-8,29,36, 
  /* [75][0][][] */ -21,-16,-39,127,-44,7,-4,-34,-74,17,-4,-49,-14,-55,-5,-32, 
  /* [76][0][][] */ -11,-29,-6,29,27,7,-37,-111,14,-127,4,16,-19,-9,30,-39, 
  /* [77][0][][] */ 127,-29,38,66,-38,-13,-58,-5,49,-15,-37,40,28,25,-63,37, 
  /* [78][0][][] */ -10,-10,37,14,20,-8,-90,57,66,-34,-81,-49,37,127,50,-43, 
  /* [79][0][][] */ -11,6,46,25,43,67,-49,-49,21,-52,73,-17,127,-20,-29,-43, 
  /* [80][0][][] */ -127,-67,-80,114,2,29,27,-5,-92,36,-106,17,56,-86,-5,43, 
  /* [81][0][][] */ 76,29,-80,44,127,96,-25,-19,7,-86,-2,-92,-19,-1,-124,31, 
  /* [82][0][][] */ 76,125,-29,36,-127,-27,-69,-14,-64,-10,87,-39,-52,80,4,-13, 
  /* [83][0][][] */ 127,39,14,-31,8,-18,-3,26,28,16,65,-22,-54,-31,-22,-63, 
  /* [84][0][][] */ 9,-56,-69,-26,29,18,-9,-127,-29,-69,11,13,-9,-16,5,-10, 
  /* [85][0][][] */ -30,-4,-44,-52,-16,-17,52,76,-17,127,-12,-52,18,51,65,-12, 
  /* [86][0][][] */ 101,-27,-5,7,1,-21,2,-36,4,6,-127,-3,21,16,-14,16, 
  /* [87][0][][] */ -24,29,16,-25,-5,60,-22,52,-1,-14,43,9,-3,-127,16,-3, 
  /* [88][0][][] */ 9,-32,-105,-64,41,-13,-16,-127,-1,-13,17,-38,-51,-16,43,-4, 
  /* [89][0][][] */ 10,-5,19,-120,48,26,-49,127,95,-75,55,8,-22,4,57,31, 
  /* [90][0][][] */ 28,18,-16,50,58,-35,107,-79,37,127,-34,33,6,-11,-32,-23, 
  /* [91][0][][] */ 32,-11,-33,-8,-3,-127,-9,-5,0,-2,-46,2,22,-19,14,32, 
  /* [92][0][][] */ 34,35,127,65,29,2,1,66,-32,44,-76,21,5,83,9,4, 
  /* [93][0][][] */ 119,-36,-42,-22,-15,-67,8,28,-36,55,-127,-8,-9,27,-22,56, 
  /* [94][0][][] */ 21,-28,51,90,127,-30,-13,73,1,-7,0,65,-7,126,-34,-84, 
  /* [95][0][][] */ -125,50,44,45,40,43,14,1,17,13,127,5,-11,26,-18,-33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00047109776642173529, 0.00077663327101618052, 0.00060887157451361418, 0.0027108208741992712, 0.001105142873711884, 0.00060881732497364283, 0.00070482358569279313, 0.001979681896045804, 0.0012459228746592999, 0.00042196354479528964, 0.00071322266012430191, 0.0011175861582159996, 0.0014054547064006329, 0.00062920432537794113, 0.00099173386115580797, 0.0010936645558103919, 0.00075207650661468506, 0.00073712226003408432, 0.00070667325053364038, 0.0026967702433466911, 0.0011816687183454633, 0.00056082772789523005, 0.00096600287361070514, 0.00069452892057597637, 0.00077279808465391397, 0.0014645329210907221, 0.00083991751307621598, 0.00053447048412635922, 0.0020774959120899439, 0.0010637743398547173, 0.00091808766592293978, 0.00052994373254477978, 0.00044202402932569385, 0.0014811975415796041, 0.0010673728538677096, 0.0013377198483794928, 0.00038990631583146751, 0.00069074361817911267, 0.0017493037739768624, 0.00084671087097376585, 0.0018774771597236395, 0.00054697971791028976, 0.00056903745280578732, 0.00055985851213335991, 0.00094760413048788905, 0.00074307445902377367, 0.00054636696586385369, 0.00067250902066007257, 0.0010736687108874321, 0.00066541315754875541, 0.0012547574006021023, 0.0030497468542307615, 0.00047509279102087021, 0.00065996195189654827, 0.00089754792861640453, 0.00048385161790065467, 0.0011609685607254505, 0.00062993064057081938, 0.0007505622343160212, 0.0012734263436868787, 0.00044426496606320143, 0.00080935179721564054, 0.00086251978063955903, 0.00081753806443884969, 0.00063302775379270315, 0.00074228044832125306, 0.00081046880222856998, 0.0013525172835215926, 0.00045567943016067147, 0.00044557944056577981, 0.0010008884128183126, 0.0012950816890224814, 0.00074981868965551257, 0.0012550052488222718, 0.00081817596219480038, 0.0012066386407241225, 0.00033947604242712259, 0.00098324299324303865, 0.00039088196353986859, 0.0015108396764844656, 0.00065319478744640946, 0.0011997449910268188, 0.00077946780947968364, 0.0015254773898050189, 0.00083223439287394285, 0.0012050364166498184, 0.00079095852561295033, 0.0011806291295215487, 0.00048772746231406927, 0.0012237237533554435, 0.00059112493181601167, 0.0014389370335265994, 0.00044973113108426332, 0.00043568594264797866, 0.00080538954352959991, 0.0007392668048851192, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -43820, 4679, 3672, -7365, -273, -8165, -10723, -40930, -1226, 25305, 29713, -6187, -2271, -23030, 42026, -46950, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00053980009397491813, 0.0008659401792101562, 0.00099425006192177534, 0.0011046953732147813, 0.00059714150847867131, 0.0010449613910168409, 0.001270527602173388, 0.00058053852990269661, 0.00064248713897541165, 0.00069796503521502018, 0.00082134606782346964, 0.0005451632896438241, 0.0011266277870163321, 0.0013718962436541915, 0.00047091668238863349, 0.00060220324667170644, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -23,-1,-27,9,34,3,-7,116,-46,24,51,-3,13,-14,-17,16,9,-18,-17,-13,63,-14,16,127,-20,97,5,-8,23,-17,21,-31,-12,46,18,-55,16,40,26,-15,-114,-19,13,39,35,26,-121,-50, 
  /* [1][0][][] */ -34,-7,19,17,-26,10,-6,49,-49,-34,5,-42,-19,-21,2,-3,-27,119,-8,18,9,6,-26,-19,27,-39,25,22,-23,-80,-35,19,-17,-7,35,-7,-7,-34,-1,14,-21,-30,127,13,5,-5,22,-11, 
  /* [2][0][][] */ -16,-12,-12,-37,-1,-69,4,-23,-1,8,10,25,18,14,-14,9,-3,-19,-27,-15,-8,-2,-1,-127,-15,72,-16,2,-2,-18,-2,-4,-14,58,8,2,25,13,23,8,-34,1,-26,-3,4,-4,15,10, 
  /* [3][0][][] */ -6,27,0,-31,-6,-3,6,-1,-26,-4,-6,37,-127,6,-10,-3,1,6,-21,0,-34,8,6,20,-8,-15,3,25,-9,12,3,22,3,6,13,21,-10,25,45,8,16,5,21,-29,12,-6,1,18, 
  /* [4][0][][] */ 35,-35,14,6,16,31,28,-21,-38,7,-15,-20,2,13,-3,14,29,-11,-90,2,-10,7,13,74,-3,-28,1,52,6,-79,13,11,13,-34,32,-127,18,31,0,20,-19,22,2,-30,-11,-13,12,3, 
  /* [5][0][][] */ 26,2,-13,53,-3,-2,7,24,1,-2,38,11,0,47,1,0,-26,16,25,0,7,2,-3,-28,-1,-45,9,-16,-7,-3,5,6,62,-127,6,26,-13,-14,15,7,-89,58,14,-7,-9,-2,-92,-11, 
  /* [6][0][][] */ 24,-1,7,4,-10,-2,-1,-18,0,8,-2,4,-17,6,5,3,-4,-13,127,7,5,7,13,-40,4,6,30,-10,-9,1,0,6,5,-18,33,-42,-2,-41,69,8,-5,-3,-8,6,-16,0,6,-9, 
  /* [7][0][][] */ -40,-17,-9,35,-14,76,-1,47,-4,29,-14,127,78,-4,-10,2,-6,-21,-11,-20,-34,-1,-14,71,3,-44,-51,-33,-15,-19,-16,-13,3,5,-26,7,13,-61,94,4,28,25,-58,-55,26,-13,-3,3, 
  /* [8][0][][] */ -54,-47,-2,9,0,11,3,33,5,-72,10,52,47,4,6,17,-7,59,-26,7,-48,21,-10,-19,6,-7,7,40,-11,127,-17,29,0,3,-10,-126,-110,62,33,35,15,2,116,-27,5,35,30,22, 
  /* [9][0][][] */ -24,-4,-9,25,13,-35,2,2,50,-39,5,52,-58,7,3,6,-2,13,-39,-16,47,6,-19,-12,3,3,42,-26,8,4,5,0,-8,25,74,-93,-6,-127,-92,14,-22,22,51,12,10,6,-17,-41, 
  /* [10][0][][] */ -23,-1,-28,-127,48,95,3,-11,4,38,20,14,47,-55,-34,21,36,-45,54,-37,34,-29,34,50,-44,-112,8,-31,44,43,42,-37,-28,-86,29,-9,18,-45,8,-38,-39,-59,-13,9,10,10,21,-41, 
  /* [11][0][][] */ 0,37,-9,76,40,-71,-77,-27,5,81,-21,3,2,58,-12,-72,25,61,6,-11,-70,-114,12,3,9,-56,31,-21,64,-53,28,-104,50,-15,-51,-94,97,15,-3,-127,5,82,99,-72,-11,-79,36,27, 
  /* [12][0][][] */ 120,2,-13,10,-3,17,5,102,17,-10,-57,-23,-4,12,-13,-8,-7,3,-11,-7,-1,0,2,21,-7,17,-5,4,-7,14,-10,1,0,-61,-5,9,-18,-19,-24,-3,-15,-77,6,-127,-57,-2,73,-2, 
  /* [13][0][][] */ 10,4,0,6,8,-8,-1,-1,2,8,6,22,-7,6,5,-1,4,-2,9,5,12,-12,6,-5,2,1,14,127,9,0,5,-2,4,-4,-33,18,10,-5,7,-15,-14,0,0,4,0,-1,-7,-11, 
  /* [14][0][][] */ 66,-20,50,-69,58,24,31,-105,-49,-61,-9,117,-69,-9,73,15,43,30,-50,70,19,11,76,-19,22,62,-25,-117,27,-42,65,35,-7,64,-127,-51,-41,54,86,3,-43,6,59,7,-10,-2,8,-23, 
  /* [15][0][][] */ -10,-42,-62,-28,57,37,76,-53,1,22,-8,-35,85,24,-99,55,62,55,88,-74,-97,-20,68,-26,-89,45,30,57,56,56,48,-49,30,53,91,127,-18,-108,-9,-42,83,63,123,-51,-7,-34,-9,72, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.022941503673791885, 0.03680245578289032, 0.042255628854036331, 0.04694955050945282, 0.0253785140812397, 0.044410858303308487, 0.053997423499822617, 0.024672888219356537, 0.027305701747536659, 0.029663514345884323, 0.034907206892967224, 0.023169439285993576, 0.047881681472063065, 0.058305587619543076, 0.020013958215713501, 0.025593636557459831, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 3469, 33021, -1162, 50974, 4999, 125941, -2018, 52006, 7623, 30307, 29427, 3539, -2375, 32467, -850, -1492, -197, 1387, 3498, -2077, 563, -3332, 200, -22152, -5292, 40462, 134503, 101943, 3604, 1367, -3764, -539, 27013, -940, 25667, 6032, 35291, 3120, 58968, 2230, -666, 62160, 1297, 5295, 46827, 23, 4529, 50388, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.6142096077091992e-05, 3.9252197893802077e-05, 0.0001603695418452844, 4.5982644223840907e-05, 0.00014141923747956753, 6.7142405896447599e-05, 0.00015004516171757132, 0.00010994584590662271, 5.6986533309100196e-05, 4.078049460076727e-05, 5.773819430032745e-05, 8.9926128566730767e-05, 4.7839872422628105e-05, 3.9170692616607994e-05, 0.0001713777455734089, 0.0001935995533131063, 0.00019786570919677615, 6.9032146711833775e-05, 0.00010473893053131178, 0.00015388851170428097, 8.6125772213563323e-05, 0.00015135813737288117, 0.00010556217603152618, 0.00015404168516397476, 0.00010937059414573014, 0.00011292576527921483, 3.5746277717407793e-05, 6.9613182859029621e-05, 0.00012667225382756442, 0.00014786100655328482, 0.00011182589514646679, 0.00014558112889062613, 5.0006485253106803e-05, 0.0001889365230454132, 3.1897950975690037e-05, 4.6995824959594756e-05, 0.00016393404803238809, 9.2077665613032877e-05, 9.4488037575501949e-05, 0.00012107394286431372, 0.00012988784874323756, 9.4448943855240941e-05, 7.5304873462300748e-05, 7.5499840022530407e-05, 2.8632846806431189e-05, 0.00016472255811095238, 8.3643783000297844e-05, 3.1649109587306157e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-94,97,70,52,-33,107,-64,61,-90,-80,47,54,-43,-72,-91,103,78,49,77,65,-73,-83,52,-32,-40,-64,-65,-67,61,-61,-114,-12,40,69,64,-65,53,-49,-22,51,-73,57,62,-94,10,77,-34, 81,-97,127,85,-78,-67,-59,-83,96,-103,-62,74,80,-107,-95,90,-39,96,84,127,85,-113,51,71,-51,-78,-68,-81,54,79,-29,-127,-84,79,81,83,-82,83,-82,-16,76,-95,83,89,-74,-127,94,-102, 35,-48,69,37,17,-41,-49,-40,41,-31,4,35,30,-79,-56,-2,-55,37,35,68,32,-54,31,25,-29,-47,-44,-23,30,31,88,-89,-82,45,35,34,-29,38,-37,-11,40,-40,34,44,-6,-9,37,-72, 
  /* [0][1][][] */ 93,-112,-42,95,55,-82,127,-88,88,-113,-71,81,85,-110,-14,-127,127,107,76,-38,82,108,-127,72,73,-76,-93,-98,-127,86,-68,-7,-88,70,106,96,-85,80,-80,89,84,-100,87,91,-89,106,94,-90, 127,-127,-66,127,-127,-127,-93,-127,127,-127,-127,127,127,-127,-23,95,-67,127,127,-50,127,127,69,127,127,-127,-127,-127,52,127,-28,18,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-78,-34,68,38,-62,-50,-62,55,-43,-58,57,48,-54,-16,10,-64,49,60,-30,58,64,50,64,68,-64,-61,-45,35,53,127,16,-62,71,47,50,-49,60,-59,56,60,-58,53,62,-62,-67,59,-56, 
  /* [0][2][][] */ 46,-50,-45,49,25,-52,63,-42,40,-74,-6,38,57,-71,82,-80,73,48,34,-31,25,-9,-76,30,-24,-44,-49,-49,-75,31,-40,93,-73,37,48,42,-26,37,-42,-88,47,-51,41,46,-26,15,41,-73, 73,-76,-48,81,-57,-63,-73,-67,51,-78,-65,61,74,-47,127,31,-48,58,61,-42,54,-17,42,67,-49,-67,-76,-62,30,62,-23,120,-56,66,56,56,-49,61,-66,-105,69,-67,60,62,-83,49,63,-55, 40,-41,-28,48,28,-19,-18,-33,15,-27,-52,28,31,3,68,23,-37,20,29,-32,28,1,39,41,-24,-28,-46,-25,32,33,61,67,-1,35,15,22,-22,29,-28,-55,29,-33,25,29,-63,9,29,-6, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003236039076000452, 0.0016682184068486094, 0.0068157054483890533, 0.0019542623776942492, 0.0060103177092969418, 0.0028535521123558283, 0.006376919336616993, 0.0046726982109248638, 0.0024219276383519173, 0.0017331710550934076, 0.0024538731668144464, 0.003821860533207655, 0.0020331945270299911, 0.0016647543525323272, 0.0072835539467632771, 0.0082279806956648827, 0.0084092924371361732, 0.002933866111561656, 0.0044514043256640434, 0.0065402616746723652, 0.0036603452172130346, 0.0064327209256589413, 0.0044863922521471977, 0.0065467716194689274, 0.0046482500620186329, 0.0047993450425565243, 0.00151921680662781, 0.0029585601296275854, 0.0053835706785321236, 0.006284092552959919, 0.0047526005655527115, 0.0061871977522969246, 0.0021252755541354418, 0.0080298017710447311, 0.0013556628255173564, 0.0019973225425928831, 0.0069671971723437309, 0.0039133005775511265, 0.004015741404145956, 0.0051456424407660961, 0.0055202334187924862, 0.004014079924672842, 0.0032004569657146931, 0.0032087431754916906, 0.0012168959947302938, 0.0070007084868848324, 0.003554860595613718, 0.0013450871920213103, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 545, 698, 1873, 502, 10474, 14049, 1973, -123, -592, -528, 961, 869, 2793, 1026, 19693, 2307, 1631, -1115, -303, 2532, -1452, 9271, 8522, 8017, 5134, 154, 3210, 3137, 7855, -435, 8372, 5022, 482, -280, 4342, 3104, -1489, 191, -641, 4163, 787, -522, -935, 170, 813, 2576, 532, 976, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00046056392602622509, 0.00095945346402004361, 0.0003025142359547317, 0.00032705123885534704, 0.00021184222714509815, 0.00028715291409753263, 0.00057526753516867757, 0.00026343768695369363, 0.00046785970334894955, 0.00087095308117568493, 0.0010747157502919436, 0.0003523920604493469, 0.00042948502232320607, 0.00072685180930420756, 0.0001824522769311443, 0.00056092848535627127, 0.00030492903897538781, 0.00039547361666336656, 0.00029818934854120016, 0.00035716188722290099, 0.00040997675387188792, 0.00027652032440528274, 0.00043629875290207565, 0.00019159329531248659, 0.00031355675309896469, 0.00034429569495841861, 0.0021624509245157242, 0.00060614803805947304, 0.0002218843437731266, 0.00052683218382298946, 0.00031165126711130142, 0.00023911308380775154, 0.00076715863542631269, 0.00026572871138341725, 0.00085541536100208759, 0.00059937417972832918, 0.00092289189342409372, 0.0003927887009922415, 0.00025647829170338809, 0.00044554102350957692, 0.00018785281281452626, 0.00026132553466595709, 0.00034782954026013613, 0.00031260578543879092, 0.0024310846347361803, 0.00054085918236523867, 0.00039605359779670835, 0.001236109877936542, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,6,3,70,-33,39,20,-27, 
  /* [1][0][][] */ 38,54,36,15,8,-39,104,127, 
  /* [2][0][][] */ -43,-4,4,-1,-127,-11,4,5, 
  /* [3][0][][] */ 102,-1,2,-118,-127,19,33,-32, 
  /* [4][0][][] */ -127,55,-37,-2,105,-15,65,44, 
  /* [5][0][][] */ -108,-21,20,-7,-127,6,14,89, 
  /* [6][0][][] */ -8,-127,9,-11,4,1,7,37, 
  /* [7][0][][] */ -75,-4,2,98,127,-36,-32,4, 
  /* [8][0][][] */ 66,-6,4,-127,-3,-22,-45,-37, 
  /* [9][0][][] */ 6,-127,-12,1,4,73,-47,93, 
  /* [10][0][][] */ -101,-4,-3,24,-127,66,61,-15, 
  /* [11][0][][] */ 100,9,41,17,-62,-42,-28,-127, 
  /* [12][0][][] */ 7,9,42,-8,15,-92,127,69, 
  /* [13][0][][] */ 66,-35,-15,-7,127,123,120,-33, 
  /* [14][0][][] */ 127,30,-36,6,-104,-5,-26,6, 
  /* [15][0][][] */ -6,-127,15,-10,-1,0,0,26, 
  /* [16][0][][] */ -43,-12,3,3,-127,-3,16,2, 
  /* [17][0][][] */ -23,103,-109,2,12,-127,93,-82, 
  /* [18][0][][] */ 127,-22,-32,13,-54,23,9,98, 
  /* [19][0][][] */ 127,-39,-16,-4,33,-14,32,17, 
  /* [20][0][][] */ 127,34,-9,97,-3,33,2,-52, 
  /* [21][0][][] */ 22,19,-79,15,-31,103,-127,-74, 
  /* [22][0][][] */ -127,27,34,-12,-18,9,-41,-33, 
  /* [23][0][][] */ -33,-48,2,20,-127,63,70,-20, 
  /* [24][0][][] */ 127,-2,-4,-10,-98,-7,27,-12, 
  /* [25][0][][] */ 25,-19,-2,-21,127,54,45,-34, 
  /* [26][0][][] */ 9,-85,6,-34,-1,-127,75,-55, 
  /* [27][0][][] */ -20,-127,26,-14,-4,-57,34,-7, 
  /* [28][0][][] */ -124,38,-19,24,4,-26,127,81, 
  /* [29][0][][] */ -6,37,14,9,-6,38,-98,-127, 
  /* [30][0][][] */ 127,-40,5,21,-88,8,-41,-19, 
  /* [31][0][][] */ -21,-17,63,-12,28,-121,127,62, 
  /* [32][0][][] */ -76,13,7,2,-127,-96,-94,51, 
  /* [33][0][][] */ -27,10,-4,23,-127,-61,-50,21, 
  /* [34][0][][] */ 17,-127,55,-3,-10,97,-76,63, 
  /* [35][0][][] */ -27,-49,-127,-11,-3,-69,43,-56, 
  /* [36][0][][] */ 9,127,54,4,-6,12,-25,-40, 
  /* [37][0][][] */ -127,41,44,-14,55,-36,-10,-103, 
  /* [38][0][][] */ -127,-18,-58,-24,40,28,35,114, 
  /* [39][0][][] */ -13,-16,70,-12,14,-85,127,78, 
  /* [40][0][][] */ -34,-23,-19,-36,-124,113,127,-25, 
  /* [41][0][][] */ -127,47,17,-77,-85,-88,-97,43, 
  /* [42][0][][] */ -33,-127,-100,-13,-5,69,-119,-83, 
  /* [43][0][][] */ -76,12,-7,-127,99,54,54,1, 
  /* [44][0][][] */ 127,-8,17,-79,31,-31,-9,40, 
  /* [45][0][][] */ -16,-127,-6,2,-20,-69,86,-5, 
  /* [46][0][][] */ 95,-10,-7,-25,127,-34,-25,7, 
  /* [47][0][][] */ 127,0,4,110,-1,46,2,-62, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0007712444057688117, 0.0016066675307229161, 0.00050657987594604492, 0.00054766866378486156, 0.00035474364995025098, 0.00048085630987770855, 0.00096332305110991001, 0.00044114360935054719, 0.00078346166992560029, 0.0014584679156541824, 0.0017996818060055375, 0.00059010356198996305, 0.00071920076152309775, 0.00121716083958745, 0.0003055282577406615, 0.00093931145966053009, 0.00051062362035736442, 0.00066224642796441913, 0.00049933756235986948, 0.00059809093363583088, 0.00068653287598863244, 0.00046305137220770121, 0.00073061080183833838, 0.00032083550468087196, 0.00052507128566503525, 0.00057654565898701549, 0.0036211654078215361, 0.0010150345042347908, 0.00037155984318815172, 0.00088221498299390078, 0.00052188039990141988, 0.00040041049942374229, 0.0012846572790294886, 0.00044498007628135383, 0.0014324489748105407, 0.0010036912281066179, 0.0015454428503289819, 0.00065775035182014108, 0.00042948967893607914, 0.00074608757859095931, 0.00031457180739380419, 0.00043760667904280126, 0.00058246328262612224, 0.00052347884047776461, 0.0040710102766752243, 0.00090570410247892141, 0.00066321762278676033, 0.0020699468441307545, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -41772, 24434, -12435, -11224, 22378, 1009, 36994, 44693, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00049268826842308044, 0.00073445303132757545, 0.0014137194957584143, 0.0016604945994913578, 0.00071916496381163597, 0.00064788374584168196, 0.00054560357239097357, 0.001010715146549046, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -62,-13,-36,17,17,-4,-2,0,-101,127,-34,111,113,21,75,-19,1,-29,-7,-4,-2,-5,-23,-33,39,-91,1,60,-8,15,20,-26,-1,-59,117,11,4,-9,-2,-7,97,-5,41,-15,-21,31,-15,-24, 
  /* [1][0][][] */ 0,34,127,11,-2,-19,4,-80,34,-3,20,-1,-21,3,-8,-112,8,-52,13,11,-22,33,23,-31,-20,-7,16,0,17,-6,11,-9,-11,13,13,12,-6,-28,61,-49,5,32,-6,30,-16,3,24,2, 
  /* [2][0][][] */ 3,-54,15,-46,34,29,-6,-29,6,5,-5,14,-15,58,9,1,-44,127,-25,-30,-18,26,-41,-12,124,-2,3,-1,-32,-6,2,-43,-10,-16,-4,8,-8,-8,-13,7,8,-23,-18,-2,5,22,-26,-42, 
  /* [3][0][][] */ -10,-85,-8,4,4,0,-11,-5,-9,-7,12,25,13,-10,47,2,-11,-26,-2,19,-6,20,-24,6,8,48,-6,6,-14,2,127,-1,14,6,-1,0,-24,-21,-13,10,-6,9,-5,25,-6,4,-3,25, 
  /* [4][0][][] */ -106,7,-5,0,3,-25,-3,10,51,-43,23,-26,-36,5,-9,-3,10,5,-3,24,15,-32,17,2,-7,49,2,108,7,1,-13,-26,8,-127,-34,4,6,-4,2,6,-60,-6,-12,23,-59,4,11,12, 
  /* [5][0][][] */ -20,14,11,3,-46,18,2,35,23,9,5,7,-5,-35,13,33,-4,-85,18,7,35,-42,3,36,12,1,-72,-44,-42,-26,11,-5,-7,-63,-2,-73,67,1,-42,11,20,-39,14,-1,127,-6,-40,-5, 
  /* [6][0][][] */ -25,-22,-18,-4,39,-40,0,-38,-21,-6,40,-18,-12,48,-5,-62,8,-2,-7,-37,-45,46,-8,-79,7,-2,-50,-68,22,48,-12,3,5,-68,-11,69,-78,-55,9,-65,-11,19,12,48,127,-33,46,9, 
  /* [7][0][][] */ 5,33,-77,22,-23,14,3,53,-5,-3,58,-27,12,-32,-5,-2,-11,-127,32,-42,57,31,16,-56,19,-20,16,6,-21,29,-12,0,-4,34,1,-21,-16,-61,-38,-67,-14,-24,40,57,-26,-12,-1,-3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020939251407980919, 0.031214253976941109, 0.060083076357841492, 0.070571020245552063, 0.030564509332180023, 0.027535058557987213, 0.02318815141916275, 0.042955394834280014, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52711, -446, 8780, 626, 6125, -4524, 1676, 22337, 394, 30062, -2618, 20003, -5792, -1052, 25301, 2861, 69, 19072, 32903, 10744, -216, -461, -1038, 13107, -8065, 25573, 45328, 34858, 3158, 468, -1174, 1034, 1651, 17542, -6360, 14050, -10659, 18295, -21935, 104020, 22720, 22064, 11580, -1548, 16387, 3165, 751, -107, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034017369034700096, 0.00029701853054575622, 0.0001848543033702299, 0.00027260137721896172, 0.0001461390929762274, 9.6179297543130815e-05, 0.00071081117494031787, 0.00015441427240148187, 0.00018369409372098744, 0.0001592123880982399, 9.9372933618724346e-05, 0.00021338200895115733, 0.00032016576733440161, 0.00021814243518747389, 0.00010042687063105404, 0.00053024344379082322, 0.00018875706882681698, 0.00021083162573631853, 7.146765710785985e-05, 0.00016699363186489791, 0.00023190100910142064, 0.00020198272250127047, 0.0001845410733949393, 0.00016648774908389896, 0.00015391754277516156, 0.00014635936531703919, 0.00068857683800160885, 9.4202325271908194e-05, 0.00025235561770386994, 0.0017166520701721311, 9.5393115771003067e-05, 0.00016083061927929521, 0.00052617071196436882, 0.00015962102042976767, 0.00019877919112332165, 0.00018105049093719572, 0.00036251763231121004, 0.00013518251944333315, 0.00028256891528144479, 2.321108513569925e-05, 0.00014181181904859841, 6.5673382778186351e-05, 0.00014074418868403882, 0.00016876152949407697, 0.00014750250556971878, 0.00011317309690639377, 0.00035435703466646373, 0.00012619805056601763, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-2,20,107,3,80,-1,28,16,8,9,7,-9,-9,-45,9,-1,8,-21,-114,-6,-22,127,-10,-2,6,-5,9,-6,4,17,100,21,28,37,-28,0,34,-2,2,18,-69,-9,-8,16,2,-5,-9, 127,10,15,-127,27,85,11,11,124,127,7,43,-51,-24,5,8,127,-56,-58,-56,-101,26,-108,15,16,70,-32,-82,22,21,10,-123,6,-60,127,10,-40,-47,-6,114,-78,-97,-29,2,-35,-9,-127,23, -32,-3,7,13,-2,63,4,18,29,8,-14,31,-16,-3,15,4,-102,29,-3,78,-31,-12,-17,-6,-4,-58,-2,30,-17,5,4,-21,9,-23,15,-19,-1,47,39,-12,50,39,-14,11,-44,2,-1,-6, 
  /* [0][1][][] */ 126,7,1,-98,13,-27,34,-16,9,9,-12,53,-7,-1,18,-32,1,-50,-58,-84,11,-73,-123,-18,5,97,-14,-127,-9,32,13,-109,17,-53,-3,127,-3,59,-41,41,-61,-127,38,-88,-45,-15,-11,-4, 27,-127,-127,114,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-82,127,127,-106,127,127,112,127,127,-127,-127,28,-127,-127,95,127,-127,127,-30,-42,127,-127,127,127,127,-79,127,127,127,-122,104,107, 53,5,49,-14,5,-61,44,19,-23,14,-104,-8,0,-41,127,5,63,-66,-72,87,15,-46,12,-34,2,6,-37,69,20,39,0,3,32,-44,7,66,-5,65,67,-10,-81,9,-83,-31,26,-16,-10,5, 
  /* [0][2][][] */ -52,-6,26,-17,7,33,-37,23,8,-24,12,32,4,-6,-38,18,5,22,-14,107,6,-31,-15,-13,-3,21,0,51,-11,3,47,-32,-18,-42,-32,-40,-1,31,8,-22,10,-3,40,-37,-37,17,-10,18, 69,125,76,20,16,-21,123,36,18,-3,44,26,-6,-1,-90,25,-57,-57,-37,123,-37,49,13,19,32,-64,-40,30,76,0,127,23,84,-25,6,-36,-26,-17,-13,117,-27,-11,-41,45,21,-33,9,-127, -41,-4,7,-4,4,-6,-61,9,-17,-10,-39,-40,18,-10,-8,12,33,23,-9,-127,25,-10,5,-10,-6,9,-10,-53,-15,8,5,10,-21,88,-37,-23,-5,37,24,-61,5,9,-38,7,-44,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014457381330430508, 0.012623287737369537, 0.0078563075512647629, 0.011585557833313942, 0.0062109115533530712, 0.0040876199491322041, 0.030209474265575409, 0.0065626064315438271, 0.0078069986775517464, 0.0067665264941751957, 0.004223349504172802, 0.0090687349438667297, 0.013607044704258442, 0.0092710535973310471, 0.0042681419290602207, 0.022535346448421478, 0.008022175170481205, 0.0089603438973426819, 0.0030373753979802132, 0.0070972293615341187, 0.0098557928577065468, 0.0085842655971646309, 0.0078429952263832092, 0.007075729314237833, 0.0065414952114224434, 0.006220273207873106, 0.029264515265822411, 0.0040035988204181194, 0.010725113563239574, 0.072957709431648254, 0.0040542073547840118, 0.0068353014066815376, 0.022362254559993744, 0.0067838933318853378, 0.0084481155499815941, 0.0076946457847952843, 0.015406998805701733, 0.0057452572509646416, 0.012009178288280964, 0.00098647107370197773, 0.0060270023532211781, 0.0027911188080906868, 0.0059816278517246246, 0.007172364741563797, 0.0062688561156392097, 0.0048098564147949219, 0.015060173347592354, 0.0053634173236787319, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 45576, 6121, 5181, 6770, 1463, 10015, -1580, -235, 789, 1932, 2824, 275, 1735, -805, 539, -1869, 3968, 9710, -216, 22641, 3457, 2654, 6436, -449, 3192, 5024, 23466, 9815, -38, -2144, 140, 1953, -1503, 8882, 2527, 6256, 6215, 3684, 20274, 1724, -774, 2582, 996, 3438, 4233, 1954, -1390, 2350, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 9.4310737040359527e-05, 0.00036609507515095174, 0.00028912624111399055, 0.00047441886272281408, 0.0015427464386448264, 0.00050520972581580281, 0.0012026728363707662, 0.001240719691850245, 0.00070636032614856958, 0.00070610002148896456, 0.00078976497752591968, 0.00055325770517811179, 0.00059421802870929241, 0.00059394090203568339, 0.00068072596332058311, 0.0019653306808322668, 0.00042054092045873404, 0.00043767050374299288, 0.0022238173987716436, 0.00011852985335281119, 0.00036272776196710765, 0.00037728258757852018, 0.00062228605384007096, 0.0011294803116470575, 0.00038316944846883416, 0.00023940808023326099, 0.00017166447651106864, 0.00037210009759292006, 0.000915484968572855, 0.0012256493791937828, 0.00058819592231884599, 0.0004259181150700897, 0.0012990196701139212, 0.00024955577100627124, 0.00040639215148985386, 0.00029352441197261214, 0.00059409654932096601, 0.00036968319909647107, 0.00011593260569497943, 0.0026365090161561966, 0.00076278054621070623, 0.0010797616560012102, 0.00049767916789278388, 0.00043981484486721456, 0.00028812160599045455, 0.00054866931168362498, 0.00083431659732013941, 0.0011261712061241269, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 73,40,1,-2,127,15,-38,-27, 
  /* [1][0][][] */ -10,-2,3,127,8,1,7,12, 
  /* [2][0][][] */ 47,-127,-27,40,-3,-79,84,3, 
  /* [3][0][][] */ 127,-22,-5,13,-17,-24,29,-4, 
  /* [4][0][][] */ 19,-51,127,-21,-12,-63,9,-95, 
  /* [5][0][][] */ 68,0,7,-23,127,21,-23,10, 
  /* [6][0][][] */ -27,81,-11,127,34,43,-67,-51, 
  /* [7][0][][] */ -11,127,-2,6,5,-13,17,-3, 
  /* [8][0][][] */ 127,54,9,8,-41,-18,-3,-40, 
  /* [9][0][][] */ -127,8,4,12,53,22,-7,2, 
  /* [10][0][][] */ -77,0,20,127,35,19,-26,1, 
  /* [11][0][][] */ -127,7,24,-59,44,9,-43,-46, 
  /* [12][0][][] */ 127,17,6,14,-49,-1,-1,-34, 
  /* [13][0][][] */ -8,79,-127,3,-3,106,-79,65, 
  /* [14][0][][] */ -46,-31,-8,127,11,12,12,-14, 
  /* [15][0][][] */ 0,127,6,-3,-1,-17,11,-51, 
  /* [16][0][][] */ 6,-127,-23,-2,-13,-83,106,-23, 
  /* [17][0][][] */ 9,127,2,-9,5,75,-85,-21, 
  /* [18][0][][] */ -1,38,-127,-5,-4,52,-26,60, 
  /* [19][0][][] */ -78,33,-5,-3,-127,-3,25,27, 
  /* [20][0][][] */ -127,-24,10,9,50,-22,27,12, 
  /* [21][0][][] */ -67,-14,0,3,-127,-6,19,10, 
  /* [22][0][][] */ -127,-20,-1,7,56,-11,39,45, 
  /* [23][0][][] */ -17,-28,-14,-7,-9,88,-127,-94, 
  /* [24][0][][] */ -7,39,-127,8,7,45,-15,70, 
  /* [25][0][][] */ 96,-42,-16,127,-80,-12,23,-34, 
  /* [26][0][][] */ 2,-17,-7,4,-12,127,126,-33, 
  /* [27][0][][] */ 61,-5,-1,14,127,43,39,-24, 
  /* [28][0][][] */ -4,127,-64,-3,1,74,-44,95, 
  /* [29][0][][] */ -2,15,-4,-9,-5,77,-127,-83, 
  /* [30][0][][] */ 3,-3,1,-127,-7,0,-3,-15, 
  /* [31][0][][] */ -59,15,-1,0,-127,9,10,-6, 
  /* [32][0][][] */ -19,21,-9,-127,9,18,-75,-71, 
  /* [33][0][][] */ -57,-15,4,4,-127,44,42,9, 
  /* [34][0][][] */ -127,55,-6,19,68,-24,18,20, 
  /* [35][0][][] */ -21,127,-2,12,8,-97,79,-32, 
  /* [36][0][][] */ -5,37,1,-31,-2,103,-127,-24, 
  /* [37][0][][] */ 39,-68,-12,20,7,-127,98,-7, 
  /* [38][0][][] */ 8,-127,11,-6,5,41,-41,76, 
  /* [39][0][][] */ 2,-127,-21,-8,-5,-6,-46,-99, 
  /* [40][0][][] */ 124,43,3,5,-42,70,-127,-101, 
  /* [41][0][][] */ 6,-127,6,-10,-10,92,-72,119, 
  /* [42][0][][] */ 58,-5,-16,-127,-38,-10,1,-16, 
  /* [43][0][][] */ -105,-23,10,-127,52,6,-27,-12, 
  /* [44][0][][] */ 9,-20,-9,16,-17,78,127,-12, 
  /* [45][0][][] */ -127,-51,-10,-4,30,6,20,-20, 
  /* [46][0][][] */ 3,87,127,-4,4,27,-1,12, 
  /* [47][0][][] */ 6,9,3,127,7,1,4,-9, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00020478123042266816, 0.00079491903306916356, 0.00062779308063909411, 0.0010301274014636874, 0.0033498359844088554, 0.0010969849536195397, 0.0026114184875041246, 0.0026940314564853907, 0.0015337525401264429, 0.0015331873437389731, 0.0017148528713732958, 0.0012013138039037585, 0.0012902527814731002, 0.0012896510306745768, 0.0014780914643779397, 0.0042674127034842968, 0.00091313978191465139, 0.00095033401157706976, 0.0048286765813827515, 0.000257369305472821, 0.00078760739415884018, 0.00081921095261350274, 0.0013511981815099716, 0.0024524922482669353, 0.00083199335495010018, 0.00051983771845698357, 0.0003727429430000484, 0.00080795801477506757, 0.0019878344610333443, 0.0026613085065037012, 0.0012771767796948552, 0.00092481554020196199, 0.0028206207789480686, 0.00054187187924981117, 0.00088241789489984512, 0.00063734297873452306, 0.0012899891007691622, 0.00080271007027477026, 0.00025172976893372834, 0.0057247728109359741, 0.0016562603414058685, 0.0023445358965545893, 0.001080633606761694, 0.00095499010058119893, 0.0006256116321310401, 0.0011913508642464876, 0.0018115898128598928, 0.0024453070946037769, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5164, -22367, 26084, 21260, 5552, -1267, 33743, 12779, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013014695141464472, 0.0006394778611138463, 0.0012740939855575562, 0.0012010603677481413, 0.0011490772012621164, 0.0011913662310689688, 0.00087190984049811959, 0.00073046068428084254, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,-3,9,-93,9,27,9,6,4,6,4,-5,97,0,1,6,0,-7,-2,-2,77,-6,0,7,31,36,13,7,3,4,0,-127,11,8,-1,-3,-24,3,-19,36,7,-29,-7,6,1,-2,7,3, 
  /* [1][0][][] */ -40,-7,0,-5,47,29,-32,81,15,12,-31,-29,13,0,17,38,0,39,17,-51,2,20,127,16,-30,-2,56,9,18,-4,18,-10,14,-5,-8,-26,1,-57,9,0,-7,-9,-85,-11,-29,5,-55,-98, 
  /* [2][0][][] */ -62,16,2,15,44,-9,29,29,-12,59,9,-12,3,0,8,51,0,17,-127,23,0,17,2,-13,-34,1,43,8,9,27,20,7,2,-5,-7,-15,16,2,2,5,36,-9,-34,3,20,-56,22,17, 
  /* [3][0][][] */ 2,1,-4,5,-5,24,0,3,62,16,-4,-2,28,0,-35,-10,0,4,-13,0,-2,3,7,-13,-11,-6,-7,-6,-8,-3,-1,-5,-46,43,-54,-2,5,2,4,-127,0,7,1,-48,-4,0,-3,6, 
  /* [4][0][][] */ 0,0,80,36,4,-19,-1,-2,3,-4,-1,-11,-83,0,-13,4,0,14,7,1,66,7,1,-3,-18,28,-8,42,-12,-3,1,99,2,5,3,-5,14,-15,-13,-22,-3,-127,4,4,-1,-4,-1,1, 
  /* [5][0][][] */ -6,45,6,-10,0,52,25,13,-20,31,8,58,29,0,-127,-2,0,16,-38,17,-9,10,-12,42,-18,1,30,-9,-14,22,22,-15,50,32,-42,-4,8,18,-44,14,23,-12,-12,29,20,62,21,24, 
  /* [6][0][][] */ -20,-55,2,5,41,-51,-22,12,28,-24,-13,89,1,0,-127,42,0,-8,50,-19,1,1,29,-31,30,2,-1,-7,47,-11,-5,0,95,-28,26,-2,-6,-6,-67,-21,-17,-16,-7,-30,-22,-78,-18,-31, 
  /* [7][0][][] */ -121,-30,-13,12,127,22,64,38,22,7,22,-42,-31,0,90,103,0,21,0,67,-13,7,-30,52,18,4,46,9,51,61,56,-4,-9,-19,-23,-23,-1,27,21,43,75,2,-28,-8,67,-1,64,83, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.055312450975179672, 0.027177808806300163, 0.054148994386196136, 0.051045063883066177, 0.048835780471563339, 0.050633065402507782, 0.037056166678667068, 0.031044578179717064, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 67034, 58935, 61774, 43295, -212, 14056, 3121, 27522, 23999, 27061, 29077, -908, -46950, -127, 44244, 134, -204, 35476, 2770, 2616, -15508, 7140, 49226, 38170, -18610, 37585, 38095, 21264, -2969, 14817, -8399, -50613, 12373, 111343, 27844, 1844, 60248, -450, 146715, -25666, 16092, -26970, 3227, 109544, -1669, 74890, 1076, -22556, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.8929205958265811e-05, 6.7173838033340871e-05, 0.00016992089513223618, 0.00010775048576761037, 0.00019835264538414776, 0.00018944239127449691, 0.00014681450556963682, 6.3806190155446529e-05, 9.4120579888112843e-05, 3.230926813557744e-05, 8.317348692798987e-05, 2.8494217986008152e-05, 0.00017534547077957541, 0.005541567225009203, 5.8416477259015664e-05, 0.0002542290894780308, 0.0027484172023832798, 2.0241619495209306e-05, 7.4944851803593338e-05, 0.0001889171835500747, 0.00010532954911468551, 0.0001499775389675051, 0.00011704163625836372, 3.4860131563618779e-05, 7.987113349372521e-05, 7.6274911407381296e-05, 3.6055902455700561e-05, 4.2560564907034859e-05, 0.00022681862174067646, 5.5756136134732515e-05, 4.9622005462879315e-05, 0.0001969791337614879, 0.00019837058789562434, 8.2201077020727098e-06, 8.8152875832747668e-05, 0.00018414283113088459, 1.457177222619066e-05, 0.00043158195330761373, 3.1898664019536227e-05, 9.318310912931338e-05, 6.8408517108764499e-05, 0.00017212382226716727, 0.00010949186980724335, 8.433950824837666e-06, 0.00017756946908775717, 7.9916673712432384e-05, 0.00023918623628560454, 0.00012460979633033276, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-24,-6,-16,6,-40,-78,-69,-26,-52,9,65,34,-71,114,-42,-113,-85,37,-7,0,-72,-111,-81,-36,-123,-64,-21,71,14,96,26,-127,-88,-6,55,18,48,-127,79,-77,-14,106,-110,-2,-34,-86,108, 75,10,-28,-29,58,-127,-127,-83,60,-77,-118,107,37,-82,-1,62,-52,-114,59,6,11,-113,-127,-69,-4,-127,-120,-40,-53,20,-56,54,30,-127,64,83,13,72,-94,127,-127,7,126,-127,2,-22,-127,96, -32,42,6,-6,-64,-109,-59,-18,89,-8,-127,37,8,-71,-100,-11,-127,-26,26,12,-15,-77,-36,-25,-10,-31,-59,-12,-9,17,-25,10,106,-85,70,31,14,36,-3,16,-80,4,7,-79,-17,6,-55,14, 
  /* [0][1][][] */ -86,-127,-45,-43,-10,54,98,-107,-26,-108,-19,113,90,-64,27,-96,-121,-94,88,-77,41,-88,-101,-127,41,-118,-77,-38,127,-61,127,84,-43,-84,-14,85,-35,-76,-106,90,41,59,104,-108,-91,-118,81,120, 127,-82,-127,-127,127,41,93,-127,102,-127,-108,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-118,-120,127,-98,-127,-127,-120,-127,-70,127,30,-110,127,127,-69,-127,-99,90,60,127,127,-117,-112,-127,123,127, -53,30,-62,-86,-119,-23,31,-37,127,-21,-76,36,55,-70,-25,-43,-37,-30,52,-71,56,-82,-37,-24,48,-5,-45,-61,16,-89,-37,20,29,-97,118,23,-37,-62,3,-15,37,53,10,-74,-58,-38,64,36, 
  /* [0][2][][] */ -61,-104,-35,-34,1,34,-5,-35,-38,-60,-15,60,78,-127,-127,-63,-43,-20,62,74,52,-33,-11,-60,33,-56,-10,-61,76,28,78,62,108,-25,-38,-9,-95,36,-16,30,9,38,16,-55,96,-77,4,31, 88,-72,-89,-86,82,19,7,-47,47,-71,-32,56,85,-26,16,93,-24,-32,76,117,82,-52,-17,-58,95,-69,-19,-101,-51,40,-45,110,-17,-48,67,7,-127,51,-14,-2,10,33,16,-67,127,-99,-11,40, -29,29,-42,-36,-79,-19,22,-12,59,-4,-13,33,31,-43,112,-29,-93,-6,28,59,74,-28,0,-3,43,1,-4,-65,-13,28,-20,39,-91,-44,65,3,-21,22,29,-40,6,36,-4,-15,63,-35,-4,19, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.003779491176828742, 0.0028548880945891142, 0.0072216377593576908, 0.0045793955214321613, 0.0084299873560667038, 0.0080513013526797295, 0.0062396163120865822, 0.0027117629069834948, 0.0040001245215535164, 0.0013731438666582108, 0.0035348730161786079, 0.0012110042152926326, 0.0074521824717521667, 0.23551659286022186, 0.0024827001616358757, 0.01080473605543375, 0.1168077290058136, 0.00086026883218437433, 0.0031851562671363354, 0.0080289803445339203, 0.0044765057973563671, 0.0063740452751517296, 0.0049742693081498146, 0.0014815556351095438, 0.0033945231698453426, 0.0032416835892945528, 0.0015323758125305176, 0.0018088240176439285, 0.0096397912129759789, 0.0023696357384324074, 0.0021089352667331696, 0.0083716129884123802, 0.0084307501092553139, 0.00034935455187223852, 0.0037464972119778395, 0.0078260703012347221, 0.00061930029187351465, 0.018342232331633568, 0.0013556932099163532, 0.0039602820761501789, 0.0029073618352413177, 0.0073152622207999229, 0.0046534044668078423, 0.00035844289232045412, 0.0075467023998498917, 0.0033964584581553936, 0.010165414772927761, 0.0052959159947931767, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4563, 69, 9988, 6825, 6529, 6662, 9960, -6, -35, -313, 2479, 437, 13772, -80409824, 2939, 19197, -64910980, -117, -444, 10850, 4558, -19, -41, 445, 3719, -745, 60, 748, 4754, 1790, 2625, 13587, 3988, 281, 267, -1559, 293, 3267, -157, 11590, 2362, 11703, -281, -76, 13852, 218, 9272, 3761, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00045728244003839791, 0.00050864991499111056, 0.0003173289296682924, 0.0002706496452447027, 0.00031047128140926361, 0.00031121098436415195, 0.00038343467167578638, 0.0015754378400743008, 0.00043854169780388474, 0.0023683172184973955, 0.00060656416462734342, 0.0019928915426135063, 0.00016146129928529263, 2.0169632630739898e-09, 0.00089962134370580316, 0.00017243818729184568, 2.0169632630739898e-09, 0.0062579130753874779, 0.00041318198782391846, 0.00035638362169265747, 0.0002402414393145591, 0.00439106160774827, 0.00032144103897735476, 0.0014051493490114808, 0.0010190728353336453, 0.0006925162160769105, 0.0022177293431013823, 0.001675743842497468, 0.00023913463519420475, 0.0016315823886543512, 0.0011206907220184803, 0.00017187466437462717, 0.00018940353766083717, 0.011533509008586407, 0.00058505457127466798, 0.00073114089900627732, 0.0051661906763911247, 0.00038048147689551115, 0.0024924185127019882, 0.00029399702907539904, 0.0012172739952802658, 0.00019035968580283225, 0.00059640093240886927, 0.01102452352643013, 0.00036425830330699682, 0.00051120779244229198, 0.00030207409872673452, 0.00022855705174151808, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 19,-127,45,-44,29,-16,-48,28, 
  /* [1][0][][] */ 66,71,-25,-98,16,-15,-83,127, 
  /* [2][0][][] */ 29,6,-45,127,55,127,45,94, 
  /* [3][0][][] */ 92,75,-77,127,-100,-13,-13,23, 
  /* [4][0][][] */ -45,-82,59,19,6,28,-31,-127, 
  /* [5][0][][] */ 19,8,-39,47,-6,-24,41,127, 
  /* [6][0][][] */ 72,-19,-127,-110,105,27,83,-45, 
  /* [7][0][][] */ 127,18,21,-29,28,-3,87,-62, 
  /* [8][0][][] */ 22,-103,9,111,5,26,-14,-127, 
  /* [9][0][][] */ 92,-127,6,-5,-6,13,-124,77, 
  /* [10][0][][] */ -127,-47,-108,23,3,14,-122,68, 
  /* [11][0][][] */ -18,-45,-10,-104,-127,-31,47,-16, 
  /* [12][0][][] */ 15,9,-40,76,-80,-26,64,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -2,-34,-6,7,48,127,43,44, 
  /* [15][0][][] */ 42,7,20,-127,73,52,-62,66, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 21,26,127,17,-34,-3,29,34, 
  /* [18][0][][] */ 89,-127,24,36,-10,20,-115,5, 
  /* [19][0][][] */ -127,-4,54,102,-79,-44,-89,98, 
  /* [20][0][][] */ 40,40,-38,127,-33,-127,1,69, 
  /* [21][0][][] */ 62,23,127,11,-18,-10,70,18, 
  /* [22][0][][] */ -74,-19,-127,-2,3,12,-106,6, 
  /* [23][0][][] */ -108,126,-23,-18,11,-7,127,-78, 
  /* [24][0][][] */ 4,-54,-50,91,-15,-59,101,127, 
  /* [25][0][][] */ 1,42,27,29,117,127,-73,-54, 
  /* [26][0][][] */ -80,-38,-127,-3,7,19,-98,-4, 
  /* [27][0][][] */ -6,-26,-36,14,-53,127,68,42, 
  /* [28][0][][] */ 1,-21,-28,32,17,127,66,79, 
  /* [29][0][][] */ 91,23,127,-1,-35,-12,92,-11, 
  /* [30][0][][] */ -85,127,-28,-32,7,-11,108,-43, 
  /* [31][0][][] */ -43,-90,-23,2,29,-71,127,107, 
  /* [32][0][][] */ 11,8,-52,127,-20,86,89,123, 
  /* [33][0][][] */ -4,63,-12,-105,17,-16,-12,127, 
  /* [34][0][][] */ -16,77,1,-94,39,-9,6,127, 
  /* [35][0][][] */ 127,19,-16,-48,13,55,90,-57, 
  /* [36][0][][] */ -127,-3,15,70,-37,17,-111,79, 
  /* [37][0][][] */ -5,-16,-6,26,30,127,48,54, 
  /* [38][0][][] */ 19,13,5,82,127,-6,-21,39, 
  /* [39][0][][] */ 0,32,37,-127,26,-8,-37,115, 
  /* [40][0][][] */ 105,21,127,5,-16,0,91,-4, 
  /* [41][0][][] */ -4,-29,-33,83,46,127,75,98, 
  /* [42][0][][] */ -72,-13,127,16,-43,21,-33,63, 
  /* [43][0][][] */ -15,-50,5,89,-10,4,7,-127, 
  /* [44][0][][] */ 47,10,-61,-127,76,-14,12,-115, 
  /* [45][0][][] */ -86,127,2,-46,13,-1,70,-54, 
  /* [46][0][][] */ -127,-25,59,35,-42,48,-95,47, 
  /* [47][0][][] */ 103,19,102,-5,28,-30,127,-12, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00089259166270494461, 0.00099285831674933434, 0.00061940966406837106, 0.00052829412743449211, 0.00060602388111874461, 0.00060746772214770317, 0.00074844463961198926, 0.0030751731246709824, 0.00085601070895791054, 0.0046228328719735146, 0.0011839818907901645, 0.0038900210056453943, 0.00031516409944742918, 3.937008052901092e-09, 0.0017560143023729324, 0.0003365904267411679, 3.937008052901092e-09, 0.012215122580528259, 0.00080650986637920141, 0.00069564237492159009, 0.00046893887338228524, 0.0085711255669593811, 0.00062743626767769456, 0.002742778742685914, 0.0019891774281859398, 0.0013517558109015226, 0.004328893031924963, 0.0032709653023630381, 0.00046677843783982098, 0.0031847644131630659, 0.0021875302772969007, 0.00033549044746905565, 0.00036970590008422732, 0.022512812167406082, 0.0011419962393119931, 0.0014271491672843695, 0.010084137320518494, 0.00074268016032874584, 0.0048650722019374371, 0.00057386700063943863, 0.0023760558106005192, 0.00037157227052375674, 0.0011641437886282802, 0.02151929959654808, 0.00071101338835433125, 0.00099785113707184792, 0.00058963301125913858, 0.00044613154022954404, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -389, -45191, -7640, -13348, -31086, -2553, -25215, -28598, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021625736262649298, 0.0023090636823326349, 0.0024102507159113884, 0.0013087185798212886, 0.0011818029452115297, 0.0023165196180343628, 0.001737962244078517, 0.0010739809367805719, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,4,2,127,1,-5,0,-3,-127,-92,-5,0,121,-4,0, 
  /* [1][0][][] */ 0,-27,1,91,72,14,25,8,-3,-4,127,-45,0,33,-15,0, 
  /* [2][0][][] */ 0,0,-2,-11,-59,4,10,1,2,3,-17,0,0,127,-6,0, 
  /* [3][0][][] */ 0,-14,-19,-127,85,26,63,21,-4,67,-1,41,0,2,19,0, 
  /* [4][0][][] */ 0,54,-29,37,-64,31,127,6,5,-67,21,-8,0,-9,17,0, 
  /* [5][0][][] */ 0,-16,-6,0,-25,-23,-11,16,2,8,-5,-46,0,-6,127,0, 
  /* [6][0][][] */ 0,12,3,1,52,-17,-27,-5,6,-106,117,62,0,127,59,0, 
  /* [7][0][][] */ 0,11,-12,127,13,-1,16,10,-2,75,-54,79,0,-5,49,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.09190937876701355, 0.098135203123092651, 0.10243565589189529, 0.055620539933443069, 0.050226625055074692, 0.098452083766460419, 0.073863394558429718, 0.045644190162420273, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 17131, 145257, 8549, 9069, 43221, 13124, 21181, -2666, 4405, 28509, 14987, -445, 24837, 10128, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00015313607582356781, 2.7662559659802355e-05, 0.00041069602593779564, 0.00019673543283715844, 7.6490308856591582e-05, 0.00039568377542309463, 0.00018337194342166185, 2.5865063435048796e-05, 0.00038823095383122563, 0.00021645582455676049, 0.00082320417277514935, 0.00072724185883998871, 0.00027654066798277199, 0.00019814258848782629, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-73,67,-95,77,-93,-27,4,-15,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-29,14,-29,0,3,-109,-49,8,-29,-14, -78,-42,-57,-15,-8,-26,8,-28,-109,-89,21,-12,-104,-127,1,23, 14,1,65,2,2,34,-25,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,68,2,-7,39,-39,51,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,20,-126,-13,0,84,-58,0,-28,-111, 21,-7,19,0,4,14,9,22,-114,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0065082828514277935, 0.0011756587773561478, 0.017454581335186958, 0.0083612557500600815, 0.0032508380245417356, 0.016816560178995132, 0.0077933073043823242, 0.0010992651805281639, 0.016499815508723259, 0.0091993724927306175, 0.03498617559671402, 0.030907778069376945, 0.011752977967262268, 0.0084210596978664398, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 10968, -20011, 18968, 254167, 22853, 62389, 7962, 183616, 32760, 15711, 790795, -1073741824, 26340, 53682, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00026918857474811375, 0.00057864724658429623, 3.7391411751741543e-05, 1.1754986189771444e-05, 0.00020526767184492201, 6.5068059484474361e-05, 0.00029434557654894888, 9.4292900030268356e-06, 4.5821740059182048e-05, 0.00019914688891731203, 7.3895421337510925e-06, 1.1533876076441629e-09, 0.00014709527022205293, 6.8829271185677499e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 54,-3,37, 1,-25,22, -123,-127,-60, 
  /* [1][1][][] */ 6,-5,7, -18,2,3, 9,-31,17, 
  /* [1][2][][] */ -1,17,7, -1,8,7, 47,-17,25, 
  /* [2][0][][] */ 18,-22,-16, 63,111,-10, 21,-69,-11, 
  /* [2][1][][] */ -2,-2,-12, 65,127,-41, 1,-29,-24, 
  /* [2][2][][] */ 45,-88,11, 78,-60,-33, 21,-81,1, 
  /* [3][0][][] */ 15,39,12, 36,97,27, 1,7,-2, 
  /* [3][1][][] */ 24,38,9, 68,127,29, -13,-17,7, 
  /* [3][2][][] */ 4,-3,1, 23,18,5, -1,-3,3, 
  /* [4][0][][] */ 25,61,-11, 5,78,-5, -20,13,6, 
  /* [4][1][][] */ 34,88,46, 25,125,33, 30,58,-6, 
  /* [4][2][][] */ 54,84,29, 49,127,9, -15,31,18, 
  /* [5][0][][] */ 8,6,-117, -1,5,-97, -4,30,-23, 
  /* [5][1][][] */ 5,-37,-127, 0,-39,-111, -1,15,-22, 
  /* [5][2][][] */ -6,9,-24, -3,-1,-17, -5,12,-12, 
  /* [6][0][][] */ 27,-62,35, 49,-86,41, 10,-20,10, 
  /* [6][1][][] */ 37,-95,61, 64,-127,71, 7,-29,17, 
  /* [6][2][][] */ 20,-37,13, 13,-46,25, -14,5,-2, 
  /* [7][0][][] */ -30,12,5, -111,-49,2, -26,21,2, 
  /* [7][1][][] */ -8,-11,2, -127,-103,-6, -5,-6,9, 
  /* [7][2][][] */ -22,33,-6, -12,12,5, -19,30,5, 
  /* [8][0][][] */ -127,-23,9, -120,-18,10, -118,-17,-4, 
  /* [8][1][][] */ -123,-26,11, -119,-22,11, -119,-19,-4, 
  /* [8][2][][] */ -117,-30,11, -112,-25,12, -113,-21,-3, 
  /* [9][0][][] */ -16,-4,9, -4,-1,2, 14,13,-5, 
  /* [9][1][][] */ 91,107,-10, 73,127,15, 2,32,31, 
  /* [9][2][][] */ -34,-29,14, -3,-32,0, 9,6,-18, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -9,-13,-3, 
  /* [10][1][][] */ -59,-102,-14, 79,127,14, -17,-26,-1, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -9,-1,7, 
  /* [11][0][][] */ -15,-27,-3, 8,-45,3, 8,-101,-53, 
  /* [11][1][][] */ -48,-45,-22, -37,-66,-40, -16,-61,-55, 
  /* [11][2][][] */ -8,-40,-79, 118,127,64, -39,14,-47, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-110,-25, -10,-17,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,25, 7,16,11, 
  /* [13][2][][] */ -9,-19,3, 1,-18,-2, 0,4,-4, 
  /* [14][0][][] */ 44,-9,-41, 77,-28,-52, 30,-12,-21, 
  /* [14][1][][] */ 88,-19,-75, 127,-42,-89, 58,-22,-37, 
  /* [14][2][][] */ 53,-15,-49, 73,-26,-55, 24,-11,-20, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 5.8353418808110291e-07, 0.11989030987024307, 0.25771600008010864, 0.016653262078762054, 0.0052353967912495136, 0.091421432793140411, 0.028979796916246414, 0.13109464943408966, 0.0041995858773589134, 0.020407933741807938, 0.088695377111434937, 0.0032911298330873251, 5.1369192988204304e-07, 0.065512806177139282, 0.030654951930046082, 5.5377011420887357e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.51230865716934204, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.46054387092590332, } };
const TfArray<1, int> quant50_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.45787575840950012, } };
const TfArray<1, int> quant53_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.59716987609863281, } };
const TfArray<1, int> quant54_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.34005120396614075, } };
const TfArray<1, int> quant58_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23685191571712494, } };
const TfArray<1, int> quant61_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.32271698117256165, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.24099846184253693, } };
const TfArray<1, int> quant65_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.39910218119621277, } };
const TfArray<1, int> quant66_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.05594867467880249, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.086107432842254639, } };
const TfArray<1, int> quant69_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 688, (TfLiteIntArray*)&tensor_dimension69, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

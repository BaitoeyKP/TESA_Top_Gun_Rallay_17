/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.11.2023 18:02:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1410720;
#else
constexpr int kTensorArenaSize = 1409696;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,240,240,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0029834678862243891, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[6] = { 16464, -30231, -35166, -26583, -30831, -31634, };
const TfArray<1, int> tensor_dimension2 = { 1, { 6 } };
const TfArray<6, float> quant2_scale = { 6, { 0.00042071915231645107, 0.00027856157976202667, 0.00023365399101749063, 0.00031628337455913424, 0.0002744254597928375, 0.00026546037406660616, } };
const TfArray<6, int> quant2_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[6*1*1*32] = { 
  /* [0][0][][] */ 9,49,-42,-12,-45,53,42,31,-34,51,-38,26,-73,-19,113,-29,0,-6,0,-43,-1,51,5,-50,-75,-22,-49,-24,127,4,-42,-72, 
  /* [1][0][][] */ 59,-59,-4,-12,105,-2,-63,38,82,-8,-90,92,25,4,-127,11,5,-5,-76,-67,-17,55,13,-53,81,42,110,1,-123,30,-41,118, 
  /* [2][0][][] */ -20,-82,90,-31,80,119,-127,90,-75,11,56,-48,97,-20,-74,98,42,-2,-108,-83,75,85,-111,17,-120,105,-94,-30,-113,57,-48,-113, 
  /* [3][0][][] */ 60,-60,10,26,27,-43,-108,23,60,81,-20,-73,86,11,-32,-9,68,27,65,-95,34,-59,-127,53,-45,86,-84,-10,-83,-19,64,74, 
  /* [4][0][][] */ -27,21,112,-8,-39,-58,-33,-38,-33,-76,16,64,25,-13,-127,-18,17,76,95,14,8,110,51,-20,63,8,3,29,-110,-66,60,21, 
  /* [5][0][][] */ 72,72,-48,84,43,3,-113,103,-42,-95,105,-102,-54,-105,-127,-13,-70,-83,-57,104,-16,11,29,35,111,-8,-27,71,-77,58,-62,-8, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 6,1,1,32 } };
const TfArray<6, float> quant3_scale = { 6, { 0.0058292518369853497, 0.0038595951627939939, 0.003237380413338542, 0.0043822475709021091, 0.0038022873923182487, 0.0036780722439289093, } };
const TfArray<6, int> quant3_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 7, 649, -100, -353, -611, -21, 896, -52, -564, -424, -765, 591, -396, -136, 2155, -558, -296, -336, 703, 615, -268, -72, 1146, -358, 60, -365, 140, 101, 2783, -156, 135, -209, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.6154316805768758e-05, 4.4082844397053123e-05, 7.1063906943891197e-05, 4.3310257751727477e-05, 4.5751039579045027e-05, 7.260349957505241e-05, 5.2100047469139099e-05, 4.4165793951833621e-05, 4.5701424824073911e-05, 4.2841849790420383e-05, 4.4039883505320176e-05, 4.349347364041023e-05, 6.3046943978406489e-05, 4.6125489461701363e-05, 8.8300548668485135e-05, 5.0640130211832002e-05, 5.8029199863085523e-05, 4.7159759560599923e-05, 4.5364355173660442e-05, 4.6189656131900847e-05, 5.7803692470770329e-05, 5.4658543376717716e-05, 4.419936885824427e-05, 4.7606783482478932e-05, 4.8463145503774285e-05, 4.8804213292896748e-05, 5.017858711653389e-05, 4.401394835440442e-05, 6.910080264788121e-05, 5.1207342039560899e-05, 4.299665306461975e-05, 4.8930127377388999e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -36,-43,100,10,95,-10,-89,-107,73,-87,-108,-4,60,13,-30,33,-60,-26,-89,-47,-54,-92,13,114,-92,14,81,-34,97,-11,-14,-78,88,-53,-84,68,-87,-91,-95,22,89,-71,-82,90,52,-87,112,-6,28,-83,-16,94,-72,-57,-96,98,24,59,127,-112,-84,72,-35,40,4,27,48,75,48,94,90,-93,99,-116,28,61,-88,24,-53,42,55,13,88,-4,-58,-22,-70,71,26,123,-4,-103,-7,77,59,13, 
  /* [1][0][][] */ -57,42,-62,-5,-47,67,33,-4,91,-119,-95,85,56,-10,27,72,99,-54,34,116,-33,7,39,10,38,11,-51,113,9,2,90,-72,70,103,-5,22,43,78,-15,-78,-64,13,-30,-98,-42,50,-24,-54,-58,-42,98,55,7,88,-86,-55,20,89,68,81,-57,105,-50,-83,-70,37,76,47,104,12,31,14,-116,116,-50,72,85,-64,-19,83,-79,82,-67,-99,35,127,-60,-43,97,88,107,14,78,95,33,34, 
  /* [2][0][][] */ 34,22,-30,66,-6,-24,60,77,-68,63,-31,85,66,-6,56,-62,-23,-7,29,39,-90,2,66,23,-27,52,75,13,-33,62,56,68,-44,-8,-47,-59,-39,61,81,-1,-79,-56,15,7,-42,39,-6,-33,76,10,59,-51,-21,48,23,23,-51,67,-51,9,3,47,-31,52,65,32,39,60,-49,53,-16,-46,33,-41,32,10,-24,8,-21,-1,30,-53,5,-68,12,-127,-6,-51,15,31,-14,15,-25,-56,-70,-45, 
  /* [3][0][][] */ 67,-3,38,-24,-73,47,-117,39,31,12,64,3,89,82,67,7,102,93,-63,7,93,-96,-72,-115,-38,-121,-83,105,40,-100,83,5,-70,-41,-24,-14,-94,-32,40,46,-33,-93,-99,-1,67,23,-53,-80,60,-101,40,4,93,26,80,-104,-123,-119,-121,-58,-97,33,-46,68,54,-38,-60,-34,-35,-76,-14,93,17,-107,55,-57,30,89,76,-70,-91,-123,30,88,28,31,-52,-127,-104,25,-14,-109,87,-109,-98,28, 
  /* [4][0][][] */ 39,100,-4,46,-23,-20,32,7,85,86,-22,46,35,-34,-9,-63,-22,4,-94,31,118,-83,81,46,22,-6,74,-47,-54,35,-65,-52,70,103,11,-82,-22,-39,-118,48,-45,-67,-36,-77,47,118,45,74,43,-79,6,-48,-83,26,-78,14,15,-89,23,5,8,-72,-32,-64,-31,58,-11,-42,17,-77,-80,-88,-40,-9,93,19,73,17,-23,-32,12,-59,-57,-87,-2,80,77,-31,-113,-39,51,43,-2,127,-103,-40, 
  /* [5][0][][] */ 53,-52,38,49,28,-70,18,35,5,-65,5,-41,13,47,14,22,35,45,-44,66,-14,13,20,-10,-127,-35,-9,-60,24,14,11,-60,-35,-1,-49,12,-65,-25,23,13,-58,-29,27,59,-17,45,16,-28,-50,54,22,20,25,-6,24,-17,71,30,-32,-23,15,-41,4,-42,-13,57,-14,16,36,6,42,-41,-28,42,-17,-50,1,-16,10,28,63,22,19,62,-57,74,-14,32,21,-75,67,54,-9,1,43,-51, 
  /* [6][0][][] */ 46,17,127,72,-64,-55,5,60,-19,-66,19,-80,74,80,123,-63,33,-5,17,92,-36,-77,98,43,-34,-57,-4,-16,-3,-54,43,-61,-57,-79,-21,-65,-6,53,-71,60,75,55,28,-5,-97,96,-69,-35,-93,71,-12,-48,58,42,80,-15,24,0,-51,99,-64,5,86,-53,-36,88,116,-14,104,-4,-77,9,50,-35,-56,-14,-40,-93,-25,-8,43,-7,44,-14,-20,-40,-27,-1,102,99,104,18,1,2,73,-3, 
  /* [7][0][][] */ 110,68,-39,-37,-60,119,-13,-10,127,15,-92,20,62,-83,40,64,55,35,-16,119,54,33,9,100,-57,108,49,59,-80,91,-11,38,31,28,64,108,-91,65,-20,-25,107,-69,92,71,59,13,110,-99,84,-95,-95,-56,-22,60,24,29,127,-83,16,-58,-5,-4,76,-106,-55,-49,51,21,-112,31,73,84,91,-5,54,41,-54,71,-100,54,93,-35,-16,-76,85,38,-101,76,71,10,90,70,-61,-29,5,-71, 
  /* [8][0][][] */ -3,28,-54,-102,58,28,-73,-41,-9,39,49,80,-12,-57,-98,-97,-78,97,-78,-8,10,-35,77,90,-119,92,34,59,-79,3,-82,109,83,-35,32,-17,103,-20,-24,56,91,103,-123,-127,-25,-42,-38,77,30,-99,-55,-4,-64,-7,-36,-120,51,97,-69,83,82,29,55,98,-30,-44,-50,71,-90,26,20,10,56,43,-17,21,-59,85,42,55,15,62,-108,-79,4,40,81,-57,22,-46,-99,82,-88,-114,-27,47, 
  /* [9][0][][] */ -9,2,103,36,81,-111,-51,-116,31,43,-7,49,-39,-90,-111,-31,1,-8,-85,-78,1,89,-120,-117,110,-17,-25,15,-19,-61,-91,95,49,-12,16,-26,-89,10,-36,-45,45,-69,47,-106,68,18,-118,47,42,-12,-74,-55,71,-84,-73,91,87,-64,-28,-6,-92,97,87,-80,-91,-8,114,37,-45,91,98,-92,-6,76,-117,-100,-91,-127,-44,95,23,18,100,36,-57,-97,25,-4,95,27,-41,96,111,-8,80,-45, 
  /* [10][0][][] */ -65,69,98,-71,-33,89,90,10,63,18,4,-80,107,90,-21,-9,-49,62,-119,-62,-3,42,40,-54,55,38,-114,-99,-62,59,-107,-95,95,92,120,86,-37,-21,-53,19,-50,98,-101,-48,-96,-70,12,-48,-16,-37,18,5,44,-18,-79,-30,-116,-31,13,-58,-24,63,90,26,97,-81,-127,-28,11,-20,-80,-83,91,40,-84,87,2,68,74,37,77,-11,44,89,-88,41,85,-81,33,13,5,-74,-65,-24,-60,-67, 
  /* [11][0][][] */ 115,36,-18,109,120,58,63,30,120,98,-62,112,-4,-72,30,-53,-43,-83,70,57,60,82,45,-112,-85,-85,-17,93,81,-2,35,-8,-89,-62,61,26,-54,86,-17,-47,-9,118,-55,23,-28,-46,-108,-92,98,127,116,62,-78,-82,27,29,-68,-46,-1,-89,-62,91,111,20,33,102,-62,31,93,67,-64,-51,47,120,-96,71,-55,38,-30,111,-101,-30,-51,-41,49,-78,34,-41,-48,3,21,-95,-98,-18,-44,-23, 
  /* [12][0][][] */ 13,39,-34,7,67,17,-20,43,-62,55,-18,29,-18,-2,32,-58,-59,-13,-31,-56,-15,0,11,81,-53,-29,81,-69,69,18,-17,88,-60,-45,-26,18,12,-61,0,45,77,19,-75,-22,-7,-84,-9,88,-5,-127,-46,73,29,5,-49,72,-11,-32,33,48,43,88,-16,45,87,23,-30,80,42,80,7,42,69,64,-3,-23,-22,52,-117,-73,-36,73,37,-21,-19,-17,39,52,-105,-95,47,41,71,-22,-4,33, 
  /* [13][0][][] */ 105,-41,91,82,81,96,65,63,68,-97,13,-31,80,65,70,-55,-121,-80,-15,19,72,-25,104,-55,-63,35,-5,8,-80,-80,69,28,34,95,-20,33,-90,-28,21,59,-70,58,-59,-1,-50,27,-7,-41,14,118,-45,-110,-102,83,83,-80,-46,18,-27,-74,-33,103,-73,5,-62,-67,-78,73,-25,-24,85,3,-94,39,-79,-47,-108,52,81,-63,41,-91,84,5,-83,-1,81,127,-9,-52,-74,41,115,-50,73,-10, 
  /* [14][0][][] */ 2,-23,69,50,65,-42,20,-74,-58,-24,112,12,-23,-19,-40,19,-44,-29,22,30,-7,6,29,18,-59,-3,-32,17,-29,-38,-18,15,63,27,-3,30,45,90,30,-93,27,-8,17,55,37,-17,28,-46,4,83,65,21,81,59,10,9,34,9,50,110,-1,-28,27,50,-37,3,100,-13,-3,-57,-32,93,-2,67,41,22,26,-81,48,18,46,35,-67,23,-48,21,-32,127,91,26,64,-31,93,34,47,68, 
  /* [15][0][][] */ 20,-22,-33,71,91,-61,59,-66,44,19,-63,27,106,-12,-78,-92,88,31,-66,34,24,0,78,117,62,69,48,73,22,51,69,-75,-16,11,-55,7,-47,86,99,-42,6,89,-29,-11,35,-51,-22,-52,33,-105,12,34,-76,-107,-28,3,73,56,-50,101,-38,-47,-20,97,-11,85,-55,7,-53,27,37,-71,30,-25,59,-118,-2,80,84,53,-64,54,-68,-99,-104,-46,-89,35,39,31,-102,-21,52,93,-127,72, 
  /* [16][0][][] */ -49,-8,78,-39,40,94,-35,44,21,47,-80,70,-7,-46,-43,-45,86,62,55,37,67,50,-36,43,-35,45,-47,41,-67,17,37,18,-87,57,37,47,-24,36,-23,-39,14,-38,37,69,44,57,68,-8,-34,-101,13,81,-24,97,57,44,28,74,38,14,90,91,-4,55,51,5,-22,70,37,76,-34,-14,26,62,53,49,-13,72,-97,-22,11,-54,29,-39,10,65,70,-6,48,-1,-21,92,58,-38,-127,8, 
  /* [17][0][][] */ 39,-95,28,76,-48,-99,-62,-71,38,-69,46,63,91,58,-112,31,38,34,107,101,-80,-7,9,-53,22,68,-79,18,105,-81,-22,74,-31,-24,34,-2,-53,106,-69,-17,-104,-42,-18,-25,-5,1,85,-100,61,105,-25,24,-9,28,98,-64,-125,87,-77,-127,1,-83,59,100,-85,-82,41,-99,-97,0,95,13,17,-86,-51,49,100,-44,39,-59,7,-7,-60,-110,-99,64,79,-35,18,69,-89,-104,-13,91,-35,16, 
  /* [18][0][][] */ -76,95,127,-47,5,-85,-81,26,7,74,-101,-23,-22,44,77,-45,36,-31,66,-26,114,-18,5,-74,28,-89,-4,124,53,58,15,60,67,-16,-80,-84,-14,47,-8,79,-33,-6,-54,0,-106,-49,28,12,-7,-19,72,24,-89,28,11,103,-56,48,-54,-101,106,124,25,55,-54,-100,-8,99,91,-74,-69,115,-79,-19,-66,-75,67,46,-25,-52,-36,10,-23,-33,118,-75,78,44,-61,-61,-54,115,93,-55,55,-3, 
  /* [19][0][][] */ 39,51,89,56,53,-78,103,101,111,-48,23,-12,-69,51,-27,87,85,-101,116,69,0,98,-40,25,85,-56,45,-39,-61,-90,-50,48,93,-56,52,18,21,-29,-39,-84,38,-80,-58,26,-68,37,90,-70,-39,42,-49,62,-21,27,14,11,16,100,2,-10,75,-41,103,72,-60,21,-3,23,17,69,87,-38,-39,-79,-28,-40,-2,-96,38,116,72,-85,1,92,-58,-9,20,7,97,36,13,76,-22,127,67,-29, 
  /* [20][0][][] */ -1,45,50,79,-53,80,23,61,-9,26,-64,22,5,50,25,-51,-28,-15,-41,-18,-12,-45,-49,-38,39,-44,-67,32,24,14,-18,94,60,36,-10,50,39,-25,-1,-65,-70,-27,-65,-69,-12,-56,-43,87,65,-127,-65,34,43,81,51,13,79,64,53,73,87,-29,-70,-13,-7,-49,-32,16,-60,-41,-68,48,-35,-71,32,-2,81,76,62,59,68,12,64,-33,50,66,-20,42,-15,42,4,61,24,-7,-33,-5, 
  /* [21][0][][] */ 80,71,59,-69,85,-46,65,31,-30,-41,-57,48,15,29,-36,-61,-65,-10,33,-1,43,-33,65,-52,42,-63,-10,73,21,16,5,-3,-13,19,-67,-94,105,82,-75,-7,-2,-8,37,4,-66,-68,-59,90,3,-61,9,76,39,54,-63,30,-47,53,-32,102,59,-48,20,1,78,32,-20,-46,-74,15,37,67,39,-11,72,48,-75,5,12,81,17,79,44,-80,30,-121,61,-107,-127,51,86,-76,-42,-49,62,-28, 
  /* [22][0][][] */ 35,-34,-53,-76,99,-44,123,58,-78,92,-55,-109,121,-95,-102,-79,40,81,-113,-45,105,-63,45,37,103,17,-104,119,-48,-65,-58,-101,60,73,30,28,25,3,-43,-115,54,39,19,108,66,-124,97,-11,-76,-69,37,28,-46,-81,-34,38,26,-24,3,-25,113,-67,-28,-101,-53,40,-112,-32,126,114,-6,39,-50,22,72,-43,54,-50,81,111,127,-86,-59,-52,87,63,116,-22,-34,60,-46,69,20,39,63,118, 
  /* [23][0][][] */ 59,-88,6,49,82,-100,-1,-92,80,-68,68,72,21,-85,23,-44,76,-39,-104,77,98,-56,81,-30,-5,-16,73,18,59,33,63,-37,-18,41,21,41,86,-24,-107,7,-109,-13,4,-105,-65,-101,117,18,64,-127,-98,-45,63,-62,-52,84,-83,-24,71,38,-108,-82,-66,-14,23,31,-115,-103,56,-19,112,-80,-3,-50,-38,-105,43,-25,105,113,-51,-44,7,-104,90,-20,89,-45,-78,25,96,-7,100,-38,-44,68, 
  /* [24][0][][] */ -63,-28,-76,-50,-73,-87,-58,-80,83,112,66,42,117,66,-20,-102,-58,44,27,-38,101,-50,-50,-19,67,-21,84,75,106,60,7,-47,12,18,57,38,-28,-78,60,-9,-54,-84,113,16,32,-37,52,78,-67,-59,-10,37,64,60,63,-56,-13,76,38,2,96,2,49,88,-76,105,-42,-71,-74,63,-38,-17,-20,41,90,97,74,-52,-92,-55,-58,-85,-34,-127,16,38,2,-120,22,-81,16,-60,-28,53,-69,21, 
  /* [25][0][][] */ -72,-59,-69,1,94,-50,-83,63,26,-78,-40,41,77,-15,-101,-24,-55,69,28,-93,26,72,-4,-32,13,-34,-77,32,72,-74,45,112,82,-93,41,78,103,-70,-9,-1,-64,76,-89,9,97,19,78,44,-60,26,-49,6,44,-20,-44,22,0,55,-91,67,104,50,37,50,16,69,-17,-5,-79,11,-49,-103,45,-127,70,-7,65,97,-24,3,49,49,-32,25,-64,-68,-86,-102,-71,-40,76,33,-98,-22,-42,-99, 
  /* [26][0][][] */ 49,-85,-15,-6,-77,4,-1,-9,-88,-90,98,73,-62,-46,8,-13,102,38,-64,-49,29,66,96,17,69,68,20,52,15,15,-69,5,-25,-46,-78,-94,-41,75,-32,99,-67,97,68,36,-54,74,-39,88,-2,38,9,93,20,-47,6,-93,88,63,71,19,5,-78,78,-9,106,-3,-52,49,-70,78,85,100,77,-71,-72,21,43,-78,-97,28,-18,56,96,-59,64,7,-20,9,-79,121,18,21,-54,127,65,73, 
  /* [27][0][][] */ 16,13,-49,-91,-127,-71,-79,-24,64,103,-4,-100,-12,69,93,-33,68,-47,55,-71,-76,27,-27,-8,-85,48,-94,12,69,28,-43,-14,75,78,-76,-68,-73,-65,-116,80,-105,2,37,26,104,22,83,111,61,42,22,-69,-103,-86,-16,-23,86,-25,-100,-77,-54,-53,-52,50,36,-32,-117,109,58,18,-98,-13,74,-45,0,-100,62,-54,98,116,94,-21,116,-82,-58,-83,-24,13,-39,8,-21,-41,38,36,23,60, 
  /* [28][0][][] */ 81,11,127,51,-66,-48,-51,-64,-87,-80,59,7,-63,2,65,91,57,69,-38,84,30,-1,-55,-81,-94,66,-69,-18,-30,-32,-2,-13,-16,45,61,97,0,-43,-22,-9,73,61,-47,48,-51,115,-18,18,-6,113,-37,4,-42,73,38,27,65,-10,58,42,17,-21,-38,2,30,62,30,94,2,-4,-34,-9,33,23,5,7,-73,-98,10,11,-9,46,47,115,55,57,47,18,58,33,82,-56,89,34,-32,75, 
  /* [29][0][][] */ 37,58,40,-47,-74,4,-104,-3,101,-9,-69,-90,94,-81,-38,-45,-89,102,20,-43,-48,-28,65,14,-11,12,-30,-19,-93,-14,84,-11,51,2,-67,-40,3,70,-16,72,53,96,-24,69,6,127,-32,-6,47,-18,64,-66,56,-104,90,32,-66,44,-24,86,-107,72,-64,-50,-42,-47,33,67,71,-67,41,-52,96,51,44,8,102,-33,-11,41,-3,-83,6,-62,46,127,38,79,-28,93,69,64,-97,36,18,42, 
  /* [30][0][][] */ 31,-63,-59,32,-100,20,-68,-14,127,-19,4,-48,-91,28,65,13,-4,43,91,-99,56,-94,-109,19,-107,25,-69,117,-11,-108,-99,2,-72,-60,-110,-49,16,-17,-4,23,91,-76,-11,100,101,-32,117,65,-69,76,15,-104,93,-48,-17,103,-78,-60,-81,-53,-106,-8,-70,-35,-110,-82,-96,97,-56,105,63,-37,-86,105,41,-84,-56,-70,-70,-51,30,22,-105,-22,-101,49,-108,109,-34,-115,90,53,-41,5,5,-73, 
  /* [31][0][][] */ 80,-74,54,92,50,71,-55,-109,18,-5,-74,-73,104,-79,-35,87,-48,-75,17,38,73,76,-29,106,79,-89,48,51,-55,-54,48,103,50,30,-66,8,106,-71,-53,-94,68,-58,-14,31,10,-57,10,39,73,-13,96,-10,-104,-33,-72,27,-96,66,31,94,-40,4,96,-64,75,114,-62,-72,78,-102,-81,15,-71,-98,1,4,-39,-20,2,111,-59,-37,77,24,62,85,-64,-18,9,-18,-61,-42,-12,127,8,-41, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019615583587437868, 0.0018735209014266729, 0.0030202160123735666, 0.0018406858434900641, 0.0019444191129878163, 0.0030856486409902573, 0.0022142520174384117, 0.0018770461902022362, 0.0019423104822635651, 0.0018207785906270146, 0.0018716950435191393, 0.0018484726315364242, 0.0026794951409101486, 0.0019603332038968801, 0.0037527733948081732, 0.0021522054448723793, 0.0024662408977746964, 0.0020042897667735815, 0.0019279849948361516, 0.0019630603492259979, 0.0024566568899899721, 0.0023229881189763546, 0.0018784732092171907, 0.00202328828163445, 0.0020596836693584919, 0.0020741790067404509, 0.0021325899288058281, 0.00187059270683676, 0.0029367841780185699, 0.00217631203122437, 0.001827357686124742, 0.0020795303862541914, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 638, -125, 1986, 2740, 2369, -1235, 2316, -564, -1263, -387, 2635, -1129, 1395, 2611, 1321, 1202, -378, -345, -1001, 3317, 1161, -374, 1259, -236, -655, 1794, 731, 1163, 3482, 924, 1904, 637, 656, 2382, 3098, 1629, -332, 1702, 1310, -2341, -147, 717, -14, 1327, -690, 570, -690, 226, -4379, 1699, 514, -1933, 2998, -521, 1569, 544, 718, 1287, -384, -1336, 124, 662, 173, 1880, 2392, 1456, 2499, 2681, 2554, -510, 1444, 2559, 1815, -635, 2275, 3996, 502, -2521, 500, 782, 4173, 988, -496, -1516, 562, 539, 716, -984, 2382, -155, 2070, 424, 166, -1437, 164, 1034, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00029703465406782925, 0.00042208482045680285, 0.0002955986128654331, 0.00027784428675659001, 0.00025838255533017218, 0.0003539335448294878, 0.00025850758538581431, 0.00044634367804974318, 0.00031564832897856832, 0.00037141580833122134, 0.00026151217753067613, 0.00038616335950791836, 0.00036610657116398215, 0.00021558055595960468, 0.00025067871320061386, 0.00034449098166078329, 0.00037313252687454224, 0.00035812295391224325, 0.00027852007769979537, 0.00020013983885291964, 0.0003049929509870708, 0.00033419084502384067, 0.00028218771331012249, 0.0004877690807916224, 0.00048406267887912691, 0.0003162472858093679, 0.00034274603240191936, 0.00030720900394953787, 0.00020097735978197306, 0.00038153291097842157, 0.00025999505305662751, 0.0003653097664937377, 0.00046216900227591395, 0.0002551933575887233, 0.00020167198090348393, 0.0002980350109282881, 0.00028307619504630566, 0.00029954046476632357, 0.00030152394901961088, 0.00024074957764241844, 0.000328108697431162, 0.00029733576229773462, 0.00031786647741682827, 0.00023814085579942912, 0.00035532508627511561, 0.00029432351584546268, 0.00035570020554587245, 0.00035951362224295735, 0.00016166073328349739, 0.00024378928355872631, 0.00047983083641156554, 0.0002509185578674078, 0.00024431353085674345, 0.0002963089500553906, 0.00024864959414117038, 0.00041501026134938002, 0.00031975473393686116, 0.00029444595566019416, 0.00031700520776212215, 0.00022824355983175337, 0.00035847505205310881, 0.00029383593937382102, 0.00051161885494366288, 0.00033928468474186957, 0.00026243491447530687, 0.00032205626484937966, 0.00019242444250266999, 0.00026281311875209212, 0.00026507081929594278, 0.00029640892171300948, 0.00028053304413333535, 0.00028998678317293525, 0.00024538938305340707, 0.00031454226700589061, 0.00030403520213440061, 0.00019753810192923993, 0.00025611117598600686, 0.00025294144870713353, 0.00031376405968330801, 0.0002652740222401917, 0.00020396575564518571, 0.00027240690542384982, 0.00030375528149306774, 0.00028323737205937505, 0.00034589954884722829, 0.00037895998684689403, 0.00031391280936077237, 0.000353543262463063, 0.00031405207118950784, 0.00031643177499063313, 0.00029490594170056283, 0.00048200861783698201, 0.00030414696084335446, 0.00027020249399356544, 0.00053446675883606076, 0.00027705659158527851, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 0,77,-75,22,37,-42,91,52,-51,-1,21,-82,80,127,-67,20, 
  /* [1][0][][] */ -31,-2,-67,-21,-4,54,27,-127,26,-49,-16,-52,-9,-58,-57,7, 
  /* [2][0][][] */ -17,-22,32,81,18,42,-115,127,-27,9,80,-64,-16,-75,-39,71, 
  /* [3][0][][] */ 93,-94,73,-10,-6,-43,-36,127,-35,61,72,61,0,54,16,14, 
  /* [4][0][][] */ -42,-31,-4,51,-106,10,-22,-122,-7,9,28,-5,50,44,108,127, 
  /* [5][0][][] */ 127,30,-14,-6,-76,33,31,69,25,-15,49,78,109,33,-82,-2, 
  /* [6][0][][] */ 6,-46,-74,-68,-60,0,-10,-37,-57,-55,-19,39,89,51,127,-9, 
  /* [7][0][][] */ -70,21,-40,-80,1,-67,-78,23,-117,61,-69,-57,-127,-44,11,103, 
  /* [8][0][][] */ 47,38,77,14,58,29,78,12,70,-21,43,9,-127,-21,-85,15, 
  /* [9][0][][] */ -46,59,29,-53,-36,-21,33,-11,-44,58,-37,24,55,127,21,37, 
  /* [10][0][][] */ 84,63,-41,52,-19,-11,39,-45,-68,-48,-61,-112,-127,-54,22,85, 
  /* [11][0][][] */ 55,-5,62,-3,-19,-34,12,98,-95,17,-35,8,-6,-7,55,127, 
  /* [12][0][][] */ -48,-39,5,3,19,2,107,32,-54,39,2,1,3,78,-55,127, 
  /* [13][0][][] */ 19,22,27,50,127,38,87,111,-55,98,-77,-59,37,83,-106,-29, 
  /* [14][0][][] */ -119,111,-8,-26,-3,-1,62,15,-55,21,127,6,-83,16,-44,52, 
  /* [15][0][][] */ -8,-9,-127,-43,90,-37,-96,-41,-15,-37,-25,-79,-16,-85,-45,40, 
  /* [16][0][][] */ 105,-7,4,-17,36,-22,35,-22,-31,-4,127,34,33,6,-28,6, 
  /* [17][0][][] */ 10,17,-20,-79,-9,-54,116,-127,8,-11,-48,29,33,75,13,50, 
  /* [18][0][][] */ 31,125,-11,-58,66,-85,-27,-52,-46,127,-31,-5,-32,57,-21,-35, 
  /* [19][0][][] */ -68,-117,127,-100,67,-125,22,-28,60,38,81,100,23,-10,94,-58, 
  /* [20][0][][] */ -19,88,63,6,1,-1,19,-37,80,9,97,-16,-127,-21,-92,4, 
  /* [21][0][][] */ -60,44,18,11,65,34,58,52,-127,45,-43,8,-24,19,-55,-37, 
  /* [22][0][][] */ 23,-91,43,9,10,-127,101,2,8,-42,-42,-61,49,-67,-57,-43, 
  /* [23][0][][] */ -49,-99,55,76,21,-13,30,-43,25,-23,60,2,12,79,65,127, 
  /* [24][0][][] */ -17,-15,31,86,44,26,-42,-127,77,34,-35,33,-10,17,-43,-2, 
  /* [25][0][][] */ -5,32,20,-57,-37,-7,16,-47,-27,56,-50,-14,44,127,30,15, 
  /* [26][0][][] */ -62,67,9,23,25,-84,0,-34,9,27,7,78,14,5,-89,127, 
  /* [27][0][][] */ -12,-127,-51,-3,-73,93,-1,-67,10,-41,65,-28,39,-48,-111,-16, 
  /* [28][0][][] */ -33,-6,38,76,20,4,-35,-121,-127,52,97,-2,80,9,-54,-18, 
  /* [29][0][][] */ -127,96,-27,-34,-29,16,-113,-69,-46,-27,-1,10,13,-58,-120,67, 
  /* [30][0][][] */ 37,61,-51,68,-89,-83,-61,-6,-46,5,12,-96,127,18,-15,95, 
  /* [31][0][][] */ 127,22,-54,-27,-75,20,101,37,-72,-2,54,61,55,19,-27,19, 
  /* [32][0][][] */ -36,-23,127,8,-17,73,83,10,-10,-1,-12,24,0,55,53,38, 
  /* [33][0][][] */ -12,32,-60,-39,-11,43,127,37,14,-9,28,-78,83,124,-58,35, 
  /* [34][0][][] */ -114,-13,115,36,44,-41,127,2,-119,40,33,-67,34,65,-56,-57, 
  /* [35][0][][] */ 0,17,-42,31,-65,123,-27,-9,-5,127,-12,79,-65,79,31,29, 
  /* [36][0][][] */ -5,-65,127,-49,-52,21,-41,-12,15,19,-53,72,1,-86,-35,43, 
  /* [37][0][][] */ 81,-16,73,-31,107,-87,-35,31,-67,127,-69,7,-83,-35,93,-11, 
  /* [38][0][][] */ 29,41,8,-105,0,-56,-97,70,-93,60,-88,-43,-66,-127,-104,68, 
  /* [39][0][][] */ -74,27,-53,-40,-89,-87,77,6,-127,-44,14,79,29,4,-6,50, 
  /* [40][0][][] */ 127,39,17,-81,-83,32,29,-51,-34,-19,-53,-91,13,60,33,34, 
  /* [41][0][][] */ 101,-82,-58,-58,-12,-16,-41,-34,64,-31,1,-59,127,-73,40,-30, 
  /* [42][0][][] */ -7,-90,-50,127,7,-120,-125,17,11,2,14,61,-94,78,-69,-4, 
  /* [43][0][][] */ -106,-62,-48,-126,-64,-7,-1,80,54,-127,-45,46,-23,-47,-41,109, 
  /* [44][0][][] */ -34,47,36,-36,-33,-25,35,98,117,-68,78,106,127,44,-15,11, 
  /* [45][0][][] */ 21,81,-102,86,127,-114,-44,-77,96,-70,91,-59,-11,7,-71,79, 
  /* [46][0][][] */ -24,-42,12,-5,86,-17,38,21,-5,127,-28,-106,35,58,-48,80, 
  /* [47][0][][] */ 82,-41,-32,-13,66,-21,-37,-68,-5,127,-27,35,-5,-105,-89,18, 
  /* [48][0][][] */ 15,21,-12,-127,-11,-65,120,-124,4,7,-41,61,64,70,-5,48, 
  /* [49][0][][] */ -50,127,-68,34,56,-65,68,65,-32,21,49,-84,-24,91,116,-93, 
  /* [50][0][][] */ 13,43,-20,-2,-127,5,-74,-60,58,64,29,28,-41,-44,-1,31, 
  /* [51][0][][] */ 127,-42,-50,-20,-52,78,-84,-48,39,-21,-38,68,-26,-64,-6,47, 
  /* [52][0][][] */ -31,-48,33,77,-27,-98,-127,-5,-31,-50,-35,-70,5,-64,26,71, 
  /* [53][0][][] */ 14,90,51,-124,3,112,96,-12,-21,-29,0,-29,93,-127,-4,65, 
  /* [54][0][][] */ 34,124,4,-25,-3,-95,-106,53,5,-29,-41,127,71,92,24,59, 
  /* [55][0][][] */ -42,-21,46,32,40,-32,99,83,-85,3,18,19,127,38,-1,6, 
  /* [56][0][][] */ 127,18,12,14,-55,95,-50,-78,-32,49,-75,11,-45,104,-6,46, 
  /* [57][0][][] */ -47,-46,-37,-22,-69,-94,70,-25,-127,-20,57,51,22,27,-9,57, 
  /* [58][0][][] */ 40,-56,63,26,10,-52,-13,9,33,-8,-127,-24,17,-28,-40,38, 
  /* [59][0][][] */ 83,8,-127,92,0,26,101,-39,-71,-43,28,-99,-120,-60,26,123, 
  /* [60][0][][] */ -4,23,-13,22,-23,-23,-20,5,-40,-66,61,127,-39,-122,-35,0, 
  /* [61][0][][] */ -23,15,85,-83,-78,66,-2,127,-22,-83,42,65,106,-13,22,117, 
  /* [62][0][][] */ 85,38,-11,-127,-24,-4,8,-48,-14,31,-33,49,30,-14,-94,-70, 
  /* [63][0][][] */ -8,-33,4,-2,-57,-49,-47,15,-76,-3,-27,-12,127,-10,41,-6, 
  /* [64][0][][] */ 28,-7,-12,48,-108,-43,-25,-71,45,127,34,16,53,-48,-43,122, 
  /* [65][0][][] */ -24,-9,-20,-19,-79,63,22,-31,45,-92,89,-48,73,60,-127,65, 
  /* [66][0][][] */ -104,111,-96,-102,43,-45,-111,-86,-89,98,86,-16,-127,-52,66,46, 
  /* [67][0][][] */ 4,-38,-127,-113,60,70,11,-30,-35,3,49,-10,35,34,19,57, 
  /* [68][0][][] */ 51,37,-5,-36,-60,56,20,53,-56,69,126,-31,-21,-48,-127,-17, 
  /* [69][0][][] */ 83,-127,52,-62,11,-121,-25,120,-7,57,77,94,-16,68,-32,7, 
  /* [70][0][][] */ 63,17,107,20,77,-36,127,-1,35,4,-64,32,-76,50,-68,28, 
  /* [71][0][][] */ 11,30,103,-72,-127,-69,13,11,-25,-14,16,-104,-75,6,9,27, 
  /* [72][0][][] */ -54,-108,20,-109,63,-24,12,30,-58,19,-121,-5,58,115,-58,127, 
  /* [73][0][][] */ 17,24,41,2,119,-75,-43,-2,-17,85,-82,37,-94,-58,127,-26, 
  /* [74][0][][] */ -111,-10,-120,-56,59,-42,-33,27,-73,23,-127,-26,-30,-52,-54,92, 
  /* [75][0][][] */ 101,-37,52,-46,19,-1,-127,-27,-9,-99,72,10,7,-10,-19,-5, 
  /* [76][0][][] */ -14,-64,-28,127,51,109,109,-52,96,-119,59,119,30,-81,-82,41, 
  /* [77][0][][] */ -38,-38,127,-25,23,-42,-30,-126,5,32,43,105,65,42,26,20, 
  /* [78][0][][] */ -49,16,3,-55,-2,-69,37,-7,13,-35,20,-115,-112,-87,-127,-66, 
  /* [79][0][][] */ -118,-97,-14,32,127,46,-14,30,34,43,-33,66,-53,-75,-79,-19, 
  /* [80][0][][] */ -5,-125,44,127,-31,-24,-97,80,-4,37,63,8,-74,-11,-7,76, 
  /* [81][0][][] */ 122,74,-6,92,-6,38,29,127,21,23,108,52,124,46,69,-23, 
  /* [82][0][][] */ -63,-3,10,-27,27,-127,-119,-84,2,93,-38,-23,-21,93,-77,-9, 
  /* [83][0][][] */ 106,-15,77,-35,-34,-8,-127,-11,29,-126,21,-53,-23,-13,12,-29, 
  /* [84][0][][] */ 9,-67,-88,31,127,54,41,33,-113,16,-103,-27,41,-41,-80,11, 
  /* [85][0][][] */ 6,74,35,-44,87,-7,45,-125,127,-23,50,11,105,-71,-3,26, 
  /* [86][0][][] */ 123,-28,127,53,1,-59,68,47,-76,-56,-93,-48,42,14,-58,10, 
  /* [87][0][][] */ 2,14,16,-70,74,-38,-42,0,40,-38,72,-33,-82,-127,0,22, 
  /* [88][0][][] */ -58,-38,41,-10,18,28,-63,-47,-3,13,-80,-127,-41,-47,-22,-9, 
  /* [89][0][][] */ -78,9,25,-68,28,8,-127,27,94,29,-73,-5,-8,-82,-48,-16, 
  /* [90][0][][] */ -14,-23,-30,-86,127,16,-67,48,48,70,25,-5,47,26,-79,-14, 
  /* [91][0][][] */ -34,-54,15,44,-51,-13,-10,60,-42,-54,25,-44,3,47,32,127, 
  /* [92][0][][] */ -27,79,-5,-11,-25,64,-96,49,-46,1,74,10,-25,127,48,32, 
  /* [93][0][][] */ -22,65,-49,-60,66,87,-72,13,73,76,73,66,-127,29,-56,91, 
  /* [94][0][][] */ 19,61,90,6,-127,-43,11,-6,13,-11,36,-21,-42,-16,8,-16, 
  /* [95][0][][] */ -4,40,48,-4,127,-22,-102,71,33,8,-95,95,-15,0,115,-45, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0021899775601923466, 0.0031119477935135365, 0.0021793900523334742, 0.0020484908018261194, 0.0019050033297389746, 0.0026094818022102118, 0.0019059252226725221, 0.0032908034045249224, 0.0023272125981748104, 0.0027383752167224884, 0.001928077545017004, 0.0028471059631556273, 0.0026992312632501125, 0.0015894327079877257, 0.0018482045270502567, 0.0025398638099431992, 0.0027510321233421564, 0.0026403695810586214, 0.0020534733776003122, 0.0014755913289263844, 0.0022486525122076273, 0.0024639228358864784, 0.002080514095723629, 0.0035962248221039772, 0.0035688981879502535, 0.0023316284641623497, 0.0025269985198974609, 0.0022649911697953939, 0.0014817662304267287, 0.0028129664715379477, 0.0019168918952345848, 0.0026933564804494381, 0.0034074804279953241, 0.0018814901122823358, 0.0014868875732645392, 0.0021973531693220139, 0.0020870647858828306, 0.0022084524389356375, 0.0022230762988328934, 0.0017749989638105035, 0.0024190803524106741, 0.0021921976003795862, 0.0023435666225850582, 0.0017557652899995446, 0.0026197414845228195, 0.0021699890494346619, 0.0026225070469081402, 0.0026506227441132069, 0.0011918925447389483, 0.0017974100774154067, 0.0035376977175474167, 0.0018499728757888079, 0.0018012752989307046, 0.0021846271120011806, 0.0018332441104575992, 0.0030597883742302656, 0.002357488265261054, 0.0021708917338401079, 0.0023372166324406862, 0.0016827945364639163, 0.0026429654099047184, 0.0021663941442966461, 0.0037720645777881145, 0.0025014786515384912, 0.0019348806235939264, 0.0023744569625705481, 0.0014187073102220893, 0.001937669119797647, 0.0019543145317584276, 0.0021853642538189888, 0.0020683144684880972, 0.0021380151156336069, 0.0018092072568833828, 0.0023190577048808336, 0.0022415912244468927, 0.0014564092271029949, 0.0018882568692788482, 0.0018648870754987001, 0.002313320292159915, 0.0019558127969503403, 0.0015037991106510162, 0.0020084020216017962, 0.0022395274136215448, 0.0020882529206573963, 0.0025502487551420927, 0.0027939968276768923, 0.0023144169244915247, 0.0026066044811159372, 0.0023154437076300383, 0.0023329886607825756, 0.0021742831449955702, 0.0035537539515644312, 0.0022424152120947838, 0.0019921495113521814, 0.0039405175484716892, 0.002042683307081461, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 6846, 11248, -5003, 2641, 563, 8219, -313, 4317, 14611, -4089, -9047, 7476, -12492, 13282, 6677, 8641, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.1780941905453801e-05, 7.6221134804654866e-05, 6.1074766563251615e-05, 7.7490418334491551e-05, 8.5682586359325796e-05, 9.3094065960031003e-05, 6.7160435719415545e-05, 4.2297022446291521e-05, 0.00011514029029058293, 8.5355837654788047e-05, 5.976456668577157e-05, 5.387582496041432e-05, 8.4281557064969093e-05, 6.6387328843120486e-05, 9.9520388175733387e-05, 8.7766442447900772e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -90,41,54,-18,-54,-17,-52,-3,-47,7,-8,-35,21,36,44,-25,23,9,81,8,12,-41,127,70,41,17,15,27,-54,-103,-83,14,-39,-41,24,5,7,29,5,22,-1,3,-72,23,-63,-21,2,87,-19,1,-48,-12,5,7,42,-42,-93,11,-9,84,51,21,-8,3,-29,-45,-40,30,-45,-62,5,-13,9,-7,-65,-50,-44,6,-39,1,-47,73,79,-71,4,40,9,60,29,-21,-11,-24,-25,-28,-60,6, 
  /* [1][0][][] */ 58,25,32,-50,-58,-23,0,-1,-1,24,44,-63,-4,-25,-72,-41,7,12,-49,35,-10,-70,5,73,-8,-64,-10,-36,68,-103,107,-73,50,26,-8,59,43,86,-26,-43,37,18,4,-3,-14,40,-127,-48,-60,-54,-2,-25,65,-47,-37,51,26,10,-17,8,4,59,-15,-89,-11,-21,-51,-16,4,-1,-66,-6,-52,-21,26,-77,13,28,27,-63,-9,-37,-83,-31,17,-41,-6,8,-66,-16,-54,53,34,65,-37,69, 
  /* [2][0][][] */ 88,-26,18,32,25,-68,62,7,-21,-9,-14,11,-63,-19,13,-21,-81,-57,-44,42,-13,-60,-47,23,0,-67,16,-21,-14,57,-46,117,-44,127,-26,27,-4,-25,-20,-12,-94,73,80,26,-62,12,-28,-20,25,9,-33,-46,52,-18,-5,59,34,-18,40,-2,8,46,-25,3,63,11,2,-7,17,43,-39,-22,34,46,54,38,40,-62,65,51,81,-21,-40,41,-52,41,14,66,23,9,-17,43,-45,40,-16,33, 
  /* [3][0][][] */ 11,7,-30,11,11,-15,-1,-68,-14,62,48,51,24,-5,-54,36,5,-48,21,11,0,127,32,-42,1,19,-25,2,75,-37,63,-13,-16,27,-26,-15,19,49,38,0,-71,-29,-32,24,-26,40,19,0,-32,-41,-11,-28,48,-94,-38,-41,21,88,-38,0,0,-7,-39,-2,25,42,-59,6,-25,-2,17,-61,-23,-44,25,-8,6,-8,-42,-34,-18,-4,-60,3,-7,-35,34,-30,9,33,31,-9,49,34,-43,56, 
  /* [4][0][][] */ 27,26,-30,11,21,26,-44,2,-37,65,84,-19,-11,-8,3,-54,17,-27,-22,51,19,-34,53,80,-70,1,-127,13,-40,-60,3,-1,-63,-45,15,55,14,40,10,27,-30,-53,37,-35,-11,0,-23,50,-41,45,16,24,37,-10,-75,19,47,-22,16,-11,32,-3,16,18,-43,8,-39,12,-40,32,-28,48,39,-61,-42,-48,21,-44,-1,17,-47,83,-81,10,-29,30,36,-42,44,5,17,11,-47,-36,41,36, 
  /* [5][0][][] */ -83,55,42,7,56,-27,79,-41,-29,27,-1,-17,31,-17,-9,-49,3,-45,52,25,-121,-34,-58,45,-58,-14,57,15,67,-78,-17,58,62,127,-19,55,-12,13,30,-20,-22,84,76,-38,-28,63,41,6,-15,27,-20,42,0,-38,48,-84,52,-67,-63,-53,48,94,-53,-16,78,-51,-97,-69,-56,-26,-58,-19,-21,2,-37,-52,31,-46,-53,-27,116,-13,21,-83,-93,41,28,1,-43,44,25,6,-13,27,14,100, 
  /* [6][0][][] */ 37,-22,-88,31,-36,-111,112,100,-75,70,-6,88,-113,-71,64,59,-5,-79,1,0,-27,-35,-56,-59,-69,46,89,24,38,34,90,-57,26,22,1,-76,8,3,21,82,-6,12,-49,-32,2,-62,-82,27,33,-97,-16,77,19,15,-23,-51,65,39,16,2,-104,49,-98,10,30,7,-10,60,30,17,-20,-75,-45,27,93,33,59,-31,53,-75,-19,-51,-66,74,2,-56,40,7,-38,57,55,50,-39,8,-26,127, 
  /* [7][0][][] */ 20,71,-44,-57,-36,-9,26,17,-71,35,-43,-51,-30,23,4,-21,-48,-53,-40,59,-15,127,1,27,-4,3,15,25,46,42,90,-36,84,29,-29,13,7,-20,14,34,-74,-8,14,-50,23,-38,76,-32,41,-71,-90,-33,-55,1,-16,-15,22,9,-114,2,-4,118,35,-28,-24,3,-53,24,-48,-18,-115,35,29,69,-39,54,-58,51,18,-75,-25,-60,62,-81,57,-21,-12,-13,-10,83,-75,38,51,-41,-48,0, 
  /* [8][0][][] */ 1,89,-45,43,-35,-33,-79,17,-90,-30,16,-4,-47,22,33,78,11,-44,12,17,41,-2,22,8,-48,64,-4,25,-4,-28,-39,-24,-25,-54,-25,-66,-49,27,32,0,5,-39,33,1,-44,-39,10,-4,-30,-27,46,74,5,-22,-64,112,-28,34,2,-34,-39,11,-1,54,-30,-65,-53,-5,-30,9,8,6,-17,-58,-127,-22,-49,32,-68,-45,-31,6,-42,-33,-14,4,32,36,19,57,-70,-3,-82,-122,24,-39, 
  /* [9][0][][] */ -22,17,-64,45,-20,-27,67,58,-8,40,-38,94,-29,-14,24,127,8,3,57,5,6,11,32,-94,-20,3,24,-8,14,-11,53,39,-33,4,0,-106,28,-17,-23,-15,-14,19,31,-26,-12,4,18,7,41,72,29,-12,-51,-66,14,-11,-9,-14,68,-16,-59,54,-46,-25,76,-3,-14,8,-71,14,39,31,-15,86,-12,-19,-26,20,-39,-1,54,-30,51,4,33,-17,-11,-28,-52,20,-6,8,53,25,-38,1, 
  /* [10][0][][] */ 75,-9,-45,-9,-42,-24,80,5,20,-30,-17,8,-86,-6,3,-5,-90,-34,16,29,33,36,26,18,-41,81,48,-9,-49,-75,-36,-3,88,-37,49,14,81,-91,97,122,19,-68,17,13,-21,-83,-9,61,32,86,-79,-46,-18,23,14,47,16,-62,72,49,-11,51,-76,-29,-11,-57,14,56,12,-17,-12,39,127,32,23,-82,31,-44,52,-12,-50,22,43,16,-38,2,8,39,-36,-5,19,58,57,70,-39,6, 
  /* [11][0][][] */ -68,-44,50,-62,22,-6,-15,-36,45,-41,-15,14,-4,4,22,32,-82,3,58,5,-51,19,-77,-109,19,18,-36,45,32,-64,44,-18,12,3,13,-31,-87,7,-127,12,-70,79,-41,67,20,8,0,-34,19,-39,-69,-52,11,42,101,-65,-42,-81,17,-48,-35,-62,-20,-121,6,-66,78,73,123,19,63,-42,-42,-23,68,-43,106,42,34,48,20,0,-21,107,81,12,-21,-18,-85,-59,-10,28,53,42,55,76, 
  /* [12][0][][] */ 23,-46,-1,-35,36,115,-7,46,38,62,-10,77,26,63,24,17,-68,48,10,43,125,-15,67,-84,43,21,-57,-73,-29,84,3,11,39,-1,5,-51,47,-20,-23,-35,15,-20,40,67,-15,42,0,-9,-49,20,-3,19,-29,-20,19,12,-61,53,9,52,30,-93,21,-104,-11,98,-1,-37,-8,-54,51,-3,-24,12,-1,51,-6,50,-69,-12,-38,24,127,19,-4,74,-41,-70,70,8,-77,51,68,3,-24,-102, 
  /* [13][0][][] */ -22,15,-5,-48,-43,-1,-11,-23,8,-38,-37,-57,68,-99,-48,-68,-34,-46,-73,-10,-92,-36,7,92,-19,9,99,0,0,-40,55,38,13,5,-127,102,-23,-67,35,-53,103,3,-10,15,0,-91,65,-34,87,-17,-47,21,8,0,-16,62,49,-59,-31,-16,49,40,-1,-77,-12,44,-37,45,-69,-33,-94,-11,-68,22,-47,-80,-106,21,48,87,-32,53,37,-71,63,52,30,-18,-23,-10,-11,16,-71,7,-15,-1, 
  /* [14][0][][] */ -9,11,-88,-24,76,81,-95,-16,37,-48,62,-8,7,-23,-44,-84,-57,28,24,127,9,-14,-10,15,1,30,-32,69,4,5,-24,20,75,-16,-36,-2,-24,47,81,6,55,0,25,16,-4,-49,52,-37,16,-27,-18,-25,57,7,-50,25,19,58,-98,-11,-13,-67,-24,-110,8,-43,-58,0,-63,49,-20,50,1,-42,-26,-28,45,-21,-54,-37,26,-10,-3,-29,-10,43,-12,-25,-25,59,69,11,12,-41,-56,-79, 
  /* [15][0][][] */ -95,-52,56,-52,14,-20,-36,-79,-8,17,-21,98,9,-19,34,116,-127,-29,26,-72,24,-44,-20,-99,66,-6,51,-63,-86,-118,-60,33,-52,70,83,-103,-5,-52,31,-25,-32,-3,27,-16,1,-11,80,106,-41,-16,27,-51,-64,61,4,-70,-111,-18,112,7,-32,30,-78,40,-67,1,14,23,47,-77,73,-41,59,-38,-31,-45,11,24,65,14,-29,78,64,47,-1,-11,-126,-4,-15,-49,-68,26,38,-40,-18,81, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0026256898418068886, 0.0032393981236964464, 0.0025956775061786175, 0.0032933426555246115, 0.0036415099166333675, 0.0039564976468682289, 0.0028543185908347368, 0.0017976234667003155, 0.004893462173640728, 0.0036276229657232761, 0.0025399939622730017, 0.002289722440764308, 0.0035819660406559706, 0.0028214615304023027, 0.0042296163737773895, 0.0037300738040357828, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 2299, -2319, -2642, -4071, -552, 1872, -881, -2680, 93, -6242, 6246, -704, -676, 8994, 8147, -3081, 15460, 2955, -3885, -47, 595, -1454, 38, -391, 328, -3870, -3660, -3989, -656, -9043, 1038, 1011, 8677, 670, -2254, 92, 252, -1195, -1417, 6045, 289, -295, 1431, -4945, 10046, 13788, -455, 14638, -2864, 11331, 11803, -3317, -285, -715, -1132, 9419, -3048, -514, 12226, 3881, 7950, 10754, 6276, -7597, 812, -485, -1124, 3390, -2231, -1120, 2859, 1480, 12076, -599, 1228, 12217, -468, 342, 9498, -1781, 423, 17097, -1876, 2870, 10327, -1232, -3427, -1352, 3179, -4768, 11609, 373, 3321, 1594, -4535, -3276, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00031116142054088414, 0.0002233017876278609, 9.6421419584657997e-05, 0.00019743565644603223, 0.00024962247698567808, 0.00027291430160403252, 0.00030998117290437222, 0.00020866339036729187, 0.00027597197913564742, 0.00016524730017408729, 0.00017384575039613992, 0.00078496302012354136, 0.00027404644060879946, 0.00012560912000481039, 0.00017551220662426203, 0.00018604959768708795, 0.00014852148888166994, 0.00023035578487906605, 0.00016181876708287746, 0.00011091815395047888, 0.00020642639719881117, 0.00031042896443977952, 0.00026035573682747781, 0.00029413177981041372, 0.00058361171977594495, 0.00025909833493642509, 0.00030167281511239707, 0.00011326333333272487, 0.0002305191446794197, 8.5401712567545474e-05, 0.00040913204429671168, 0.00020493297779466957, 0.00022111638099886477, 0.00019549175340216607, 0.00030250597046688199, 0.00041992813930846751, 0.00017173845844808966, 0.00027821047115139663, 0.00033266932587139308, 0.00010264790762448683, 0.00018052587984129786, 0.0002050537004834041, 0.00029358183383010328, 0.00013973792374599725, 0.00011906590953003615, 8.6701336840633303e-05, 0.00021816724620293826, 0.00011679570161504671, 0.00021653708245139569, 7.7131619036663324e-05, 0.00014310315600596368, 0.00011832264863187447, 0.00031911511905491352, 0.00025677465600892901, 0.0002257703454233706, 0.00017259536252822727, 0.00019776762928813696, 0.0002228774392278865, 0.00019399249868001789, 0.00018829217879101634, 0.00013595142809208483, 0.0001940976653713733, 0.000137503826408647, 0.00011774660379160196, 0.00016625173157081008, 0.00028585270047187805, 0.00053090217988938093, 0.00019781681476160884, 0.00023576656531076878, 0.00020676486019510776, 0.00025232080952264369, 0.00022717508545611054, 0.00015747666475363076, 0.00026935077039524913, 0.00028308943728916347, 9.1411326138768345e-05, 0.00015470682410523295, 0.00019895574951078743, 0.00017759486217983067, 0.00024243140069302171, 0.00030051710200496018, 8.874414925230667e-05, 0.00029712135437875986, 0.00015510711818933487, 0.00012236679322086275, 0.00022298387193586677, 0.00015426780737470835, 0.00031568104168400168, 0.0002690725086722523, 0.00021294901671353728, 0.00011845722474390641, 0.00036398673546500504, 0.00020711540128104389, 0.00021218179608695209, 0.00013983571261633188, 0.00038646991015411913, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 16,127,5,2,-35,9,39,53,42,-51,-77,33,-16,18,11,-20,-100,17,-1,24,19,54,63,57,11,-15,-42,1,5,9,5,-26,-35,-5,-32,80,-11,56,6,2,11,-44,-16,25,-104,-34,8,2,-17,-96,-27,9,20,39,-8,-22,-62,-51,-37,-127,-108,-7,-105,12,-41,41,22,-14,-16,43,31,40,-59,15,30,0,7,-42,-58,26,-15,-101,52,-46,-60,-36,-29,4,-112,8,-102,36,87,-25,56,6, -47,-15,-10,71,-15,82,-18,8,62,41,-127,50,-33,-42,-89,100,-72,60,46,127,100,5,107,127,36,17,27,55,5,127,-22,-127,91,70,11,39,50,106,-24,-127,127,-10,73,127,-68,-72,127,-78,-2,-127,-86,-17,-15,127,-21,-127,25,41,-82,-54,-10,-124,-47,107,-36,97,127,-41,-1,127,107,47,-97,28,-43,-90,35,-53,-40,127,-21,-41,127,-69,-68,-38,94,27,104,127,-57,-5,127,-39,127,34, 7,-94,-4,26,-11,-16,-30,58,26,82,-52,-5,-19,32,38,-109,-51,26,15,-2,38,62,73,104,25,-19,41,42,13,30,-4,-63,-24,-93,-31,45,-6,-23,29,17,5,24,-6,55,7,-63,-2,10,20,-71,30,16,32,-16,0,-10,66,-75,-7,-49,-127,10,-82,-21,26,20,-91,-24,-19,-16,9,-11,12,-28,-16,2,0,-23,-57,-1,-8,-83,46,-9,97,-30,5,-42,-97,17,-29,24,7,28,8,-7, 
  /* [0][1][][] */ 84,7,52,127,4,-50,127,52,-40,-103,-40,127,0,-127,-62,1,-41,-67,47,9,-127,-7,-127,-55,-10,38,-112,127,-62,57,127,56,43,54,11,127,-127,58,-10,-81,59,-127,12,53,-127,-92,7,-105,-91,-60,-116,35,127,-55,100,-40,-114,3,-48,13,-48,-38,-43,50,-116,-27,113,-106,-57,20,-48,-127,-127,88,127,-112,122,71,-88,-34,127,-127,-30,94,34,10,-5,48,-4,8,-54,40,-18,-101,100,-8, -127,23,-41,100,-83,-127,-122,-127,73,17,6,61,-88,-122,-64,127,-127,-127,127,125,24,-127,-103,72,-127,127,31,65,-75,-16,-110,48,-127,90,127,-5,3,127,127,-93,-50,54,15,53,-7,-127,-70,-127,8,-96,-127,127,38,76,74,-69,48,24,77,-4,-27,1,-127,127,-8,-127,115,127,23,60,-127,-76,-39,59,-117,-127,127,127,122,-41,-78,3,-94,70,-120,-87,127,127,127,115,-127,-127,-127,-75,117,127, 43,-11,113,86,-1,-29,4,25,-63,127,-64,61,31,-15,-127,92,7,-40,7,-40,-123,10,-69,-83,3,23,127,-7,127,116,20,-110,-48,-127,-4,91,-99,-30,-23,-21,-9,115,26,84,-11,-32,-9,-111,127,-95,-35,-1,87,-88,-127,55,127,-9,-127,59,-110,-50,10,59,127,-43,-42,-9,-60,-9,-47,-93,-83,-127,-14,-72,-25,-52,-127,-38,-66,-95,-13,127,-127,18,39,-14,-49,-19,-3,38,-42,127,5,-11, 
  /* [0][2][][] */ 25,-99,31,-16,21,33,46,61,-42,-22,22,-87,3,-12,-1,10,-33,-6,-14,58,2,40,-8,-30,16,51,-4,-19,-24,14,-4,11,-20,-18,-20,-28,54,18,19,-44,-1,20,-10,-7,-27,-26,-14,7,5,0,-20,23,-38,8,-19,-5,-17,-4,23,27,-65,14,40,-13,-36,44,-24,-20,26,6,2,90,-1,11,6,-6,-43,-20,-30,1,20,-39,-24,-58,-73,39,-57,-1,-92,23,-5,20,-32,-11,8,-9, -64,26,127,-11,127,76,-14,27,-127,27,-54,-23,127,-12,-31,-3,3,56,-9,-68,28,8,47,-40,84,-44,6,23,-17,108,-21,6,-70,44,16,9,65,28,25,-127,-15,-6,-127,25,34,7,-33,-57,8,-90,-44,72,76,-51,-37,-67,-13,127,-45,16,123,-127,97,56,-24,35,-30,10,127,-32,6,106,-86,9,-35,-67,-11,-66,-76,-30,-2,-87,-19,-56,-43,127,11,-17,93,31,40,21,-44,-23,-6,3, -5,92,38,-8,-1,-13,-29,33,2,76,12,-13,6,1,-6,29,-50,10,-24,9,-2,42,3,-50,27,42,12,37,1,32,-24,-81,-33,-29,-8,-45,43,-47,2,-10,-6,-20,13,-15,-20,0,-20,-5,29,11,-6,8,16,-7,1,38,-8,2,-5,55,-84,-5,41,-27,46,18,-54,24,8,-12,28,22,36,-20,-15,-11,-39,-10,-13,16,-8,-54,-9,-8,-21,34,-24,-34,-92,20,10,11,-35,0,-22,-10, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.013224359601736069, 0.0094903260469436646, 0.0040979101322591305, 0.0083910152316093445, 0.010608955286443233, 0.011598858051002026, 0.013174199499189854, 0.0088681941851973534, 0.011728809215128422, 0.0070230104029178619, 0.0073884441517293453, 0.033360928297042847, 0.01164697390049696, 0.0053383875638246536, 0.0074592684395611286, 0.0079071074724197388, 0.0063121630810201168, 0.0097901206463575363, 0.0068772975355386734, 0.0047140214592218399, 0.0087731219828128815, 0.013193231076002121, 0.011065118946135044, 0.012500600889325142, 0.024803498759865761, 0.011011678725481033, 0.012821094132959843, 0.0048136916011571884, 0.0097970636561512947, 0.0036295726895332336, 0.017388110980391502, 0.008709651418030262, 0.0093974461778998375, 0.0083083994686603546, 0.012856503948569298, 0.01784694567322731, 0.0072988844476640224, 0.011823944747447968, 0.014138446189463139, 0.0043625361286103725, 0.0076723499223589897, 0.0087147820740938187, 0.012477227486670017, 0.0059388615190982819, 0.005060301162302494, 0.0036848066374659538, 0.0092721078544855118, 0.0049638170748949051, 0.0092028258368372917, 0.0032780936453491449, 0.0060818842612206936, 0.0050287125632166862, 0.013562392443418503, 0.010912922210991383, 0.0095952395349740982, 0.0073353028856217861, 0.0084051238372921944, 0.0094722909852862358, 0.0082446811720728874, 0.0080024171620607376, 0.0057779354974627495, 0.0082491505891084671, 0.0058439122512936592, 0.0050042304210364819, 0.007065698504447937, 0.012148739770054817, 0.02256334200501442, 0.0084072146564722061, 0.010020079091191292, 0.0087875062599778175, 0.010723634622991085, 0.0096549410372972488, 0.0066927578300237656, 0.011447407305240631, 0.01203130092471838, 0.0038849813863635063, 0.006575040053576231, 0.008455619215965271, 0.0075477813370525837, 0.010303334333002567, 0.012771977111697197, 0.0037716261576861143, 0.012627657502889633, 0.0065920525230467319, 0.0052005886100232601, 0.0094768144190311432, 0.0065563819371163845, 0.013416443951427937, 0.011435581371188164, 0.0090503329411149025, 0.0050344318151473999, 0.015469436533749104, 0.0088024046272039413, 0.00901772640645504, 0.0059430175460875034, 0.016424970701336861, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 3363, 3008, 771, -997, 4223, 5924, 6521, 1815, -428, 5637, 718, -5603, 2545, 2405, 513, -853, 3398, 6418, -141, 54, 4148, 9956, 8896, -1984, -2688, -899, 9285, -57, 946, 1056, 10824, -928, 8739, 1507, 3489, -4257, 410, -3633, 69, 1293, 2215, 903, 1441, -295, 605, 1836, 2677, 3881, 2787, 1799, 4345, 2460, -2993, 1387, 888, 1918, 1177, 1829, 7448, 1119, -981, 6082, 2218, 3112, 3004, 7013, -4919, 2122, 4769, -440, 5185, 1423, 2420, 2440, 3139, 1407, -456, 1821, 2248, 2010, 2224, 3101, 5128, 245, 1853, 3489, 391, -733, 14056, -352, 481, -1432, 10988, 2005, -175, -1240, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00022431075922213495, 0.00013403834600467235, 0.00018233494483865798, 0.00026171514764428139, 0.00017263161134906113, 0.0001316495327046141, 0.00012582086492329836, 0.00015872897347435355, 0.00020600249990820885, 0.00013231400225777179, 0.00025751127395778894, 0.00010446456144563854, 0.00018426592578180134, 0.00020340057380963117, 0.00017959193792194128, 0.00017717517039272934, 0.00017992680659517646, 0.00012020406575175002, 0.00015007769980002195, 0.00018085991905536503, 0.00015223897935356945, 8.9545246737543494e-05, 0.00010086959082400426, 0.00018750710296444595, 0.00021370702597778291, 0.0001406263472745195, 9.6026516985148191e-05, 0.00014430619194172323, 0.00019375357078388333, 0.00020658360153902322, 8.5306695837061852e-05, 0.00025702177663333714, 9.668834536569193e-05, 0.00029875137261115015, 0.00020749286341015249, 0.00015115442511159927, 0.00026096991496160626, 0.00017029659647960216, 0.00017892503819894046, 0.0002350928116356954, 0.00019040232291445136, 0.00022706044546794146, 0.0002467540034558624, 0.00022690797050017864, 0.00037589130806736648, 0.00020866759587079287, 0.00019679663819260895, 0.00015670646098442376, 0.00020222732564434409, 0.00024104946351144463, 0.00016967506962828338, 0.00017113742069341242, 0.0001543963880976662, 0.00023474318732041866, 0.00023343885550275445, 0.00021944000036455691, 0.00021315367484930903, 0.00019464730576146394, 0.00011502821143949404, 0.00019093744049314409, 0.00024086052144411951, 0.00012014358071610332, 0.00022716696548741311, 0.00020336300076451153, 0.00018367517623119056, 0.00011355280003044754, 0.00014055726933293045, 0.00019896679441444576, 0.00013498871703632176, 0.00027227052487432957, 0.00014059664681553841, 0.00015521627210546285, 0.00017263705376535654, 0.00015285666449926794, 0.0001746425696182996, 0.00014308381651062518, 0.00020530777692329139, 0.00016884501383174211, 0.00016907337703742087, 0.00023590122873429209, 0.00018156277656089514, 0.0001302193122683093, 0.00014201908197719604, 0.00016757434059400111, 0.00019215486827306449, 0.00018580439791548997, 0.00023880253138486296, 0.00031154541647993028, 6.851802027085796e-05, 0.00027035537641495466, 0.00027815563953481615, 0.00018027698388323188, 8.0382160376757383e-05, 0.00019552523735910654, 0.00022952153813093901, 0.00012937556311953813, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -31,49,-11,-28,-19,-53,-54,-26,57,-30,16,-53,86,-76,32,-127, 
  /* [1][0][][] */ -114,44,-118,-82,-74,30,-11,67,-54,-4,85,-62,37,127,28,20, 
  /* [2][0][][] */ -38,-3,-74,0,-8,-43,27,-44,-105,124,76,0,60,71,-44,127, 
  /* [3][0][][] */ -57,-58,-6,-56,-74,8,-38,-107,-11,11,44,-77,-47,-31,-127,-25, 
  /* [4][0][][] */ 95,8,-25,53,-75,-10,-127,61,21,78,22,69,24,5,-53,-88, 
  /* [5][0][][] */ -100,41,-96,-42,47,-80,-4,-58,76,-50,-3,-74,50,-127,-119,-95, 
  /* [6][0][][] */ 13,-52,-47,12,-84,67,25,-50,-19,-61,125,-24,4,-19,-127,7, 
  /* [7][0][][] */ -18,117,127,-96,57,77,2,-66,39,58,-86,-14,44,-5,29,56, 
  /* [8][0][][] */ -48,7,58,-12,36,9,87,127,-58,0,-88,-71,23,89,-57,-83, 
  /* [9][0][][] */ 32,40,88,50,-106,-28,-87,-124,81,8,122,23,-68,-127,31,-33, 
  /* [10][0][][] */ -14,-97,15,-51,-127,67,30,22,-22,-63,-8,26,-18,36,-94,18, 
  /* [11][0][][] */ 115,-56,-22,70,-103,-32,65,6,119,119,-48,49,31,-74,-42,127, 
  /* [12][0][][] */ -65,-77,127,-18,61,-25,37,48,65,-42,120,61,-34,-1,-99,35, 
  /* [13][0][][] */ 14,-38,15,30,3,-1,127,43,-105,15,10,18,-18,112,112,-74, 
  /* [14][0][][] */ 127,-87,112,-3,88,47,107,59,77,67,48,48,80,-40,31,-70, 
  /* [15][0][][] */ -7,127,20,-40,40,120,-67,78,-45,-4,-36,-28,-43,123,-20,-39, 
  /* [16][0][][] */ -33,57,127,-54,33,88,18,-18,2,13,-31,40,89,-11,86,124, 
  /* [17][0][][] */ 38,113,47,-113,6,-41,-7,-60,-74,58,-19,36,-41,-26,127,-45, 
  /* [18][0][][] */ -86,12,-71,-92,126,94,-40,-65,33,67,127,59,-19,89,-49,-10, 
  /* [19][0][][] */ 49,127,71,57,42,-30,0,5,-35,103,46,95,48,48,-43,49, 
  /* [20][0][][] */ 105,-7,2,64,-73,-13,-57,53,-43,-42,-127,-38,100,-42,41,-5, 
  /* [21][0][][] */ -82,-91,-12,127,-28,-4,-126,59,8,1,18,26,-41,25,-50,5, 
  /* [22][0][][] */ -14,-10,-74,-44,127,-6,-26,56,58,82,44,55,-12,18,-18,37, 
  /* [23][0][][] */ -68,10,-9,20,5,58,83,62,-9,127,-16,-11,-10,26,-61,-15, 
  /* [24][0][][] */ 15,-65,29,-6,127,23,85,-19,56,33,39,12,-35,34,-2,0, 
  /* [25][0][][] */ 127,-53,87,9,4,-15,-26,76,118,-29,-65,1,109,-60,92,34, 
  /* [26][0][][] */ 86,59,127,72,87,3,-70,-37,-8,69,20,117,46,-57,23,-57, 
  /* [27][0][][] */ -65,66,-78,16,-26,116,24,-100,11,-102,120,7,34,-18,127,102, 
  /* [28][0][][] */ -36,45,-67,-127,28,-65,16,-72,-92,75,-55,41,-39,30,-10,58, 
  /* [29][0][][] */ 81,78,-66,32,42,96,-47,-19,50,26,4,63,-127,6,-27,70, 
  /* [30][0][][] */ -12,88,-127,-69,79,-41,8,14,-56,55,-70,-9,5,75,-6,109, 
  /* [31][0][][] */ 30,-88,82,54,72,-61,-83,39,-46,-3,40,-43,-83,49,37,127, 
  /* [32][0][][] */ -78,62,2,41,-107,76,32,85,41,-127,19,-93,49,61,35,46, 
  /* [33][0][][] */ -71,-14,54,93,-12,17,-53,17,-33,-39,19,-9,-10,-16,8,127, 
  /* [34][0][][] */ -24,3,-91,-83,52,-6,-18,68,18,-2,13,-3,-56,-28,-30,127, 
  /* [35][0][][] */ 94,-11,13,-16,-17,0,-92,-8,-23,-127,-60,24,9,-21,60,-16, 
  /* [36][0][][] */ -17,4,-105,-2,35,127,10,37,-2,12,36,14,-3,12,-83,43, 
  /* [37][0][][] */ 47,61,46,-42,61,-127,33,-3,-107,50,-67,-28,2,19,88,40, 
  /* [38][0][][] */ -39,127,27,-72,42,19,76,-82,-2,-10,-109,34,-49,-94,-102,20, 
  /* [39][0][][] */ 93,35,-127,-101,-20,-19,18,-59,12,-17,5,-38,63,3,-109,-63, 
  /* [40][0][][] */ -37,22,-76,-79,-52,-13,17,-127,-12,8,0,-27,41,89,47,58, 
  /* [41][0][][] */ -40,-94,-6,127,-4,0,-68,2,8,-43,57,-64,-70,-9,2,20, 
  /* [42][0][][] */ -17,74,-28,-127,25,18,16,-29,54,6,-46,15,83,-11,-19,20, 
  /* [43][0][][] */ 5,54,5,2,127,21,22,17,9,28,-10,-92,-126,-52,-19,-15, 
  /* [44][0][][] */ 64,-12,16,28,-34,-20,9,41,19,-31,32,5,127,3,-53,-16, 
  /* [45][0][][] */ 17,-92,-62,46,-31,-84,21,40,36,-30,6,28,-90,127,31,-48, 
  /* [46][0][][] */ -16,-98,55,73,-3,-6,-127,72,38,-68,41,-33,25,89,76,117, 
  /* [47][0][][] */ -42,-64,22,63,13,5,54,23,3,-65,-127,-24,40,-35,-69,8, 
  /* [48][0][][] */ -87,85,-4,-29,12,62,-7,-127,12,-9,42,-34,50,-115,-47,6, 
  /* [49][0][][] */ -82,9,18,-14,5,6,121,127,-55,-25,11,-7,-47,43,-44,25, 
  /* [50][0][][] */ 56,8,-79,32,46,-122,-52,-1,-72,54,-52,-1,10,-105,-127,-58, 
  /* [51][0][][] */ -42,88,-28,108,-43,28,-65,-95,-55,-82,-5,-61,-6,50,-5,127, 
  /* [52][0][][] */ -127,7,18,-17,45,52,57,7,9,-60,-42,-42,-99,-39,-125,-9, 
  /* [53][0][][] */ -40,-82,-51,-127,-48,-12,2,90,39,-66,-62,27,-22,27,61,97, 
  /* [54][0][][] */ 26,-64,-10,7,-77,54,48,-14,-38,-91,71,42,-2,-40,-127,57, 
  /* [55][0][][] */ -4,-33,-29,25,49,-24,59,70,-42,-66,-127,-37,56,-35,-14,24, 
  /* [56][0][][] */ 62,-34,-40,-23,-127,-1,-117,3,-18,-7,-38,31,104,-48,35,41, 
  /* [57][0][][] */ -36,15,23,-44,127,35,39,27,-38,21,4,-11,-41,61,-99,-29, 
  /* [58][0][][] */ 42,8,-2,-33,38,-22,-40,-52,36,-127,-66,4,-74,-34,-41,47, 
  /* [59][0][][] */ -58,-20,0,5,7,47,-101,-47,70,127,-69,15,-10,5,-14,11, 
  /* [60][0][][] */ 30,-51,0,24,-127,-38,32,-2,-7,34,-25,39,1,-35,40,33, 
  /* [61][0][][] */ 23,40,-90,-16,-57,-24,-127,-84,-28,0,35,103,61,-57,106,69, 
  /* [62][0][][] */ 67,-13,18,-25,-7,25,32,127,-67,94,32,75,30,31,78,84, 
  /* [63][0][][] */ 15,-112,-9,-14,-63,17,45,-28,-6,-16,-4,-14,-30,127,98,30, 
  /* [64][0][][] */ -24,-6,-127,-28,9,41,41,-11,-6,-102,62,-4,55,-40,-57,114, 
  /* [65][0][][] */ -24,-15,42,75,63,-31,103,93,-35,-14,-127,-89,28,111,-88,4, 
  /* [66][0][][] */ -21,-127,3,-85,-75,-107,27,-15,0,-21,4,99,-39,-36,-52,96, 
  /* [67][0][][] */ -6,-70,-73,-29,-88,91,2,-127,-78,-15,-51,-76,32,-12,-46,40, 
  /* [68][0][][] */ 127,32,15,-15,-75,-7,-56,-55,-71,-104,-18,-3,36,-22,81,-50, 
  /* [69][0][][] */ 49,12,31,-26,-3,-49,-45,27,-21,127,-21,13,-12,23,72,-24, 
  /* [70][0][][] */ 36,-10,-32,69,-114,26,-3,-108,106,127,32,51,46,-52,-13,27, 
  /* [71][0][][] */ 89,-70,62,127,-88,-10,18,-7,98,37,-42,21,72,-68,21,18, 
  /* [72][0][][] */ -20,-47,46,94,49,5,-127,80,76,-8,45,0,-45,-64,-59,82, 
  /* [73][0][][] */ 88,3,63,-127,61,-102,-92,65,-13,106,-55,21,16,-94,38,-43, 
  /* [74][0][][] */ 97,-14,30,28,-127,-35,54,2,-67,-42,5,-43,45,-75,10,10, 
  /* [75][0][][] */ 88,127,-118,21,51,46,-10,-24,-29,-23,60,79,-98,65,65,80, 
  /* [76][0][][] */ -58,-40,-6,-38,-58,-6,83,9,-67,16,93,35,-48,-127,-15,87, 
  /* [77][0][][] */ -51,127,-27,33,-82,-97,45,81,50,-57,-27,105,-20,53,0,86, 
  /* [78][0][][] */ 125,72,-80,25,-101,43,-127,-29,-27,-1,-66,17,40,-110,36,86, 
  /* [79][0][][] */ -71,-53,127,59,-21,-70,-58,-30,-8,-5,-6,-1,-75,94,-68,46, 
  /* [80][0][][] */ 62,90,15,-127,-18,37,108,-33,28,8,-53,10,95,-53,4,-1, 
  /* [81][0][][] */ 31,-83,13,-124,110,67,-9,127,127,26,-16,-45,-36,11,-99,-74, 
  /* [82][0][][] */ 66,35,73,2,127,-93,25,50,3,87,-41,19,-8,-35,23,-95, 
  /* [83][0][][] */ -15,125,28,-16,104,85,111,88,-38,79,-27,-63,-70,127,-45,-101, 
  /* [84][0][][] */ 51,-86,11,72,-2,-108,-84,54,-127,61,-88,-44,-107,86,-1,-64, 
  /* [85][0][][] */ -94,66,-42,-22,-17,-57,-41,-57,-8,39,9,-89,-127,-92,-73,51, 
  /* [86][0][][] */ -13,54,116,106,21,-22,47,13,10,37,-58,-65,32,80,-127,-55, 
  /* [87][0][][] */ -16,54,127,-42,-103,-38,11,15,16,-19,6,44,-38,30,0,-3, 
  /* [88][0][][] */ -12,-80,-127,18,46,37,-17,12,-17,-104,-122,-99,118,-20,5,41, 
  /* [89][0][][] */ 25,6,26,-127,7,-61,-53,41,116,1,29,-81,11,-32,50,-64, 
  /* [90][0][][] */ -2,65,29,26,-22,56,52,127,20,-62,-23,123,37,4,-58,66, 
  /* [91][0][][] */ -55,3,-35,63,76,60,-22,-112,-27,33,-5,6,-99,-127,-83,-1, 
  /* [92][0][][] */ -31,76,2,-44,-127,-4,-95,58,-53,61,97,82,-15,-6,67,8, 
  /* [93][0][][] */ 94,43,79,56,-127,-88,27,40,-40,-46,3,-66,38,-38,-8,18, 
  /* [94][0][][] */ -26,-127,24,-99,8,28,-22,-2,76,-22,0,55,20,60,-37,42, 
  /* [95][0][][] */ -42,-72,-18,-75,127,117,-42,45,105,42,-106,61,-42,122,-83,42, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0028193118050694466, 0.0016846980433911085, 0.0022917271126061678, 0.0032894392497837543, 0.0021697680931538343, 0.0016546734841540456, 0.0015814143698662519, 0.0019950289279222488, 0.0025891994591802359, 0.0016630251193419099, 0.0032366015948355198, 0.0013129917206242681, 0.0023159971460700035, 0.002556496299803257, 0.0022572509478777647, 0.0022268751636147499, 0.0022614598274230957, 0.0015108180232346058, 0.0018862930592149496, 0.0022731879726052284, 0.0019134577596560121, 0.0011254742275923491, 0.001267807325348258, 0.0023567348252981901, 0.0026860358193516731, 0.0017675011185929179, 0.0012069358490407467, 0.0018137522274628282, 0.002435245318338275, 0.0025965031236410141, 0.0010722008300945163, 0.0032304492779076099, 0.0012152541894465685, 0.0037549391854554415, 0.0026079313829541206, 0.001899826223962009, 0.0032800724729895592, 0.0021404197905212641, 0.0022488688118755817, 0.0029548290185630322, 0.0023931241594254971, 0.0028538720216602087, 0.0031013959087431431, 0.0028519555926322937, 0.0047244937159121037, 0.0026226963382214308, 0.0024734928738325834, 0.0019696084782481194, 0.0025417499709874392, 0.0030296968761831522, 0.0021326080895960331, 0.0021509879734367132, 0.001940573682077229, 0.002950434572994709, 0.0029340407345443964, 0.0027580922469496727, 0.0026790809351950884, 0.0024464784655719995, 0.0014457638608291745, 0.0023998499382287264, 0.0030273220036178827, 0.0015100578311830759, 0.0028552107978612185, 0.0025560241192579269, 0.0023085721768438816, 0.0014272197149693966, 0.0017666328931227326, 0.0025007692165672779, 0.0016966430703178048, 0.0034221073146909475, 0.0017671277746558189, 0.0019508786499500275, 0.0021698365453630686, 0.0019212212646380067, 0.0021950434893369675, 0.0017983884317800403, 0.0025804676115512848, 0.0021221751812845469, 0.0021250455174595118, 0.002964989747852087, 0.0022820220328867435, 0.0016366974450647831, 0.0017850060248747468, 0.0021062043961137533, 0.0024151515681296587, 0.002335333963856101, 0.0030014556832611561, 0.0039157448336482048, 0.00086118764011189342, 0.0033980363514274359, 0.00349607621319592, 0.0022658610250800848, 0.0010103053646162152, 0.0024575130082666874, 0.0028848049696534872, 0.0016260925913229585, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -26477, -9943, 1571, -13430, 13341, -13161, 23379, -5514, 13455, -9098, 11766, 10357, -4581, -28111, 1178, 5296, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.3168470407836139e-05, 5.2556999435182661e-05, 6.0632250097114593e-05, 7.2291157266590744e-05, 9.6382551419083029e-05, 0.0001699814893072471, 5.0262082368135452e-05, 7.0345013227779418e-05, 0.00011434782209107652, 9.9161719845142215e-05, 9.4917246315162629e-05, 8.0722704296931624e-05, 8.0224046541843563e-05, 0.00011233772966079414, 5.9780140873044729e-05, 8.0647485447116196e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 25,34,30,29,-15,-81,-7,4,-18,-83,8,-13,67,-70,57,26,-88,-39,42,8,93,27,-75,8,-11,77,127,78,13,76,59,-36,2,2,9,-29,40,23,-14,-7,116,27,40,-33,-13,1,16,-48,30,-41,95,-9,-74,-5,50,26,2,-52,14,15,-11,40,-78,-13,11,-6,65,32,-9,-34,15,33,2,31,4,41,58,-24,43,22,-21,48,41,38,-61,2,-17,74,19,-3,-100,-24,24,19,122,70, 
  /* [1][0][][] */ 7,64,-55,-11,-9,-55,126,-85,-56,-40,-62,-46,-19,-34,2,-69,-26,-23,-40,-16,-4,-111,121,-62,-7,16,1,82,-59,14,-46,27,-54,32,29,9,-16,64,-62,82,27,24,-2,-47,79,-64,-8,23,-80,-3,46,-124,-36,58,80,66,61,33,-44,19,-42,3,-16,-12,42,50,110,5,-49,-127,15,1,18,75,-22,51,-74,-24,102,-38,50,-7,62,-61,-12,-58,-29,0,-41,-36,34,11,85,-70,-29,71, 
  /* [2][0][][] */ 18,-20,21,-18,53,38,-55,17,-47,43,13,-15,38,-22,19,31,30,-32,-127,-5,-17,-43,-22,9,5,-14,-38,23,-34,-23,-7,65,-1,-34,-2,13,-30,23,-20,-11,61,17,4,35,8,54,5,-11,-68,-3,-21,21,-12,41,4,-67,35,16,42,33,-20,-12,-16,55,34,-10,-22,-6,8,-5,-11,-31,11,40,19,58,-46,-3,-21,-23,31,35,49,-18,-23,-40,-4,-50,-1,-34,-7,56,2,-11,75,-37, 
  /* [3][0][][] */ 28,-31,-17,-111,-8,-37,95,-36,33,106,-80,-15,19,-33,-18,60,57,42,-22,17,-44,16,14,0,-37,83,39,-4,-47,-20,-65,55,3,-24,21,-33,6,-55,-18,58,-6,17,-21,19,57,-54,-4,37,45,-26,14,-41,95,53,21,-11,10,-23,-5,-40,-44,31,58,1,-21,-13,127,-41,-46,-7,-36,24,4,-56,-5,-69,20,-31,108,0,-9,-51,-28,-43,-36,-30,64,68,-35,47,-56,7,9,-78,-25,31, 
  /* [4][0][][] */ -38,61,22,13,-17,19,-39,-16,11,-27,1,-2,10,44,-22,20,0,-51,-21,-73,23,-38,-64,15,-27,-37,-23,14,-32,127,-46,-12,-2,-34,6,-23,71,45,-26,-1,13,9,5,-39,-41,-14,49,-29,26,-7,-48,-8,-73,26,35,17,10,54,-22,28,-23,-66,-31,-8,52,18,-58,-8,7,7,23,-79,-12,58,57,63,-38,11,-56,38,20,61,22,-60,45,-69,-24,-69,-46,-39,-46,-12,-7,3,36,-30, 
  /* [5][0][][] */ -12,-14,36,-26,-12,-27,-24,1,37,10,-22,3,-24,-33,15,-16,-11,1,-51,-31,-22,17,-20,2,25,-46,68,-20,-7,41,16,78,-9,-86,18,12,-34,-26,-31,-1,-55,-7,-20,6,-3,20,-73,21,-21,13,56,-6,28,-74,-2,21,-24,-55,6,-31,43,22,29,52,-38,14,115,-18,0,-22,16,18,-4,24,31,6,-2,-13,127,42,-22,-13,-38,29,38,61,4,87,7,-33,-6,12,7,-18,-33,13, 
  /* [6][0][][] */ 29,-55,71,4,-38,118,-58,-97,-35,-74,-89,71,5,12,-44,82,14,35,8,-41,-111,-13,-97,-70,5,-67,-1,73,-124,61,-18,-31,57,93,-18,6,-9,-35,10,-19,-67,37,32,-49,13,59,-102,-11,42,4,-82,-112,97,7,-42,-11,17,-32,22,-21,-8,-42,47,13,56,-83,-70,-65,-101,17,-27,-81,-32,-127,28,-94,101,14,-77,44,-35,84,26,-104,78,-54,-16,0,-77,90,-81,85,36,-47,77,-127, 
  /* [7][0][][] */ -6,-18,-71,49,-23,5,20,-9,-97,2,82,55,6,-65,-5,-31,-6,-9,7,-7,-69,-26,-33,-36,59,36,6,56,2,24,17,14,-37,-127,11,100,-14,16,-40,16,1,-21,-9,-67,19,44,58,77,-13,43,-35,1,23,-22,32,-47,-23,34,-76,-23,52,6,9,-34,66,-52,90,-18,-62,-29,67,3,-14,-35,-78,-25,40,-43,98,-20,-2,-20,-78,-28,34,15,-61,40,-1,21,8,28,56,-6,72,-8, 
  /* [8][0][][] */ -13,-56,5,-1,-16,-9,20,-1,-1,0,40,43,17,33,-48,3,70,-1,14,1,-3,-71,-37,-12,-19,-28,64,6,-23,52,6,-31,-21,2,3,4,-40,-22,23,-33,-15,49,33,-47,15,-20,29,-8,26,5,44,2,-8,-3,-42,-7,-19,99,-60,-7,-9,-63,-62,-3,-83,-31,-12,16,-12,20,43,-26,-25,-127,41,-117,8,26,-62,15,-31,-13,1,55,66,-63,-48,53,-42,96,10,-21,-58,2,-4,-65, 
  /* [9][0][][] */ -25,-28,-13,29,1,20,5,33,-46,-4,57,66,-20,48,29,-61,-8,18,-22,-40,2,39,-9,-2,-27,25,4,17,31,-5,14,-1,-6,-24,5,58,-18,3,26,11,-17,-22,1,3,14,36,3,32,-40,10,-17,30,122,14,-7,-2,23,-18,26,25,-33,1,67,12,11,21,68,7,37,-14,-19,15,-1,-127,-36,-104,-34,-19,36,7,-13,30,4,-41,43,3,-57,-5,4,102,38,25,54,31,-2,24, 
  /* [10][0][][] */ 13,48,22,0,-18,7,-40,-17,67,2,-35,16,24,5,-4,-60,-38,6,19,7,18,-8,-24,-38,11,-12,-99,43,-19,49,-4,11,19,21,-16,2,21,4,1,-2,39,-5,65,-44,-34,7,22,31,12,9,12,-24,-10,-11,8,32,-5,15,-6,-8,-16,-38,-7,6,-2,-9,-88,-26,-48,-20,46,-12,-25,26,28,21,46,-22,-86,10,-14,29,2,1,1,11,-71,-127,-17,20,5,20,52,-29,22,27, 
  /* [11][0][][] */ 38,-54,9,19,-65,33,17,14,62,-22,-23,-39,26,8,14,-10,-35,50,21,-65,-4,42,16,-17,33,18,60,2,36,-67,-27,22,20,109,-105,9,19,-12,55,17,-46,52,-27,10,-51,7,-3,-6,43,-40,-20,-9,-19,6,-72,103,-29,2,-22,-29,27,6,-8,-72,-10,-57,-127,-73,12,-50,-104,37,57,5,-12,3,35,57,-105,-35,-21,-1,-16,0,-28,-13,65,92,31,-61,1,-6,-32,37,95,23, 
  /* [12][0][][] */ 42,25,-33,-25,7,-21,-1,42,46,-42,22,-3,9,-23,-4,10,11,-45,-15,9,-1,57,4,48,-43,-36,-127,-12,78,-28,28,-4,-10,-77,63,-10,30,-14,-7,30,3,-57,5,36,41,0,37,-11,-73,-20,-49,94,82,-11,32,-69,4,23,-57,-33,12,54,82,12,-9,-24,33,32,116,13,7,29,3,-29,-17,-5,-26,-52,53,-64,12,-50,34,-45,2,-1,7,-101,4,32,-47,15,17,74,15,36, 
  /* [13][0][][] */ -7,13,-74,18,27,31,-24,13,20,65,-28,49,-50,-24,56,-44,18,33,51,1,-38,-41,0,23,46,37,-13,21,12,34,43,-23,-9,60,-19,50,9,-34,-41,-42,9,-15,11,18,50,33,-30,40,-47,38,3,1,-11,-53,54,47,6,-37,-21,-5,24,20,12,-19,8,75,127,37,13,-6,-50,-7,40,38,-70,46,26,-76,127,-33,-13,-32,21,4,23,57,-26,-23,-19,-11,13,41,38,15,53,55, 
  /* [14][0][][] */ -8,53,15,23,-53,-45,39,34,-77,-31,73,7,-71,-4,64,-21,-37,29,-55,12,-16,18,-104,15,-51,10,-55,-110,7,-6,20,71,-69,23,6,-17,-24,-74,-17,-39,20,-28,47,-21,7,38,-65,24,4,-58,71,17,-23,39,-20,31,-38,34,19,31,30,55,-15,42,13,-46,9,-63,32,58,81,43,-54,41,2,19,23,-8,38,20,-73,119,-4,-127,77,2,0,8,-106,-19,-26,0,-21,6,38,30, 
  /* [15][0][][] */ 88,-41,15,22,26,14,-19,-3,11,35,-53,-8,64,65,-13,-9,-8,6,-72,50,-9,-25,18,40,62,-35,89,22,50,-34,-44,54,74,53,-11,-73,54,72,64,57,95,30,-16,7,-48,-113,40,-37,-27,-20,-14,-6,-3,-58,-31,55,-24,0,-32,15,-2,-48,-22,27,30,35,-83,36,-4,-44,-27,5,8,-127,-34,-108,-7,24,-107,36,79,-35,43,30,-54,-9,0,-8,43,87,17,-68,-28,-21,26,-41, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0031096599996089935, 0.002233672421425581, 0.0025768706109374762, 0.0030723742675036192, 0.0040962584316730499, 0.0072242133319377899, 0.0021361385006457567, 0.0029896630439907312, 0.0048597822897136211, 0.0042143729515373707, 0.0040339827537536621, 0.0034307148307561874, 0.0034095218870788813, 0.0047743534669280052, 0.0025406558997929096, 0.0034275180660188198, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 4594, -956, -3809, 9604, 1841, 1416, 1375, -1169, 2720, -3022, -349, -3318, 6831, -3328, -13, -3977, 2018, -1691, -6439, 1815, -2529, -1898, -4551, -654, -4, 7497, -9640, -5342, 1553, -2919, 878, -666, 15279, -326, -551, -1164, -227, 15134, 6215, 8781, 1495, 4964, 106, 4530, 1526, 596, 8514, 6176, -4129, -5, -3453, 645, -329, -973, 821, 1615, -1200, 2947, 225, 3925, 37, 2252, -2041, 5769, 16091, 1920, 13292, 9784, -1055, -509, 3666, -843, 225, -165, -2736, -1258, 24174, 7186, 9242, 8679, 14624, -1664, 9508, 8613, -476, -749, 10536, -7378, 10269, -521, -9047, 809, 1999, 2597, 22188, -2462, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00024328118888661265, 0.00032377740717492998, 0.00021408071916084737, 0.00012420759594533592, 0.00021249172277748585, 0.00058012740919366479, 0.00011535896192071959, 0.00026255036937072873, 0.00046335530350916088, 0.00029918531072326005, 0.0003595704329200089, 0.00021975832351017743, 0.00013729337661061436, 0.00015424849698320031, 0.00024643325014039874, 0.00029013046878390014, 0.00027701398357748985, 0.00042999241850338876, 0.0001879404007922858, 0.00034211724414490163, 0.00024203426437452435, 0.00027534569380804896, 0.00019456683367025107, 0.0002008854498853907, 0.0041016065515577793, 0.0001743001485010609, 0.0002003642002819106, 0.0001385455543641001, 0.00032825898961164057, 0.00024392580962739885, 0.00017443324031773955, 0.00039670770638622344, 9.1619629529304802e-05, 0.00051798031199723482, 0.00014170708891469985, 0.00025462117628194392, 0.00030636679730378091, 6.9854992034379393e-05, 0.00014849250146653503, 0.00011265856301179156, 0.00059404229978099465, 0.00019467317906673998, 0.00041814119322225451, 0.00018181798805017024, 0.00019034081196878105, 0.00033657054882496595, 0.00020665713236667216, 0.0002028749295277521, 0.00022285102750174701, 0.00047247527982108295, 0.00028740355628542602, 0.00019143841927871108, 0.00017595531244296581, 0.00082610384561121464, 0.00025460438337177038, 0.00029839851777069271, 0.00019031150441151112, 0.00051387079292908311, 0.00061458849813789129, 0.00027215562295168638, 0.00033625663490965962, 0.00030394349596463144, 0.00014189472130965441, 0.00014242620090954006, 0.00019583152607083321, 0.00049522524932399392, 0.00011999378330074251, 0.00012699152284767479, 0.00028795376420021057, 0.00064994033891707659, 0.00031968698021955788, 0.00044135522330179811, 0.00058623484801501036, 0.00019189645536243916, 0.00017815486353356391, 0.00023352868447545916, 4.7947378334356472e-05, 0.00024817258235998452, 0.00013595855853054672, 0.00017474325431976467, 7.5910298619419336e-05, 0.00027556109125725925, 0.0001413056452292949, 0.00037049598176963627, 0.00010371774988016114, 0.00043534926953725517, 0.00012368166062515229, 0.00023334957950282842, 0.00010910869605140761, 0.00023192283697426319, 0.00011103054566774517, 0.00030169996898621321, 0.00030309177236631513, 0.00015852770593483001, 8.1304635386914015e-05, 0.00034588054404594004, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -7,-6,-10,-10,78,-6,10,-4,-4,3,-11,-9,-10,-1,-10,-27,-15,8,-43,-14,4,36,14,42,-1,-14,-29,-6,18,2,21,5,22,4,-14,-35,-4,-96,-63,13,6,-8,40,-24,-26,34,-41,-38,-38,3,-9,44,-58,12,22,-18,14,-12,2,-28,-17,-15,-15,-67,-33,-32,-39,-40,-13,26,10,-10,27,-13,7,16,3,20,127,-40,-113,15,-127,-32,-14,-15,37,13,-69,-15,-6,-28,-20,25,-20,13, -12,37,26,-80,-43,0,127,-52,-5,-7,-33,21,-33,7,-114,69,-14,81,59,-41,0,127,66,121,29,10,44,58,127,24,127,-31,-56,-17,-95,-25,-28,-105,127,-22,-27,-127,-13,-41,50,-36,-23,-22,28,-7,20,127,-89,24,-72,-6,-81,-12,-7,18,-12,-127,-125,-60,-75,-10,-4,-87,-2,14,9,121,-127,-15,23,-16,-127,-127,-13,-127,-127,14,6,-54,107,79,-83,21,-127,3,39,-27,4,127,-42,-80, -18,-1,-3,-22,50,2,40,-35,-24,-3,-12,-4,26,9,-24,-5,-26,-3,-41,-39,-4,15,-15,28,-3,-4,-1,-14,2,1,9,10,-49,3,-23,65,5,-67,-72,-13,-3,25,17,-2,-18,-22,-22,-36,-1,-10,-5,28,3,12,18,-7,43,-17,4,-28,-6,3,-58,24,-49,-41,127,-34,-7,21,26,11,-6,22,0,8,-33,27,-26,-9,-73,3,-74,-19,8,-37,-15,-10,-19,-26,21,31,-4,16,-9,22, 
  /* [0][1][][] */ -37,0,34,-50,30,85,-44,-12,-6,-8,-24,-8,-127,34,16,27,-22,50,66,25,33,-7,127,-26,39,23,74,19,-25,8,-16,-15,-112,-12,56,-16,-3,-127,-95,-127,-17,-5,89,-20,-76,127,-59,-99,40,65,14,-48,-117,73,59,-26,39,-29,29,-23,10,-18,117,-66,-53,8,-16,-56,-7,-6,-86,8,74,127,-3,-56,-93,-39,-59,-50,-105,-6,-46,-56,58,27,-100,67,-87,127,86,-81,127,13,-57,-8, 88,127,127,127,-127,-127,88,-69,127,127,-77,-51,-81,127,-40,127,127,-127,127,127,127,-68,104,-127,-127,-127,127,127,-127,127,-27,127,-46,127,127,-89,127,94,3,8,127,-7,-127,-111,127,-34,127,127,127,-127,127,-121,110,127,-127,127,-127,127,-127,127,-108,106,122,-127,127,127,-12,127,-103,-127,-3,-127,2,121,127,77,9,-97,88,-122,29,127,110,127,127,70,-127,127,-70,63,-11,-27,-107,-39,-127,-32, -127,-28,26,-114,-4,60,-55,0,-40,-22,-2,127,-93,33,30,43,-39,57,91,-6,13,-12,52,-18,37,8,38,24,-19,-4,4,-17,-127,-35,86,127,-3,-104,-108,-99,-39,-27,22,-34,-77,-70,-90,-126,45,76,-2,-26,127,31,84,-36,107,-27,50,-57,-3,-42,-127,-25,-89,-9,-62,-79,-22,13,-127,1,43,-92,2,127,-123,-24,-55,22,-60,-12,-49,-70,-10,24,-102,55,-20,-92,127,127,-59,-56,-109,2, 
  /* [0][2][][] */ 1,-34,8,-2,19,-25,-13,24,-9,7,31,-23,33,3,-4,-45,-7,1,-62,-21,-6,-8,26,-11,5,-14,-16,7,-9,-8,-26,6,-4,1,-9,-26,1,-63,-30,-10,-34,13,28,7,10,1,-63,-12,-39,2,-15,-22,-12,-49,10,-10,30,-17,-2,-27,-3,1,5,21,-49,-28,119,11,25,23,-2,-4,-13,-8,-10,-22,-5,40,-32,-1,-63,7,-94,-19,-23,-1,59,-13,12,5,20,-23,-21,-18,-35,1, -22,-54,9,-108,-48,-9,50,127,-61,53,127,-21,-45,12,127,47,-12,-29,78,-60,-26,-30,93,12,24,-38,45,24,-16,1,-94,-41,-51,-27,-101,12,-89,-102,64,-34,-28,-91,-45,127,27,-28,-54,-17,6,-8,-7,-6,44,29,-67,-36,-42,-54,37,-66,127,19,120,-19,-111,-61,-26,-43,127,27,21,21,5,-8,9,-12,-25,-23,8,95,-121,-20,-55,-70,22,-127,8,18,-5,4,66,-12,7,-126,-65,127, 1,3,-32,-15,9,-4,-10,23,-28,-13,21,43,58,9,-9,-34,-19,14,-17,-41,-8,-2,-9,1,0,-10,-20,-5,-20,-2,-41,-2,-22,4,-3,-4,-2,-87,-54,-16,-42,-15,-4,-5,8,1,-64,-3,-17,-2,-12,-5,2,8,12,-5,67,-20,16,-36,-1,11,-13,39,-37,-27,-33,31,19,18,18,1,-56,-23,-25,-13,-28,33,81,15,21,-4,-42,3,-25,-1,24,-1,26,-7,9,7,-11,-40,-46,4, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.010339450091123581, 0.013760539703071117, 0.0090984301641583443, 0.0052788229659199715, 0.0090308981016278267, 0.024655414745211601, 0.0049027558416128159, 0.01115838997066021, 0.019692599773406982, 0.012715375982224941, 0.015281743369996548, 0.0093397283926606178, 0.0058349682949483395, 0.006555560976266861, 0.010473413392901421, 0.012330544181168079, 0.011773094534873962, 0.018274677917361259, 0.0079874666407704353, 0.014539983123540878, 0.010286455973982811, 0.011702192015945911, 0.0082690902054309845, 0.00853763148188591, 0.17431826889514923, 0.0074077560566365719, 0.0085154781118035316, 0.0058881859295070171, 0.013951006345450878, 0.010366846807301044, 0.007413412444293499, 0.016860077157616615, 0.0038938343059271574, 0.022014163434505463, 0.0060225510969758034, 0.01082139927893877, 0.013020588085055351, 0.0029688370414078236, 0.0063109309412539005, 0.0047879889607429504, 0.025246797129511833, 0.0082736099138855934, 0.017771000042557716, 0.0077272644266486168, 0.0080894846469163895, 0.014304247684776783, 0.0087829278782010078, 0.0086221843957901001, 0.0094711687415838242, 0.020080199465155602, 0.012214650399982929, 0.0081361327320337296, 0.0074781007133424282, 0.035109411925077438, 0.010820685885846615, 0.012681936845183372, 0.008088238537311554, 0.021839508786797523, 0.026120010763406754, 0.011566613800823689, 0.014290906488895416, 0.012917598709464073, 0.0060305255465209484, 0.0060531133785843849, 0.0083228396251797676, 0.021047072485089302, 0.0050997356884181499, 0.0053971395827829838, 0.012238034978508949, 0.027622463181614876, 0.013586696237325668, 0.018757596611976624, 0.024914979934692383, 0.0081555992364883423, 0.0075715817511081696, 0.0099249687045812607, 0.0020377635955810547, 0.0105473343282938, 0.0057782386429607868, 0.0074265878647565842, 0.0032261877786368132, 0.011711345985531807, 0.0060054897330701351, 0.015746079385280609, 0.0044080042280256748, 0.018502343446016312, 0.0052564702928066254, 0.0099173570051789284, 0.004637119360268116, 0.0098567204549908638, 0.0047187982127070427, 0.012822248972952366, 0.012881400063633919, 0.0067374273203313351, 0.0034554468002170324, 0.014699922874569893, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 949, 4649, 165, 1964, 3414, 10683, 1, 1622, 8480, -741, 13816, 2538, 1228, 203, 4272, -250, 2171, 3409, -284, 8885, 1005, 5436, -1263, 880, -7082, 1059, 2461, 1221, 5475, 860, 3010, 4067, 1125, 9574, 3421, 3530, 3321, 1586, 2746, 1789, 11410, 1258, 1994, 713, 1334, 9798, 6091, 9135, 1054, -1017, 1527, 3708, 1951, -5102, 5085, -36, 1485, 14934, 1171, 1507, 2326, 7482, 3587, -258, 12010, 11424, 1920, 3142, 4514, 3699, 2947, 1047, -3727, 2727, 1712, 2858, 189, 10926, 3058, 7339, 2371, 784, 3743, 14394, -250, 10725, 5185, 1699, -464, 2093, 784, 8229, 2458, 2504, 5427, 3851, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00027362373657524586, 0.00015685742255300283, 0.00031764575396664441, 0.00020425311231520027, 0.00018905088654719293, 8.3789425843860954e-05, 0.00026673235697671771, 0.00017744865908753127, 0.0001063402378349565, 0.00023631799558643252, 6.2796607380732894e-05, 0.00017778007895685732, 0.00023718351440038532, 0.00050574110355228186, 0.00014086089504417032, 0.00014663617184851319, 0.00028489486430771649, 0.00017929245950654149, 0.0002113160298904404, 0.00010006132652051747, 0.00024415948428213596, 0.00014413960161618888, 0.00021627440582960844, 0.00030157179571688175, 0.0001041605937643908, 0.00020882584794890136, 0.00021064610336907208, 0.00028535519959405065, 0.00015541200991719961, 0.0002578069397713989, 0.00019327487098053098, 0.00013395606947597116, 0.00036418027593754232, 8.7044019892346114e-05, 0.00015887765039224178, 0.00017645765910856426, 0.00018071825616061687, 0.00026450338191352785, 0.0001635390508454293, 0.00021718427888117731, 8.4720348240807652e-05, 0.00021208620455581695, 0.00018337937945034355, 0.00018937178538180888, 0.00023051172320265323, 9.2895941634196788e-05, 0.00012185433297418058, 9.1786962002515793e-05, 0.00031750343623571098, 0.00027590524405241013, 0.00028741185087710619, 0.00019646038708742708, 0.00023264205083250999, 0.00010519610077608377, 0.00013324477185960859, 0.00036066191387362778, 0.00020051404135301709, 5.7613651733845472e-05, 0.00015549235104117543, 0.00022433263075072318, 0.00018661370268091559, 0.00011112765787402168, 0.00017019853112287819, 0.00028231972828507423, 8.0424149928148836e-05, 7.717335392953828e-05, 0.00021598902822006494, 0.00019069643167313188, 0.00016197058721445501, 0.0001293047535000369, 0.00018150272080674767, 0.00017319114704150707, 0.00015916406118776649, 0.00019845404312945902, 0.00023106012667994946, 0.00021076644770801067, 0.00018468472990207374, 8.408875874010846e-05, 0.00019272501231171191, 0.00011506357986945659, 0.00018597528105601668, 0.00017783651128411293, 0.00012627233809325844, 6.7730048613157123e-05, 0.00020128939650021493, 7.039672345854342e-05, 0.00014321770868264139, 0.00025179973454214633, 0.00027611156110651791, 0.00026023879763670266, 0.00023888546274974942, 0.00011085346341133118, 0.0002191344101447612, 0.00017172785010188818, 0.00010391495015937835, 0.00016163900727406144, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 39,-3,2,52,-127,-37,78,51,62,85,-13,33,9,-7,42,74, 
  /* [1][0][][] */ -19,28,-86,-10,127,89,8,-15,-34,13,-63,42,-40,73,-53,-34, 
  /* [2][0][][] */ -45,75,75,4,72,83,10,52,38,-15,46,-34,69,-127,-12,23, 
  /* [3][0][][] */ 127,-24,14,-2,29,40,-2,12,43,39,-53,-33,-47,46,-43,52, 
  /* [4][0][][] */ -77,-7,18,33,-93,-18,-65,-20,-16,20,-22,-61,-12,31,-40,127, 
  /* [5][0][][] */ -79,12,31,4,127,29,11,-1,-45,34,-32,8,-41,47,-76,-38, 
  /* [6][0][][] */ -127,26,-34,19,-6,-59,65,18,5,-22,-43,42,0,1,-44,13, 
  /* [7][0][][] */ -10,93,54,-84,69,59,127,9,46,12,-5,34,83,15,-33,-7, 
  /* [8][0][][] */ -25,-40,-65,61,-52,53,-40,-51,30,-39,74,27,127,47,-94,3, 
  /* [9][0][][] */ -13,-127,-9,70,-38,-57,-6,59,46,44,1,69,-64,20,-10,-30, 
  /* [10][0][][] */ -39,-62,-85,41,-127,115,56,-90,0,-72,60,-41,59,94,-91,81, 
  /* [11][0][][] */ -50,-98,-31,9,-10,85,35,-10,16,10,34,-99,15,96,-110,127, 
  /* [12][0][][] */ -35,-88,-70,94,-84,-127,32,77,81,71,-46,89,-16,-62,-45,-10, 
  /* [13][0][][] */ -62,-23,-33,-2,-14,-3,34,17,-21,127,-11,-14,46,39,19,-9, 
  /* [14][0][][] */ -127,-23,-59,-29,-7,99,-13,-98,98,-63,82,4,93,-41,-89,-70, 
  /* [15][0][][] */ -6,-127,94,-57,-42,-48,6,71,0,-37,-93,-29,96,-30,-45,-33, 
  /* [16][0][][] */ -27,-33,16,-40,18,30,-17,-18,57,-127,41,-12,-6,5,-69,-78, 
  /* [17][0][][] */ -21,0,44,-63,19,0,-48,14,109,-66,31,68,127,-90,-36,-122, 
  /* [18][0][][] */ 71,7,-48,-122,4,-29,122,-50,15,66,3,73,1,81,-6,-127, 
  /* [19][0][][] */ -23,-21,-32,-67,-127,34,-26,-1,22,-35,33,-116,-9,-14,-12,-10, 
  /* [20][0][][] */ 8,57,59,-87,61,-3,-40,101,-101,-127,35,-78,-27,110,-26,-12, 
  /* [21][0][][] */ 26,-82,-127,-22,61,16,70,69,-76,-85,-17,14,89,-104,-6,31, 
  /* [22][0][][] */ 37,-19,64,4,5,21,48,20,13,127,42,41,-7,12,105,-9, 
  /* [23][0][][] */ -82,-70,-24,52,40,13,-1,13,-5,-7,-20,-84,11,67,81,127, 
  /* [24][0][][] */ 15,-12,36,27,18,-115,24,-61,4,126,-127,76,-10,-61,60,-58, 
  /* [25][0][][] */ 118,-65,106,127,38,-1,-16,45,-120,76,55,-44,-20,34,65,-14, 
  /* [26][0][][] */ -23,21,13,42,-53,112,-20,40,-58,-31,-81,36,5,24,43,-127, 
  /* [27][0][][] */ 34,-9,-13,-34,-47,4,-79,3,-106,-33,-55,-36,-64,42,-16,127, 
  /* [28][0][][] */ -73,6,28,-5,24,-22,-127,8,0,-34,-12,-9,10,-38,-74,-39, 
  /* [29][0][][] */ -25,-125,-19,93,-35,21,127,-4,86,55,-117,72,20,-31,-46,67, 
  /* [30][0][][] */ 58,-43,-66,1,-127,16,52,-27,11,3,-1,-16,-4,42,4,64, 
  /* [31][0][][] */ -127,-4,5,93,-42,5,-58,-15,-32,-46,25,-30,-29,-68,-14,101, 
  /* [32][0][][] */ -127,-57,-77,-8,-70,-41,8,-10,109,62,-50,-66,25,40,14,-17, 
  /* [33][0][][] */ -1,12,-92,47,-127,-107,44,-2,-109,26,-54,-51,-13,107,65,62, 
  /* [34][0][][] */ 25,50,10,27,-70,-48,34,25,39,-127,-34,35,-37,12,48,89, 
  /* [35][0][][] */ 25,9,-68,-21,-127,15,89,-40,36,65,-5,-8,11,81,41,75, 
  /* [36][0][][] */ 0,10,-69,70,127,-35,56,77,-87,16,-86,-107,35,-40,15,28, 
  /* [37][0][][] */ -127,70,-12,-90,34,-98,-36,-48,-5,-40,-26,36,49,-100,21,-124, 
  /* [38][0][][] */ 29,78,38,-52,-96,-58,-127,-60,-44,-50,49,59,-68,-89,92,-18, 
  /* [39][0][][] */ 9,-33,-5,81,2,89,100,-64,-38,48,30,-41,-12,106,74,127, 
  /* [40][0][][] */ 120,30,68,75,-76,-56,-11,29,-72,54,-7,-13,-30,-34,127,-4, 
  /* [41][0][][] */ -21,-3,11,54,-98,123,9,49,-51,26,-117,4,20,25,46,-127, 
  /* [42][0][][] */ 20,-117,32,-30,127,28,64,3,-14,-95,-99,-20,-10,-19,-10,20, 
  /* [43][0][][] */ -44,-95,-53,12,102,23,9,80,-68,-75,-119,-93,127,-6,-67,38, 
  /* [44][0][][] */ -15,-38,-96,-92,21,91,65,6,-75,-127,-63,93,-39,45,30,103, 
  /* [45][0][][] */ 2,-72,-75,-5,-127,90,-37,-69,66,-48,24,-50,10,4,-44,45, 
  /* [46][0][][] */ 16,-79,-28,8,94,-92,-20,127,-21,-33,53,69,-56,-44,34,-126, 
  /* [47][0][][] */ -80,-38,-40,96,-40,6,28,24,-21,106,101,87,-33,73,23,127, 
  /* [48][0][][] */ 39,1,-89,-106,31,-77,16,66,41,-83,1,31,-62,17,-49,-127, 
  /* [49][0][][] */ 45,21,15,44,4,-20,52,54,-40,127,-42,43,-29,-17,62,83, 
  /* [50][0][][] */ 5,2,13,3,-127,-21,-12,-48,56,23,16,48,-17,-57,19,-4, 
  /* [51][0][][] */ 12,-2,-23,-127,-33,77,34,-36,17,-4,31,-55,69,77,-22,24, 
  /* [52][0][][] */ 15,-22,6,-73,89,-95,-7,-44,31,-1,127,-53,33,9,-37,92, 
  /* [53][0][][] */ -54,-74,68,-32,-43,-127,22,-114,8,106,-116,98,-47,-32,44,-107, 
  /* [54][0][][] */ 32,78,41,-10,-127,-6,-69,-114,-12,21,67,61,-88,-35,39,8, 
  /* [55][0][][] */ 21,9,-41,86,-45,21,42,-20,1,127,22,59,7,-8,4,41, 
  /* [56][0][][] */ -3,-62,-96,75,-47,53,29,72,93,28,86,40,-8,13,23,127, 
  /* [57][0][][] */ 33,11,113,-98,100,-9,-8,12,99,-32,-6,127,71,-31,80,-58, 
  /* [58][0][][] */ 59,-66,16,-58,32,5,6,127,39,87,-9,41,46,14,59,-6, 
  /* [59][0][][] */ -47,39,27,-41,-16,-80,25,19,11,-15,-115,-119,-127,-68,51,-24, 
  /* [60][0][][] */ 46,-30,35,12,0,-32,22,-67,28,127,-16,74,-2,-20,-12,-38, 
  /* [61][0][][] */ 78,67,-2,-20,-91,-127,-18,-60,-74,-18,-6,23,-80,-66,97,90, 
  /* [62][0][][] */ -8,77,-42,50,-63,127,-49,29,-57,0,-39,26,-28,25,77,-92, 
  /* [63][0][][] */ 36,-6,-58,-127,-11,-36,89,-18,4,-83,-32,30,-34,64,33,-36, 
  /* [64][0][][] */ -47,15,-1,-9,42,-49,27,80,-127,-16,-57,-48,-34,76,42,63, 
  /* [65][0][][] */ -49,-11,-40,-41,52,29,-52,-101,-125,-60,16,-11,-127,109,-47,33, 
  /* [66][0][][] */ -16,88,-21,27,-44,127,-19,8,-76,34,-22,47,-32,61,51,-79, 
  /* [67][0][][] */ 22,-20,-66,-34,-4,-90,83,-112,-10,12,12,123,-73,-26,-41,-127, 
  /* [68][0][][] */ 11,-127,-38,78,-23,1,22,87,48,27,54,8,-58,26,-9,-4, 
  /* [69][0][][] */ 20,57,88,-101,46,0,-33,73,44,78,32,63,72,-94,26,-127, 
  /* [70][0][][] */ 80,31,74,-52,127,3,-118,-69,-122,-93,-11,33,-44,50,-114,-29, 
  /* [71][0][][] */ -36,-67,26,-43,62,-24,49,43,-82,66,-127,-50,-1,79,-18,45, 
  /* [72][0][][] */ 13,22,60,10,-62,-26,-116,-64,-12,79,-26,75,36,123,-127,-5, 
  /* [73][0][][] */ -7,-41,-29,-45,41,-103,37,-63,55,88,112,-4,29,-14,-66,127, 
  /* [74][0][][] */ -3,19,-29,77,-81,-4,100,29,87,63,26,108,127,37,-65,9, 
  /* [75][0][][] */ -37,39,-29,45,-55,127,-16,32,-42,32,-35,46,-22,59,24,-71, 
  /* [76][0][][] */ -66,75,-65,64,-119,-19,2,38,54,42,-47,-46,63,-52,-127,43, 
  /* [77][0][][] */ 127,109,-105,115,72,102,66,24,60,4,101,-37,76,15,69,1, 
  /* [78][0][][] */ 14,-39,-4,-70,69,-113,31,-45,37,40,112,-21,17,-23,-35,127, 
  /* [79][0][][] */ -50,55,-3,29,2,-33,-37,-7,-127,-4,58,7,95,36,-92,-54, 
  /* [80][0][][] */ -62,37,65,-3,41,38,-16,-127,-60,50,-38,-51,-23,-93,38,46, 
  /* [81][0][][] */ 78,76,-20,7,40,-31,80,122,-108,119,-71,-40,-42,31,113,127, 
  /* [82][0][][] */ 92,101,-50,-67,-56,-80,102,-86,66,8,-65,55,127,-50,100,-86, 
  /* [83][0][][] */ 2,-33,9,33,-2,33,-23,-103,72,-32,100,7,42,-56,-62,-127, 
  /* [84][0][][] */ -127,-81,-32,-22,-1,99,90,-16,86,76,95,118,56,97,-71,0, 
  /* [85][0][][] */ 127,-7,87,-79,83,-3,-33,73,4,123,-46,19,-43,56,118,24, 
  /* [86][0][][] */ -80,61,-32,5,23,85,14,12,85,29,127,-19,-25,61,-4,-25, 
  /* [87][0][][] */ 9,-56,25,-47,40,-127,32,-34,45,-11,66,-42,33,-44,-43,70, 
  /* [88][0][][] */ -91,76,36,-7,107,-12,38,25,-48,-83,113,-88,51,107,107,-127, 
  /* [89][0][][] */ -20,34,-18,23,-37,127,-19,34,-41,4,-34,24,-9,53,26,-82, 
  /* [90][0][][] */ 36,-69,9,36,127,11,49,37,-22,-96,-98,-13,-2,-3,-61,39, 
  /* [91][0][][] */ -20,60,-25,-54,-9,-50,-88,31,-65,9,-85,-127,-111,-70,-7,22, 
  /* [92][0][][] */ 74,48,58,28,-127,-102,14,29,-25,32,-26,-27,-7,-70,28,10, 
  /* [93][0][][] */ -16,-113,-108,49,-59,-79,-21,127,94,61,3,51,-66,77,-24,-23, 
  /* [94][0][][] */ 106,4,127,-21,30,-39,18,56,37,91,0,59,15,13,112,-17, 
  /* [95][0][][] */ -47,-36,-35,-33,127,-4,40,71,-51,-10,-90,-52,24,4,-67,52, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0044327466748654842, 0.0025411143433302641, 0.0051459101960062981, 0.0033089320641011, 0.0030626535881310701, 0.0013574016047641635, 0.0043211053125560284, 0.0028746956959366798, 0.0017227282514795661, 0.0038283879403024912, 0.001017314731143415, 0.0028800647705793381, 0.0038424094673246145, 0.0081930840387940407, 0.0022819682490080595, 0.0023755286820232868, 0.0046153408475220203, 0.0029045655392110348, 0.0034233522601425648, 0.0016210089670494199, 0.0039554215036332607, 0.0023350839037448168, 0.0035036788322031498, 0.0048855096101760864, 0.0016874177381396294, 0.0033830108586698771, 0.0034124993253499269, 0.0046227984130382538, 0.0025176985654979944, 0.0041765123605728149, 0.0031310827471315861, 0.0021701089572161436, 0.0058997767046093941, 0.0014101265696808696, 0.0025738424155861139, 0.0028586413245648146, 0.0029276637360453606, 0.0042849956080317497, 0.0026493577752262354, 0.003518418874591589, 0.0013724827440455556, 0.0034358291886746883, 0.0029707741923630238, 0.0030678522307425737, 0.0037343255244195461, 0.0015049285721033812, 0.0019740590360015631, 0.0014869630103930831, 0.0051436047069728374, 0.0044697076082229614, 0.0046561164781451225, 0.003182688495144248, 0.0037688370794057846, 0.0017041930695995688, 0.0021585859358310699, 0.0058427788317203522, 0.0032483583781868219, 0.00093335006386041641, 0.0025190000887960196, 0.003634223248809576, 0.0030231708660721779, 0.0018002851866185665, 0.0027572424151003361, 0.0045736231841146946, 0.001302883611060679, 0.0012502202298492193, 0.0034990555141121149, 0.0030893115326762199, 0.0026239485014230013, 0.0020947570446878672, 0.0029403720982372761, 0.0028057233430445194, 0.0025784822646528482, 0.0032149860635399818, 0.0037432096432894468, 0.0034144490491598845, 0.0029919210355728865, 0.0013622508849948645, 0.0031221748795360327, 0.0018640477210283279, 0.0030128282960504293, 0.0028809788636863232, 0.0020456314086914062, 0.0010972372256219387, 0.0032609193585813046, 0.0011404377873986959, 0.0023201489821076393, 0.0040791947394609451, 0.0044730501249432564, 0.0042159087024629116, 0.0038699812721461058, 0.001795843243598938, 0.0035500111989676952, 0.0027820176910609007, 0.0016834381967782974, 0.0026185768656432629, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -3384, 10482, -18616, 2875, 13271, -14184, -42697, -9410, -3106, 6763, -15676, -11666, 6450, -11986, -2913, -4100, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014709995593875647, 0.000187180150533095, 9.3787748483009636e-05, 0.00015769053425174206, 9.4478011305909604e-05, 0.00020139229309279472, 0.00012502635945565999, 0.00018042292504105717, 8.4572398918680847e-05, 9.3180162366479635e-05, 0.00014019741502124816, 0.00015326468565035611, 0.00012485805200412869, 0.00012259087816346437, 0.000161788469995372, 0.00017333493451587856, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 30,34,22,-30,71,57,-37,55,-16,112,4,48,-34,35,-15,47,35,77,41,-64,-67,71,-12,48,55,46,38,51,-52,-42,-8,81,-27,10,-67,46,52,-127,-31,14,10,-29,57,-2,3,-53,-65,-18, 
  /* [1][0][][] */ -42,3,-79,-38,11,89,-52,20,-6,-39,-36,27,52,-9,-28,-28,-26,-25,-6,13,-59,41,-98,-36,-55,-43,43,69,-28,-31,46,-40,9,-51,-26,41,9,-53,127,-40,-32,37,-47,-9,29,57,26,9, 
  /* [2][0][][] */ 1,-3,62,-28,-20,-83,21,27,100,75,-70,15,101,-52,127,81,-72,-20,-34,34,78,-71,-32,-94,17,-34,29,-66,26,48,-47,12,28,-29,58,45,-66,8,-1,-26,38,32,63,-20,13,-86,86,-60, 
  /* [3][0][][] */ 36,0,-24,-30,30,108,15,-20,46,-50,20,-24,-60,6,8,46,-46,-68,42,-116,-14,-2,-23,-11,-41,91,127,63,-19,-46,23,34,58,-33,93,38,-47,-60,-1,37,31,14,-16,-5,27,14,-3,-22, 
  /* [4][0][][] */ 95,-11,1,-45,90,87,54,15,65,-17,-102,34,48,-30,6,-9,-99,-127,-30,-98,-18,25,-40,-32,-82,127,-97,120,-51,-64,34,86,40,-55,15,-34,-11,9,-25,37,-52,-8,-5,50,-69,110,-28,-57, 
  /* [5][0][][] */ 5,-4,-54,6,-12,54,18,-31,67,50,37,90,54,-26,31,1,-41,127,-16,40,2,4,-63,-13,39,-4,-62,-32,-18,24,16,-22,-36,-2,43,20,-42,1,-90,1,89,-24,33,41,-22,4,-35,28, 
  /* [6][0][][] */ 64,16,4,67,-4,-26,105,-59,8,65,127,103,51,45,-53,66,44,-41,-75,88,52,-56,-39,58,-84,91,95,-4,119,43,-27,1,109,-66,-123,-7,99,41,1,12,22,59,59,-31,56,126,41,-4, 
  /* [7][0][][] */ -94,-2,-14,26,-56,-59,26,46,80,116,-63,-71,-103,12,-13,-13,-82,100,2,120,-52,47,28,34,-18,-87,-30,-84,33,41,-13,11,-21,12,11,-12,8,-61,127,9,12,36,27,-15,53,67,-29,-3, 
  /* [8][0][][] */ -22,-101,45,-67,53,-63,78,-30,-38,-115,32,14,-29,-8,31,32,1,1,-50,102,14,29,-24,28,60,-20,-66,-40,-127,-22,-53,-116,0,-70,1,79,-14,33,107,8,12,6,68,121,-4,-69,-40,79, 
  /* [9][0][][] */ 24,-39,27,-67,38,86,-33,40,20,-33,-41,-18,32,-51,120,-10,4,-119,33,38,-69,50,55,-43,-14,-74,-31,76,61,73,-43,-22,-50,28,-13,127,-18,-41,-53,-17,-23,6,36,110,46,88,-70,15, 
  /* [10][0][][] */ -12,18,-27,-7,16,26,-62,-39,46,37,66,-4,-25,-12,48,-52,-57,127,3,46,4,-14,16,26,-45,39,1,95,33,8,-30,-8,69,11,-7,23,-12,-42,-40,23,-84,4,23,-15,21,47,28,35, 
  /* [11][0][][] */ -30,45,-20,33,30,54,-2,9,17,18,-127,-68,74,13,-8,-40,-1,21,-48,-45,-14,-7,104,3,48,8,-15,31,-4,22,-11,46,29,-11,-47,3,43,68,93,17,33,-29,68,-3,-52,-20,85,4, 
  /* [12][0][][] */ -56,-5,41,22,-56,-62,6,4,-36,-29,-127,16,69,-100,21,41,45,94,81,-116,-32,43,-45,-83,3,-15,34,-29,5,16,-21,72,67,71,35,-31,-52,-34,26,2,-31,15,57,-2,37,-16,-40,-33, 
  /* [13][0][][] */ -69,-110,-41,-108,12,31,51,2,-118,27,116,-71,64,38,125,12,117,21,-9,-92,72,-72,127,-3,-68,6,-18,12,-37,-110,-117,16,54,-25,-77,66,40,-67,80,-69,-2,49,81,31,45,-33,111,-67, 
  /* [14][0][][] */ 73,22,-48,1,-38,18,-85,-30,-24,60,50,41,-19,-57,20,-48,47,-114,21,14,84,-55,22,-1,-15,127,-90,0,-67,-24,-96,-3,119,45,85,-22,-78,13,-23,47,-12,-43,102,-24,-48,-47,-58,49, 
  /* [15][0][][] */ -64,18,40,19,96,2,-2,28,19,82,-21,54,66,-19,-37,-12,16,36,5,-36,24,-35,-49,-62,61,-62,-35,70,-30,6,14,10,-56,2,127,-6,-83,13,58,-11,-41,-24,21,-8,-40,-35,-10,16, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0062517477199435234, 0.0079551562666893005, 0.0039859791286289692, 0.0067018475383520126, 0.0040153153240680695, 0.0085591720417141914, 0.0053136204369366169, 0.0076679741032421589, 0.0035943270195275545, 0.0039601568132638931, 0.0059583899565041065, 0.0065137492492794991, 0.0053064674139022827, 0.005210112314671278, 0.0068760099820792675, 0.0073667345568537712, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 15289, 331, 20185, 728, 12184, -1791, 39511, 705, 11239, 45384, 10180, 22963, -3043, 11326, 44832, 22989, 1017, 2978, 1414, 48884, 2338, 17762, 4417, 16177, 13597, 36394, 1631, -2038, -1037, 11428, 24951, 460, 786, -1059, 3455, 13454, 6875, 27643, -212, 14308, 23694, 265, 236, 13503, -1625, 5691, 39553, 27242, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00011719225585693493, 0.00013247721653897315, 5.6426571973133832e-05, 0.00013680759002454579, 8.9121589553542435e-05, 9.6449555712752044e-05, 4.8006375436671078e-05, 0.00027896257233805954, 0.0001236426760442555, 3.9739996282150969e-05, 4.377692675916478e-05, 0.00010337158164475113, 0.00014061850379221141, 0.00014116569946054369, 3.6048651963938028e-05, 8.3627142885234207e-05, 0.00013027941167820245, 6.3148851040750742e-05, 0.00017299836326856166, 4.1231127397622913e-05, 5.9411926486063749e-05, 5.1316248573129997e-05, 8.2734055467881262e-05, 0.00011526482558110729, 7.0683585363440216e-05, 6.0120539274066687e-05, 6.1592341808136553e-05, 7.786501373630017e-05, 0.0002980027929879725, 0.00012126967340009287, 6.6532607888802886e-05, 0.00034440722083672881, 0.00011979145347140729, 0.00017182971350848675, 6.8429057137109339e-05, 6.0112513892818242e-05, 7.0839232648722827e-05, 6.916294660186395e-05, 0.00011661771713988855, 0.0001265848841285333, 8.5911327914800495e-05, 0.00017647480126470327, 0.00058351008919999003, 9.1662877821363509e-05, 0.0002035936777247116, 5.31395198777318e-05, 4.9800026317825541e-05, 6.0239650338189676e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -111,50,-127,99,-108,58,-51,75,-87,-60,69,-51,23,-101,-64,-34,85,79,87,-86,81,-98,100,-93,-60,-71,60,127,-85,-53,-95,49,70,-99,58,-96,-83,-127,101,-32,-8,-108,103,-84,89,48,-68,-47, -123,67,-73,111,-74,97,-49,122,-117,-79,104,-48,63,-67,-97,-73,111,96,127,-127,107,-115,58,-127,-110,-102,89,122,24,-72,-100,127,109,-127,89,-91,-97,-122,121,-74,-86,102,74,-94,-27,96,-88,-106, -58,33,5,31,-7,54,-34,25,-42,-39,49,-33,69,-19,-49,-26,47,48,70,-51,38,-76,28,-55,-63,-32,30,31,93,-40,-85,22,55,-74,35,-43,-23,-38,33,-38,-80,-29,43,-23,-52,67,-25,-81, 
  /* [0][1][][] */ -103,88,-80,127,-74,110,-127,127,-110,-99,92,-87,61,-117,-95,-79,107,80,-36,-80,91,-99,124,-72,-66,-103,93,102,-127,-81,-112,91,100,41,90,-127,-96,-103,124,-43,-106,-127,127,-127,127,69,-125,-78, -127,127,-108,123,-127,127,-116,78,-127,-127,127,-127,127,-127,-127,-127,127,127,-47,-85,127,-127,127,-115,-127,-127,127,119,6,-127,-127,108,127,33,127,-112,-127,-89,127,-127,-127,127,127,-87,-40,127,-127,-127, -75,73,-80,39,-52,31,-70,-24,-46,-45,57,-60,77,-56,-63,2,61,53,-39,-19,33,-70,37,-59,-105,-45,58,47,95,-62,-99,27,57,10,49,-54,-54,-18,68,-45,-61,-59,35,-44,-64,86,-16,-85, 
  /* [0][2][][] */ -51,47,-28,55,-36,56,-72,0,-50,-35,33,-49,17,-75,-29,-76,51,28,-64,-6,24,-40,37,-14,-18,-40,29,14,-84,-24,-31,18,41,69,48,-61,-34,-28,30,-22,-98,-52,49,-80,75,18,-50,-47, -36,59,-97,59,-54,38,-75,46,-61,-42,64,-60,46,-28,-55,-59,88,49,-76,-6,34,-21,23,-38,-35,-44,43,40,-4,-85,-68,18,40,64,53,-50,-55,-36,38,-37,-65,69,30,-56,-14,46,-57,-67, -30,55,-59,9,-27,11,-65,11,-10,-32,31,-20,53,-48,-41,8,55,12,-52,16,14,-19,-3,-10,-47,1,26,28,69,-23,-10,-12,21,36,15,-34,-19,-8,21,-32,0,-15,6,-38,-32,61,-1,-57, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0049806707538664341, 0.005630281288176775, 0.0023981293197721243, 0.0058143222704529762, 0.003787667490541935, 0.0040991059504449368, 0.0020402709487825632, 0.01185590960085392, 0.0052548139356076717, 0.0016889498801901937, 0.0018605192890390754, 0.0043932921253144741, 0.0059762862510979176, 0.0059995423071086407, 0.0015320676611736417, 0.0035541534889489412, 0.0055368747562170029, 0.0026838260237127542, 0.0073524303734302521, 0.0017523228889331222, 0.0025250068865716457, 0.0021809404715895653, 0.0035161974374204874, 0.0048987548798322678, 0.0030040524434298277, 0.0025551228318363428, 0.0026176744140684605, 0.0033092629164457321, 0.012665119022130966, 0.0051539610140025616, 0.0028276357334107161, 0.014637306332588196, 0.0050911367870867252, 0.0073027624748647213, 0.0029082347173243761, 0.0025547817349433899, 0.0030106673948466778, 0.0029394251760095358, 0.0049562528729438782, 0.0053798574954271317, 0.0036512312944978476, 0.0075001786462962627, 0.024799179285764694, 0.003895672271028161, 0.0086527308449149132, 0.0022584295365959406, 0.002116501098498702, 0.0025601850356906652, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1393, -975, 383, -2114, 2170, -573, 3354, -2971, 1010, 447, 2109, 3899, 98, -279, 398, 4647, -1804, 2558, 4590, 786, -529, 1970, -795, 2863, 2015, 1290, 940, -606, 8480, -291, 2979, -2264, -591, 3271, -711, 1511, 1446, 766, 191, 3626, 1085, 5720, -3743, 1424, 5357, -161, 2151, 2744, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00033621597685851157, 0.00037199840880930424, 0.00045650533866137266, 0.00022205259301699698, 0.00033516637631691992, 0.00034736425732262433, 0.00022242196428123862, 0.00018883067241404206, 0.00032297943835146725, 0.00038880031206645072, 0.00020387952099554241, 0.00020662901806645095, 0.00054076517699286342, 0.00039164905319921672, 0.00029839709168300033, 0.00017326838860753924, 0.00025913270656019449, 0.00029562105191871524, 0.00018644740339368582, 0.00033839463139884174, 0.00043792216456495225, 0.00027191676781512797, 0.00023226514167618006, 0.00026570953195914626, 0.00023624570167157799, 0.00032112543703988194, 0.00031131537980400026, 0.00044606492156162858, 0.00011179718421772122, 0.00040748185710981488, 0.00016603880794718862, 0.00016887935635168105, 0.00026756583247333765, 0.00023664816399104893, 0.00030292404699139297, 0.00030722096562385559, 0.00030183553462848067, 0.00029787511448375881, 0.00034217484062537551, 0.00022503522632177919, 0.00050034717423841357, 0.00015166451339609921, 0.00014333923172671348, 0.00030001456616446376, 0.00016038850299082696, 0.00028062344063073397, 0.0002753493026830256, 0.00023489879094995558, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 75,27,127,-42,63,99,-76,-58, 
  /* [1][0][][] */ 9,-80,-127,10,52,28,29,1, 
  /* [2][0][][] */ -127,-8,-46,-19,58,28,-66,-41, 
  /* [3][0][][] */ 50,70,127,-81,-10,-116,-12,-21, 
  /* [4][0][][] */ -127,28,-45,-20,38,18,-45,-50, 
  /* [5][0][][] */ -109,37,-57,-9,9,32,-88,-127, 
  /* [6][0][][] */ -47,-127,-123,53,105,20,6,53, 
  /* [7][0][][] */ -70,-127,-100,-83,-81,-66,16,93, 
  /* [8][0][][] */ 88,31,1,1,98,-77,-127,10, 
  /* [9][0][][] */ -42,55,-54,92,-60,-39,127,-26, 
  /* [10][0][][] */ -22,121,32,59,127,-18,-8,54, 
  /* [11][0][][] */ -80,-34,-21,-13,-81,112,127,-4, 
  /* [12][0][][] */ 58,25,-127,42,-5,-33,-59,-12, 
  /* [13][0][][] */ 59,-26,-65,11,14,-127,-20,-13, 
  /* [14][0][][] */ 5,-68,78,13,127,-111,-58,24, 
  /* [15][0][][] */ -39,-43,-1,127,69,80,-83,33, 
  /* [16][0][][] */ 123,27,-43,8,84,-120,-127,-28, 
  /* [17][0][][] */ 63,127,55,80,47,62,32,-88, 
  /* [18][0][][] */ 46,-9,1,-7,127,-2,24,-24, 
  /* [19][0][][] */ 15,126,39,15,-127,20,29,-35, 
  /* [20][0][][] */ -44,12,59,-127,29,37,-12,100, 
  /* [21][0][][] */ -49,86,50,-127,33,59,-4,110, 
  /* [22][0][][] */ -62,-70,-101,16,-122,127,97,-25, 
  /* [23][0][][] */ 109,42,-127,28,20,-51,-77,-14, 
  /* [24][0][][] */ -55,45,15,15,-27,89,-127,97, 
  /* [25][0][][] */ -92,-52,-127,8,-62,-66,59,101, 
  /* [26][0][][] */ 45,-8,-35,-30,109,-17,127,-40, 
  /* [27][0][][] */ 127,-67,20,99,5,31,-23,97, 
  /* [28][0][][] */ 33,70,55,-5,127,-38,34,-15, 
  /* [29][0][][] */ -12,-14,-26,-44,-63,15,127,-32, 
  /* [30][0][][] */ 45,-127,-61,-75,-120,-5,11,-61, 
  /* [31][0][][] */ 13,21,-7,-13,-127,5,-28,-17, 
  /* [32][0][][] */ 35,-61,-53,79,-9,-88,117,-127, 
  /* [33][0][][] */ 54,127,57,49,59,-20,-32,-23, 
  /* [34][0][][] */ -123,-39,127,-4,-23,106,105,8, 
  /* [35][0][][] */ -39,78,127,-11,-63,-64,-37,31, 
  /* [36][0][][] */ -92,6,108,-27,-21,127,78,27, 
  /* [37][0][][] */ -13,-78,-5,-127,-44,-82,71,42, 
  /* [38][0][][] */ 50,-16,82,-62,54,64,-127,9, 
  /* [39][0][][] */ -5,88,-127,-46,-33,3,-4,79, 
  /* [40][0][][] */ 64,-45,14,32,6,1,6,127, 
  /* [41][0][][] */ -32,81,127,-10,8,84,-70,43, 
  /* [42][0][][] */ 61,-127,-115,-17,-126,14,16,-99, 
  /* [43][0][][] */ -5,-91,17,-62,127,-36,22,33, 
  /* [44][0][][] */ 0,121,127,25,8,52,-79,3, 
  /* [45][0][][] */ -36,50,6,80,-116,54,-127,23, 
  /* [46][0][][] */ -43,-38,66,48,-127,-123,-36,1, 
  /* [47][0][][] */ -10,50,48,-106,-127,36,-19,51, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0033495761454105377, 0.0037060610484331846, 0.0045479675754904747, 0.002212214982137084, 0.0033391192555427551, 0.0034606414847075939, 0.0022158948704600334, 0.0018812392372637987, 0.0032177059911191463, 0.003873451380059123, 0.0020311644766479731, 0.0020585565362125635, 0.0053874123841524124, 0.0039018320385366678, 0.0029728026129305363, 0.0017261988250538707, 0.0025816282723098993, 0.002945146057754755, 0.0018574957503005862, 0.0033712810836732388, 0.0043628313578665257, 0.0027089905925095081, 0.0023139582481235266, 0.0026471503078937531, 0.0023536148946732283, 0.0031992355361580849, 0.0031015020795166492, 0.0044439542107284069, 0.0011137875262647867, 0.0040595675818622112, 0.0016541735967621207, 0.0016824728809297085, 0.0026656440459191799, 0.0023576244711875916, 0.0030179026070982218, 0.0030607110820710659, 0.0030070582870393991, 0.0029676023405045271, 0.0034089416731148958, 0.0022419297602027655, 0.0049847448244690895, 0.0015109686646610498, 0.0014280275208875537, 0.0029889168217778206, 0.0015978820156306028, 0.0027957314159721136, 0.0027431873604655266, 0.0023401961661875248, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 3101, 1112, 22273, -6553, 4557, -14708, 1965, -13366, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00010827420919667929, 9.1643094492610544e-05, 0.00011424030526541173, 0.00012213415175210685, 0.00014209022629074752, 0.00015936058480292559, 7.8693512477912009e-05, 0.00010517143527977169, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-51,-20,-66,-5,-1,76,80,-101,-82,-42,11,-64,-5,-55,27,-83,5,15,127,56,-31,19,96,75,71,35,0,-87,-67,-74,-55,-44,90,34,-40,25,-34,92,-4,24,6,2,-108,32,-36,-38,-84, 
  /* [1][0][][] */ -13,53,-18,-30,-73,61,-18,-44,-36,63,-16,18,53,41,-43,-4,-18,-121,77,-48,127,8,-70,24,55,1,-77,62,35,-13,70,33,-29,-24,0,-10,8,109,-13,-26,65,42,-12,12,101,20,-26,59, 
  /* [2][0][][] */ -30,-35,110,6,80,-53,-7,26,-34,-4,-14,43,7,-44,-43,-127,-52,-101,-28,13,-95,23,-45,-33,-46,24,-1,-47,-36,2,-29,-16,1,-7,17,-1,32,-34,-48,6,36,-28,26,-48,-43,-39,-62,-46, 
  /* [3][0][][] */ 52,20,66,14,15,-28,28,73,-48,-23,49,-32,-70,56,-15,60,66,33,-31,31,-107,-68,127,-2,9,1,-49,-31,-57,67,114,-64,5,-110,-17,46,-19,-72,-18,79,-74,-56,66,-2,-94,-65,67,-7, 
  /* [4][0][][] */ 16,-14,73,-33,7,-11,3,0,-55,-4,-24,3,46,-72,44,-93,45,46,-10,-37,12,30,8,12,5,3,63,-12,31,22,-127,-19,-24,-22,1,17,52,-3,38,3,-36,-15,-69,28,-17,-97,7,21, 
  /* [5][0][][] */ 23,-47,57,31,31,12,25,2,-75,-11,-49,31,34,14,13,-43,94,70,-10,-11,82,-55,127,-88,-18,49,-1,46,7,13,-30,-44,-21,-47,-34,8,45,23,70,-2,-75,29,28,29,44,-14,79,-1, 
  /* [6][0][][] */ -62,57,-127,93,57,-1,44,22,-24,-9,67,-72,-97,-17,-40,30,-117,29,-10,93,24,46,-94,-94,-14,-17,19,76,-27,-34,-45,4,40,82,-59,-27,-16,-11,77,-1,69,70,-125,-63,-32,121,-54,-43, 
  /* [7][0][][] */ 32,68,-82,21,11,67,110,66,37,79,-101,-1,-46,3,-68,-54,31,33,119,99,79,4,127,23,104,98,-50,87,-64,24,-4,-67,16,-67,-15,19,3,93,-55,73,-60,51,-5,-77,70,-28,45,-33, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.004601653665304184, 0.0038948312867432833, 0.0048552127555012703, 0.0051907012239098549, 0.0060388348065316677, 0.0067728250287473202, 0.0033444741275161505, 0.0044697858393192291, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -177, 8755, -861, -1095, 2229, -478, 4286, -4822, -2992, 575, -6149, -18, 655, -219, -1304, 4238, 2978, 4292, -437, -5037, -7425, -386, 13904, -4860, -3403, -186, 2179, -7007, -239, 1616, -8386, 8163, 5390, 329, 2761, 524, -36, -439, 10804, 1510, 6130, -3190, 3044, 6054, -2515, 8665, 407, 399, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030155997956171632, 0.00019371137022972107, 0.0010786122875288129, 0.00037864723708480597, 0.00023003290698397905, 0.00070585613138973713, 0.00020819043857045472, 0.00038180671981535852, 9.9880875495728105e-05, 0.00027806664002127945, 0.00021624602959491313, 0.0023320820182561874, 0.00068489724071696401, 0.001190131762996316, 0.00064660492353141308, 0.00076492648804560304, 0.00027512729866430163, 5.7421533711021766e-05, 0.00027394731296226382, 0.00030894845258444548, 0.00028818976716138422, 0.00024352771288249642, 0.00010746626503532752, 0.00054892263142392039, 0.00021307107817847282, 0.00064961973112076521, 0.00053933699382469058, 0.00025394005933776498, 0.00037237344076856971, 0.00045715487794950604, 0.00016562353994231671, 0.00010627314622979611, 0.00012415007222443819, 0.00019647479348350316, 0.0001980932429432869, 0.00039590804954059422, 0.0022443318739533424, 0.00029499205993488431, 0.00013185173156671226, 0.00022609812731388956, 0.00018175141303800046, 0.00017765353550203145, 0.00027652541757561266, 0.000199977817828767, 0.00039061554707586765, 0.00010270928760292009, 5.6369794037891552e-05, 0.00024640461197122931, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 1,-32,9,8,-24,-75,-50,56,-40,-11,-4,6,43,-2,-17,8,99,17,34,6,-8,-19,-70,24,7,-16,1,-17,-68,68,-11,-127,44,2,-50,-52,0,-38,9,-4,-20,29,9,1,-8,52,127,-23, -127,-93,-23,127,-69,52,-103,127,22,11,20,-4,51,25,-5,-41,-18,61,37,9,15,127,19,127,127,-32,-39,47,60,-127,-5,-84,59,-1,-51,-127,24,2,-51,-59,-127,-5,-95,-125,37,50,57,116, -12,-2,11,9,-32,26,30,48,7,-38,2,-1,-21,-3,-5,4,-55,31,-59,-28,0,-27,127,24,-48,0,21,6,15,37,11,24,-6,-22,-36,67,9,12,15,62,24,-17,27,-35,2,33,-17,-27, 
  /* [0][1][][] */ -21,-18,-27,1,27,-79,121,-65,-18,1,21,33,127,16,-5,-31,-6,-36,36,44,58,-69,38,9,-53,127,-76,-8,127,-105,49,-127,-36,16,-66,12,17,-65,-49,9,116,127,11,-127,-54,-66,-6,85, 108,-127,127,1,127,43,-77,-34,24,127,127,-127,-95,127,127,127,127,127,127,127,127,115,0,1,108,-102,-127,127,38,122,127,11,-127,127,127,125,-127,127,-127,-127,38,41,-127,-35,127,-127,-18,86, 34,36,-40,-1,-58,127,-127,91,98,-79,19,58,-38,2,7,-71,10,16,-119,17,26,-107,-31,-3,78,-15,-15,116,-75,-40,26,-42,-21,6,102,-30,43,3,-8,-94,105,9,35,44,-44,83,109,-84, 
  /* [0][2][][] */ -3,33,6,-30,-7,-32,-26,9,11,-10,1,1,-18,-15,-7,1,-38,13,7,-29,-3,-29,85,-13,-90,4,53,-15,12,-8,11,54,-5,-7,-60,25,3,-13,16,43,-24,-5,8,7,-14,10,-13,4, 33,-8,-33,-30,22,19,109,-78,127,-34,-6,6,-78,-24,-32,-69,-11,102,3,35,14,30,-26,-33,-82,58,90,-7,-94,8,-22,-3,-34,-4,-40,0,55,-25,-3,107,-112,-7,-13,68,31,46,14,-127, -6,25,3,-16,-22,-10,-16,-42,-27,-25,-14,1,14,-18,-16,8,44,45,-24,-10,-1,-15,-54,-13,30,-26,35,-15,-15,-1,-7,15,29,-21,-25,-59,-1,13,23,7,-12,-12,6,11,-9,9,76,-40, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012816298753023148, 0.0082327332347631454, 0.045841019600629807, 0.016092507168650627, 0.0097763985395431519, 0.029998885467648506, 0.0088480934500694275, 0.016226785257458687, 0.0042449370957911015, 0.011817831546068192, 0.0091904560104012489, 0.099113486707210541, 0.029108133167028427, 0.050580598413944244, 0.027480708435177803, 0.032509375363588333, 0.011692910455167294, 0.0024404150899499655, 0.011642760597169399, 0.01313030906021595, 0.012248064391314983, 0.010349927470088005, 0.0045673162676393986, 0.02332921139895916, 0.0090555204078555107, 0.027608837932348251, 0.022921822965145111, 0.010792452841997147, 0.015825871378183365, 0.019429082050919533, 0.0070390002802014351, 0.0045166085474193096, 0.0052763782441616058, 0.008350178599357605, 0.0084189623594284058, 0.016826091334223747, 0.095384098589420319, 0.012537161819636822, 0.0056036985479295254, 0.0096091702580451965, 0.007724435068666935, 0.0075502754189074039, 0.011752329766750336, 0.0084990570321679115, 0.016601160168647766, 0.0043651447631418705, 0.0023957162629812956, 0.010472196154296398, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2023, 5918, 17891, 1250, 2116, -1568, 5390, 11819, 3758, -636, 3045, -2269, 18841, -1990, 2036, 23089, -203, 2393, 230, 2514, 3174, 3449, 341, 22569, 5529, 3807, 14131, 1762, 6726, 5442, 685, 773, 923, 1495, -367, 179, -3012, -630, 2876, 2423, 4491, 2629, 4049, 4754, 4606, 3817, 1694, 7007, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00027326779672876, 0.00014103873400017619, 5.4670126701239496e-05, 0.00020949469762854278, 0.00023053993936628103, 0.00026489477022551, 0.00014675463899038732, 7.9776589700486511e-05, 0.00014558677503373474, 0.00027166181826032698, 0.00025792443193495274, 0.00020697888976428658, 5.164135291124694e-05, 0.00024739527725614607, 0.00024495806428603828, 4.6312106860568747e-05, 0.00041855941526591778, 0.00019026584050152451, 0.00029242198797874153, 0.00024328753352165222, 0.00022655162320006639, 0.00021068219211883843, 0.00045318886986933649, 4.776065907208249e-05, 0.0001510908332420513, 0.00014913857739884406, 7.1476693847216666e-05, 0.00024570533423684537, 0.00012097663420718163, 0.00014359469059854746, 0.00043007227941416204, 0.00049715611385181546, 0.00026622024597600102, 0.00026202580193057656, 0.00028652971377596259, 0.00030799786327406764, 0.0001989179290831089, 0.00029691599775105715, 0.00020475192286539823, 0.00023766790400259197, 0.0001698251289781183, 0.0001926886907313019, 0.00019581716333050281, 0.00018045524484477937, 0.00015934779366943985, 0.00020328082609921694, 0.00039125292096287012, 0.00012214167509227991, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 48,127,-65,-68,9,92,20,67, 
  /* [1][0][][] */ 59,-74,40,-127,-48,73,-75,-47, 
  /* [2][0][][] */ -33,127,121,49,115,5,57,11, 
  /* [3][0][][] */ 106,42,-88,57,0,-91,-127,-22, 
  /* [4][0][][] */ -50,29,10,-57,-23,121,127,50, 
  /* [5][0][][] */ 21,83,-127,-78,53,79,17,-20, 
  /* [6][0][][] */ -6,127,66,63,78,9,20,-105, 
  /* [7][0][][] */ 127,-13,-38,27,24,16,115,7, 
  /* [8][0][][] */ 51,127,66,89,101,84,85,-82, 
  /* [9][0][][] */ 47,116,-127,-77,21,93,4,75, 
  /* [10][0][][] */ -67,-40,22,-47,-13,-30,-51,127, 
  /* [11][0][][] */ 19,-109,-127,-15,25,-19,42,-8, 
  /* [12][0][][] */ -21,-97,-113,-19,-127,29,-66,46, 
  /* [13][0][][] */ -20,6,-94,103,-127,-23,2,-16, 
  /* [14][0][][] */ -69,-43,-127,-5,38,2,-10,-62, 
  /* [15][0][][] */ 23,-101,-127,15,-109,-36,-34,-20, 
  /* [16][0][][] */ 127,-62,-16,63,-89,24,34,94, 
  /* [17][0][][] */ -29,120,127,-16,-52,-6,-28,-21, 
  /* [18][0][][] */ 3,-127,40,67,3,-58,53,-87, 
  /* [19][0][][] */ 127,-43,-59,34,-96,5,36,91, 
  /* [20][0][][] */ -27,-127,73,69,-16,-83,3,-74, 
  /* [21][0][][] */ -11,-60,-12,-41,127,-6,36,18, 
  /* [22][0][][] */ -127,28,-92,48,56,52,-104,-119, 
  /* [23][0][][] */ -94,-55,64,-14,-107,127,123,-61, 
  /* [24][0][][] */ -26,58,-1,-42,-30,111,127,5, 
  /* [25][0][][] */ -52,-104,-127,-59,-46,-22,-28,-44, 
  /* [26][0][][] */ -12,76,-17,127,-92,31,-62,2, 
  /* [27][0][][] */ 15,-127,39,76,8,-63,0,-125, 
  /* [28][0][][] */ 18,127,62,52,112,-13,28,-54, 
  /* [29][0][][] */ 81,42,-25,13,77,-127,-123,33, 
  /* [30][0][][] */ 22,-9,29,-127,21,-20,17,-21, 
  /* [31][0][][] */ 42,-29,8,62,-8,25,9,127, 
  /* [32][0][][] */ -102,-70,26,-58,-60,127,73,107, 
  /* [33][0][][] */ -32,44,43,-37,34,127,-111,70, 
  /* [34][0][][] */ 43,127,-90,-50,23,49,-66,50, 
  /* [35][0][][] */ 12,-127,28,53,-18,-59,30,-72, 
  /* [36][0][][] */ -21,-27,-72,-4,-127,-59,-15,12, 
  /* [37][0][][] */ -50,-127,67,77,-48,-91,-18,-50, 
  /* [38][0][][] */ -69,27,57,-74,-127,-87,-65,84, 
  /* [39][0][][] */ 60,-127,98,55,1,-83,-18,-65, 
  /* [40][0][][] */ 10,62,18,51,-127,-14,-65,25, 
  /* [41][0][][] */ 127,124,-92,-124,57,17,-1,7, 
  /* [42][0][][] */ -17,-30,-12,17,127,12,42,26, 
  /* [43][0][][] */ 127,38,88,28,-72,-24,64,111, 
  /* [44][0][][] */ 70,28,-38,-4,72,-127,-117,4, 
  /* [45][0][][] */ 47,12,25,14,85,-127,0,-51, 
  /* [46][0][][] */ 54,-32,-8,127,31,54,12,70, 
  /* [47][0][][] */ -75,-83,45,74,-65,24,127,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.003901549382135272, 0.0020136642269790173, 0.0007805464556440711, 0.0029910365119576454, 0.0032915074843913317, 0.0037820048164576292, 0.0020952725317329168, 0.0011390011059120297, 0.002078598365187645, 0.0038786204531788826, 0.003682486480101943, 0.0029551172628998756, 0.00073730346048250794, 0.0035321577452123165, 0.0034973607398569584, 0.00066121580312028527, 0.0059759337455034256, 0.0027164986822754145, 0.0041750213131308556, 0.0034735098015516996, 0.0032345647923648357, 0.0030079907737672329, 0.0064703519456088543, 0.00068189733428880572, 0.0021571819670498371, 0.0021293088793754578, 0.0010205003200098872, 0.0035080297384411097, 0.0017272300319746137, 0.0020501567050814629, 0.0061403075233101845, 0.007098089437931776, 0.0038009290583431721, 0.0037410433869808912, 0.0040908949449658394, 0.0043974039144814014, 0.0028400279115885496, 0.0042391838505864143, 0.0029233221430331469, 0.0033932761289179325, 0.0024246587418019772, 0.0027510905638337135, 0.0027957570273429155, 0.0025764289312064648, 0.002275069709867239, 0.0029023187234997749, 0.0055860686115920544, 0.0017438636859878898, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7372, 15540, -4776, 4472, -221, 4541, -11525, -17442, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00025252802879549563, 0.00012746012362185866, 0.00014303978241514415, 0.00015233554586302489, 0.00022522949439007789, 0.00018417535466141999, 0.00020378934277687222, 0.00012945331400260329, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,0,34,11,-38,-17,13,9,-39,-6,-64,-56,-27,-64,-12,-30,46,-39,36,45,-20,29,-35,14,1,-39,52,-13,-5,-22,20,14,81,33,35,-127,15,-1,-14,-32,3,-17,40,47,35,3,27,2, 
  /* [1][0][][] */ -3,36,66,-25,-6,46,-50,-30,0,23,-14,-94,9,95,-15,65,-16,20,-24,-59,10,-83,-34,17,-71,-11,-1,-117,-23,-18,30,-56,47,81,-41,3,127,-27,6,43,-30,40,-85,-25,119,-20,-30,-22, 
  /* [2][0][][] */ -1,-23,-63,15,4,43,28,5,-10,42,-5,26,60,-91,19,-61,38,-90,29,30,-29,48,-10,26,-16,61,-28,-72,21,7,16,-69,-39,-86,37,-33,101,24,-11,-59,-4,32,76,30,127,14,22,20, 
  /* [3][0][][] */ -6,30,-63,43,15,-34,-64,-98,14,-20,-35,0,8,27,38,77,-5,17,-41,24,7,-95,32,-58,-69,-7,127,-9,-46,-5,-63,16,0,-76,14,-10,-16,-33,-16,105,-46,-38,2,19,42,8,-38,44, 
  /* [4][0][][] */ -27,-50,-9,11,31,-29,-15,-10,30,-30,56,-78,4,30,8,9,-14,-22,13,-13,-5,-55,6,-23,18,-10,38,47,34,24,-16,25,-10,-3,0,-3,-74,81,37,-25,31,-19,-22,-22,-78,12,127,10, 
  /* [5][0][][] */ 41,-21,3,13,35,-41,32,-127,21,-34,-11,115,-84,66,21,-63,0,-86,15,0,-35,64,-32,-39,-61,73,-21,1,-21,48,-47,-33,31,55,32,-9,-42,-10,-49,-46,21,-42,-48,-9,-36,60,90,18, 
  /* [6][0][][] */ 51,-24,17,-9,-27,-18,-36,16,-39,7,-41,127,-41,-34,-3,57,11,44,16,31,36,-81,-18,21,21,41,-63,4,9,-42,11,35,6,17,-12,0,11,1,-4,-8,-4,-14,41,56,0,-31,72,-17, 
  /* [7][0][][] */ -25,3,-5,67,35,30,2,27,23,9,71,-5,123,115,60,49,42,43,-16,1,20,-22,-87,-21,13,-5,-27,59,34,-33,-31,-23,43,4,44,-96,-75,34,33,57,-32,38,83,127,-58,-30,-110,66, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010732441209256649, 0.0054170549847185612, 0.0060791904106736183, 0.0064742607064545155, 0.0095722535625100136, 0.0078274523839354515, 0.0086610466241836548, 0.0055017657577991486, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 10855, 3842, 3159, -1180, -139, -653, -947, 33091, 112, 2548, 7756, 55864, 3972, 5132, -186, 12666, -1787, 12010, 1260, 6821, 11912, 279, 2064, -9095, 10006, 1772, 4119, 14273, 1130, -1108, -9928, 10773, 2387, -309, 882, 6055, -8616, 23487, -1319, 19347, -203, -956, 7636, 2899, 409, -1424, 4515, -837, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.9687408288009465e-05, 8.8384971604682505e-05, 0.00014995010860729963, 0.00025563387316651642, 0.00088877923553809524, 0.00013885197404306382, 0.00020204570319037884, 9.0630899649113417e-05, 0.00014956454106140882, 8.3086466474924237e-05, 6.9126333983149379e-05, 5.6597793445689604e-05, 7.6590673415921628e-05, 6.9665562477894127e-05, 0.00029060585075058043, 0.00017721856420394033, 0.00013471345300786197, 0.00034380657598376274, 0.0001449339761165902, 0.00012685859110206366, 0.00020600724383257329, 0.00057727663079276681, 0.00013365146878641099, 0.0003222606610506773, 0.00012113608681829646, 6.7235363530926406e-05, 5.0401282351231202e-05, 7.2945076681207865e-05, 0.00012222368968650699, 0.00099971343297511339, 0.00024902363657020032, 6.1559265304822475e-05, 9.38960220082663e-05, 0.00011306641681585461, 0.00020763598149642348, 6.09182970947586e-05, 7.3240022175014019e-05, 2.9413189622573555e-05, 0.00015713865286670625, 5.5750155297573656e-05, 0.00017783236398827285, 0.00014486357395071536, 6.6115957451984286e-05, 9.8845855973195285e-05, 7.4572162702679634e-05, 0.00048238071030937135, 5.7934714277507737e-05, 0.00033812169567681849, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-107,-8,-23,127,-43,73,-66,-86,-90,-29,-45,110,31,68,-127,53,-14,3,-33,-74,100,4,6,-8,66,74,-30,78,-73,10,-67,-106,-88,41,67,14,84,108,-96,-122,-17,29,62,56,-127,88,77, -43,-123,-81,49,-75,100,46,-54,-72,39,72,-92,127,85,118,-68,-78,-84,39,-59,-61,66,-59,110,-76,88,94,-112,92,-49,11,-114,-50,-87,69,127,118,117,127,-73,-127,-68,68,93,80,119,88,95, 5,-34,-74,86,-44,-33,33,-3,83,22,43,-70,22,46,-37,-24,-73,-19,27,-42,-18,-3,-78,6,-82,26,25,-87,26,59,116,-81,16,4,-7,47,75,58,41,21,-25,92,62,37,42,36,7,-105, 
  /* [0][1][][] */ -101,-85,-20,-74,-78,-68,117,-104,-127,-127,84,-82,81,44,-118,-71,127,-127,-59,-68,-93,94,-41,4,-8,98,116,-52,-113,-79,-2,-69,-88,-127,-127,80,32,110,1,-99,53,-17,74,107,86,116,125,-127, -127,-127,-127,-95,-22,127,127,-127,81,57,127,-127,102,127,73,-120,55,-87,-127,-127,-127,127,-127,127,-126,127,127,-127,-127,127,-4,-127,-127,-110,42,127,127,127,-4,-127,86,-97,127,127,127,1,127,106, -37,-66,-121,127,69,-47,78,-24,61,28,21,-48,11,63,81,-69,-21,4,-21,-78,-49,-3,-75,-12,-127,48,38,-94,-66,38,127,-102,-44,4,53,73,75,86,-13,-16,37,127,79,20,58,-46,14,25, 
  /* [0][2][][] */ -97,-29,19,33,-48,-20,31,-40,37,-47,8,-48,4,15,-35,-12,-76,-20,95,-43,-14,36,-74,-19,4,43,80,-24,31,60,-9,5,-4,-88,-46,49,10,11,-75,-49,17,0,28,36,21,56,25,-48, -89,-70,-43,-59,94,29,70,-63,93,16,-48,-61,-6,49,-127,-93,34,17,47,-75,-42,40,-68,48,-83,61,75,-33,43,4,-24,-34,-54,-30,-70,58,27,18,-85,-76,16,-48,69,74,37,-108,30,12, -24,-16,-43,1,-19,-14,29,-15,-69,21,-15,-22,-7,13,46,-43,28,42,3,-57,-29,-27,-8,-21,-51,14,34,-17,11,-62,51,-29,-68,12,11,42,17,20,-41,-25,-2,57,27,29,20,-1,10,44, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033867147285491228, 0.0037563610821962357, 0.0063728797249495983, 0.01086443942040205, 0.037773117423057556, 0.0059012086130678654, 0.0085869422182440758, 0.0038518132641911507, 0.006356493104249239, 0.0035311747342348099, 0.002937869168817997, 0.0024054062087088823, 0.0032551034819334745, 0.0029607864562422037, 0.012350748293101788, 0.007531789131462574, 0.0057253218255937099, 0.01461177971214056, 0.0061596939340233803, 0.005391489714384079, 0.0087553076446056366, 0.024534255266189575, 0.00568018713966012, 0.013696078211069107, 0.0051482836715877056, 0.0028575027827173471, 0.0021420544944703579, 0.003100165631622076, 0.0051945066079497337, 0.042487822473049164, 0.010583504103124142, 0.0026162688154727221, 0.0039905807934701443, 0.0048053227365016937, 0.0088245291262865067, 0.0025890276301652193, 0.0031127007678151131, 0.0012500605080276728, 0.0066783926449716091, 0.0023693814873695374, 0.0075578754767775536, 0.0061567015945911407, 0.0028099280316382647, 0.0042009488679468632, 0.0031693167984485626, 0.020501179620623589, 0.0024622252676635981, 0.014370172284543514, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1480, -466, -410, 1077, 12824, 1503, -453, 4442, 1376, 1215, 308, 3091, 846, 555, -1179, 513, 2772, 11720, 2730, -727, 1205, -1292, -123, 2197, -308, -708, 1367, -38, 3677, 13251, 1950, -33, 351, -86, 2299, 38, 351, -234, 1017, 1234, 1727, 2334, 212, -336, 797, 2321, 1387, -286, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00038325035711750388, 0.00035534799098968506, 0.00028825263143517077, 0.00032963234116323292, 7.9014527727849782e-05, 0.0003880443109665066, 0.00054516003001481295, 0.00020297904848121107, 0.00031509593827649951, 0.000516195606905967, 0.00031502518686465919, 0.00029736224678345025, 0.00025737323448993266, 0.00037260112003423274, 0.00028226050199009478, 0.00030090552172623575, 0.00026027922285720706, 7.966673729242757e-05, 0.00027485500322654843, 0.00036588098737411201, 0.00039022034616209567, 0.00018753109907265753, 0.00045520762796513736, 0.00034646544372662902, 0.00046834253589622676, 0.00074280594708397985, 0.00036484794691205025, 0.0011756010353565216, 0.00022812113456893712, 7.4324947490822524e-05, 0.00037362080183811486, 0.000784065923653543, 0.00041180779226124287, 0.0004083584644831717, 0.00031685817521065474, 0.00035883786040358245, 0.00060605304315686226, 0.00057700142497196794, 0.00038958369987085462, 0.00049627438420429826, 0.0003282446414232254, 0.00029184448067098856, 0.00032500509405508637, 0.00046310745528899133, 0.00043088331585749984, 0.00022523273946717381, 0.00026180132408626378, 0.00031243171542882919, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -38,29,3,-23,-77,-33,-127,26, 
  /* [1][0][][] */ 82,-81,-61,-65,127,-93,121,30, 
  /* [2][0][][] */ -101,120,-46,-127,52,-20,-34,41, 
  /* [3][0][][] */ 53,25,90,4,94,110,127,-16, 
  /* [4][0][][] */ -68,-127,62,22,-57,-113,-8,-30, 
  /* [5][0][][] */ 127,-21,58,64,-61,-1,2,-11, 
  /* [6][0][][] */ 23,30,127,-29,45,-38,-39,27, 
  /* [7][0][][] */ 28,4,-127,-43,-45,101,97,-75, 
  /* [8][0][][] */ 3,127,-32,8,77,99,48,48, 
  /* [9][0][][] */ -3,127,-78,98,0,-125,70,127, 
  /* [10][0][][] */ 7,-119,-6,-37,-76,-127,-50,-84, 
  /* [11][0][][] */ -127,-77,113,54,-5,-63,102,64, 
  /* [12][0][][] */ -22,32,-127,89,32,-51,-72,99, 
  /* [13][0][][] */ 96,-127,89,78,6,35,41,-59, 
  /* [14][0][][] */ -42,106,-44,-127,-35,-113,-26,-61, 
  /* [15][0][][] */ 42,119,32,-18,41,-64,96,-127, 
  /* [16][0][][] */ -120,-127,-64,92,-51,24,-17,81, 
  /* [17][0][][] */ -28,-126,-127,84,-75,83,-48,76, 
  /* [18][0][][] */ -86,-71,-48,95,-3,70,-1,127, 
  /* [19][0][][] */ 63,-127,94,-124,6,-68,27,-29, 
  /* [20][0][][] */ 0,66,36,9,37,127,80,-20, 
  /* [21][0][][] */ 25,117,46,-32,40,-71,96,-127, 
  /* [22][0][][] */ 17,6,109,22,-13,127,38,-35, 
  /* [23][0][][] */ -104,-67,31,-79,95,98,-60,-127, 
  /* [24][0][][] */ -95,-101,30,-87,119,119,-48,-127, 
  /* [25][0][][] */ 127,5,-61,-15,14,33,-61,-8, 
  /* [26][0][][] */ -126,-34,-127,-20,-56,-32,20,-5, 
  /* [27][0][][] */ 74,24,-4,-55,-127,-24,78,87, 
  /* [28][0][][] */ -127,-112,-11,69,-71,-108,11,14, 
  /* [29][0][][] */ 123,109,47,-127,31,12,-76,-96, 
  /* [30][0][][] */ -69,-64,39,-60,72,74,-46,-127, 
  /* [31][0][][] */ 38,42,-6,127,4,-75,5,15, 
  /* [32][0][][] */ -27,127,-14,35,20,80,-22,56, 
  /* [33][0][][] */ -34,127,-81,26,21,-28,-32,-1, 
  /* [34][0][][] */ -127,-101,-43,94,-17,5,8,108, 
  /* [35][0][][] */ -49,127,-32,-5,70,98,54,64, 
  /* [36][0][][] */ 67,26,2,-47,-127,-24,97,113, 
  /* [37][0][][] */ -68,111,31,29,-127,113,-29,-99, 
  /* [38][0][][] */ 44,24,30,20,127,75,115,44, 
  /* [39][0][][] */ -20,-74,41,-23,10,40,-91,127, 
  /* [40][0][][] */ -72,-66,-82,127,-23,-5,9,70, 
  /* [41][0][][] */ 127,19,80,115,-53,-13,-18,-18, 
  /* [42][0][][] */ -42,11,-73,-127,59,-108,5,83, 
  /* [43][0][][] */ 23,-9,86,-3,34,127,91,5, 
  /* [44][0][][] */ -30,-29,-65,127,44,13,-41,-37, 
  /* [45][0][][] */ 57,127,107,-122,60,-54,33,-116, 
  /* [46][0][][] */ -31,-127,-39,36,-5,44,-70,126, 
  /* [47][0][][] */ 45,38,120,3,90,123,127,-14, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0038352068513631821, 0.0035559863317757845, 0.002884559566155076, 0.0032986486330628395, 0.00079070264473557472, 0.0038831802085042, 0.0054554454982280731, 0.0020312222186475992, 0.0031531818676739931, 0.0051655969582498074, 0.0031524740625172853, 0.0029757199808955193, 0.0025755479000508785, 0.003728639567270875, 0.0028245958965271711, 0.0030111777596175671, 0.0026046282146126032, 0.00079722935333848, 0.0027504886966198683, 0.0036613908596336842, 0.0039049559272825718, 0.0018766338471323252, 0.0045552873052656651, 0.003467098344117403, 0.0046867290511727333, 0.0074332989752292633, 0.0036510529462248087, 0.011764302849769592, 0.0022828204091638327, 0.00074377376586198807, 0.0037388433702290058, 0.0078461896628141403, 0.0041209827177226543, 0.0040864651091396809, 0.0031708169262856245, 0.0035909097641706467, 0.0060648052021861076, 0.0057740844786167145, 0.003898584982380271, 0.0049662445671856403, 0.0032847616821527481, 0.0029205034952610731, 0.0032523435074836016, 0.004634341225028038, 0.0043118726462125778, 0.0022539161145687103, 0.0026198599953204393, 0.0031265208963304758, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7413, -2923, 11898, -9507, 21041, 8121, -9629, 11323, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018225105304736644, 0.00022476876620203257, 0.00017453532200306654, 0.00023737398441880941, 0.00018482579616829753, 0.00016696381499059498, 0.00014698029553983361, 0.00027749163564294577, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -15,-15,-19,-68,-25,-39,21,-16,37,5,-30,-2,111,127,-13,-99, 
  /* [1][0][][] */ 127,-59,-43,18,-45,75,-68,-42,-40,86,-35,-53,-10,2,-64,-14, 
  /* [2][0][][] */ -37,-96,41,38,45,-54,-76,-24,30,-88,24,-127,45,-24,-77,26, 
  /* [3][0][][] */ 39,14,15,18,-9,67,-53,-22,127,42,13,17,5,-15,10,25, 
  /* [4][0][][] */ -90,-34,-31,-127,-3,38,59,-118,32,-17,-49,-36,-114,30,-40,-18, 
  /* [5][0][][] */ 90,52,68,-30,49,-53,-127,-127,-16,-84,65,51,-59,53,76,-46, 
  /* [6][0][][] */ 108,45,-124,-77,29,-72,4,-90,-42,22,-127,95,93,-91,3,81, 
  /* [7][0][][] */ -127,-3,98,-26,-66,1,-3,-57,-50,60,86,-35,61,-26,32,26, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0077456696890294552, 0.0095526725053787231, 0.0074177510105073452, 0.010088394396007061, 0.0078550959005951881, 0.0070959622971713543, 0.0062466626986861229, 0.011793394573032856, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 22507, -41, -70, 2391, -1135, 21, 10690, 1238, 263, 97, -2090, 2245, -1723, -988, -250, -730, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 9.9447395768947899e-05, 0.00035460045910440385, 0.00017367464897688478, 0.00017169499187730253, 0.0014380478532984853, 0.0010946918046101928, 0.00015691433509346098, 0.00088976079132407904, 0.00025744212325662374, 0.0012867341283708811, 0.00020884157856926322, 0.00026171846548095345, 0.00012081926251994446, 0.00024348931037820876, 0.00026586165768094361, 0.0010397933656349778, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-8,3,10,-18,11,11,16,-4,-11,4,-15,-2,-7,2,-1, 7,-3,1,8,14,-1,12,-25,-7,9,2,90,-11,19,7,-1, 4,-9,-3,8,3,-13,-5,11,2,2,-1,-10,0,-4,-4,-2, 
  /* [0][1][][] */ 9,-12,2,7,127,-23,-127,-21,127,127,-5,-9,114,-23,2,-18, -127,127,127,3,-86,-91,-18,-102,17,-105,127,127,127,127,127,127, 25,-9,-5,3,-10,127,-1,-10,-2,-13,-1,-2,10,-2,-11,-7, 
  /* [0][2][][] */ -1,-2,0,-17,-17,16,53,7,-9,-7,-2,-2,-9,2,-7,-11, 24,-19,-7,-127,8,-15,-11,127,-5,1,-1,-19,-11,-55,-10,-35, 4,-15,-8,-5,2,-4,0,-3,0,2,-7,2,-1,-3,-8,-10, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0042265141382813454, 0.015070519410073757, 0.0073811723850667477, 0.0072970367036759853, 0.061117034405469894, 0.046524401754140854, 0.0066688591614365578, 0.037814833223819733, 0.01094129029661417, 0.054686199873685837, 0.0088757667690515518, 0.011123035103082657, 0.005134818609803915, 0.010348295792937279, 0.011299120262265205, 0.044191218912601471, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1061, 5, 85, 343, 52467, 49113, 4778, 10805, 3723, 8887, 653, -188, 3930, 2249, 17, 25485, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00024622815544717014, 0.0016101138899102807, 0.00039288701373152435, 0.0001890489220386371, 2.7702333682100289e-05, 3.1280094844987616e-05, 0.00016408521332778037, 3.2256371923722327e-05, 0.00026612219517119229, 3.8665897591272369e-05, 0.00064488832140341401, 0.001262216828763485, 0.00045726800453849137, 1.857674760685768e-05, 0.0012126713991165161, 4.5485026930691674e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 66, -37, 17, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 106, -95, -11, 
  /* [1][1][][] */ -127, 105, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -13, 
  /* [3][2][][] */ -101, -126, -43, 
  /* [4][0][][] */ 20, -59, -3, 
  /* [4][1][][] */ 19, -127, -1, 
  /* [4][2][][] */ 9, -86, -12, 
  /* [5][0][][] */ -61, 21, -8, 
  /* [5][1][][] */ -127, 25, -4, 
  /* [5][2][][] */ -87, 18, -6, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -52, 55, -17, 
  /* [6][2][][] */ -37, -53, -90, 
  /* [7][0][][] */ 32, 25, -23, 
  /* [7][1][][] */ 127, 74, -8, 
  /* [7][2][][] */ 38, 4, -27, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -55, -88, 127, 
  /* [8][2][][] */ -27, -62, 96, 
  /* [9][0][][] */ -20, 49, -9, 
  /* [9][1][][] */ -13, 127, -10, 
  /* [9][2][][] */ -3, 92, -3, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -18, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 74, 13, -19, 
  /* [13][1][][] */ 127, 107, 2, 
  /* [13][2][][] */ 85, 127, 58, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -85, -31, 21, 
  /* [15][1][][] */ -122, -127, 19, 
  /* [15][2][][] */ -15, -69, -3, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.082530856132507324, 0.53967863321304321, 0.13168802857398987, 0.063365496695041656, 0.0092852795496582985, 0.010484475642442703, 0.054998151957988739, 0.010811704210937023, 0.089198946952819824, 0.012960052117705345, 0.21615393459796906, 0.42307034134864807, 0.1532672792673111, 0.006226561963558197, 0.40646368265151978, 0.015245690010488033, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,120,120,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.099929511547088623, } };
const TfArray<1, int> quant46_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,120,120,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,121,121,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.070040836930274963, } };
const TfArray<1, int> quant50_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.073295466601848602, } };
const TfArray<1, int> quant53_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10037568211555481, } };
const TfArray<1, int> quant54_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.061727806925773621, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.062942005693912506, } };
const TfArray<1, int> quant61_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.079562239348888397, } };
const TfArray<1, int> quant62_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.078964941203594208, } };
const TfArray<1, int> quant65_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.13563364744186401, } };
const TfArray<1, int> quant66_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,30,30,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.07217378169298172, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,30,30,6 } };
const TfArray<1, float> quant69_scale = { 1, { 0.197122722864151, } };
const TfArray<1, int> quant69_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,30,30,6 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension44, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension46, 115200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension47, 691200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 702768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension49, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 345600, (TfLiteIntArray*)&tensor_dimension50, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension51, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension53, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension55, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension57, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 221808, (TfLiteIntArray*)&tensor_dimension58, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension59, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension61, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension62, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension63, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 100800, (TfLiteIntArray*)&tensor_dimension65, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension66, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension68, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5408, (TfLiteIntArray*)&tensor_dimension69, 5400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 5400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

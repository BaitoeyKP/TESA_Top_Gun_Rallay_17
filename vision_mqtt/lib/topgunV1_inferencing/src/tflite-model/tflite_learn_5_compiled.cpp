/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.11.2023 23:02:11

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1410816;
#else
constexpr int kTensorArenaSize = 1409792;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,240,240,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032602844294160604, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[18] = { 11419, -21789, -17224, -19279, -21458, -17098, -19411, -22885, -19825, -15117, -17578, -23146, -21433, -24425, -13873, -26499, -13236, -20325, };
const TfArray<1, int> tensor_dimension2 = { 1, { 18 } };
const TfArray<18, float> quant2_scale = { 18, { 0.00061705615371465683, 0.00044519317452795804, 0.00055129255633801222, 0.00049837335245683789, 0.00044868580880574882, 0.0005588834173977375, 0.00049499882152304053, 0.00042098175617866218, 0.00047102465759962797, 0.0006283164257183671, 0.00055037124548107386, 0.00041409762343391776, 0.00045021611731499434, 0.00039904937148094177, 0.00069388968404382467, 0.00036067134351469576, 0.00072180561255663633, 0.00047405494842678308, } };
const TfArray<18, int> quant2_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[18*1*1*32] = { 
  /* [0][0][][] */ 15,-26,-24,64,-43,-13,-15,2,-55,-22,-27,-52,-6,3,3,-50,11,-5,52,-15,1,-46,-41,-4,23,22,16,9,-33,-27,127,-27, 
  /* [1][0][][] */ 40,-5,-29,-24,24,5,-48,32,54,-9,-54,7,15,-124,-32,45,11,-59,-127,-32,51,54,60,14,7,-51,-35,50,-112,0,28,29, 
  /* [2][0][][] */ -7,-7,-36,-27,36,43,-38,52,-50,1,-9,-69,0,1,39,11,-3,28,-127,43,-50,26,33,16,-19,-38,-36,-3,-54,-16,-73,52, 
  /* [3][0][][] */ 32,19,-46,37,32,-27,40,-39,-18,-1,45,37,25,25,24,26,0,-15,-58,32,-44,12,-57,46,-127,-6,-21,12,-122,-19,-39,36, 
  /* [4][0][][] */ -18,-3,55,-127,-21,-15,51,67,43,21,41,-62,13,-58,-31,29,10,65,-22,55,-50,-39,16,-9,-75,19,-88,-78,52,33,-50,-46, 
  /* [5][0][][] */ 29,44,-44,-76,-18,-15,-24,3,47,30,-36,-69,-45,13,7,46,-33,37,-53,13,35,-8,50,27,-127,5,-55,-27,-106,35,-21,37, 
  /* [6][0][][] */ 50,-8,40,-12,-60,2,-1,31,-4,45,-52,-23,-10,3,-40,45,-37,1,40,52,36,26,53,-52,-127,-52,39,10,8,52,-106,24, 
  /* [7][0][][] */ -41,77,23,-85,-30,-11,-68,-3,39,-30,74,35,35,-33,22,40,2,22,-127,-56,42,-8,-41,-43,-95,13,-66,55,-17,-65,-13,37, 
  /* [8][0][][] */ -30,46,43,5,-25,16,-40,-44,55,8,-69,-30,-18,-73,63,4,-9,16,-86,13,29,26,9,-16,-17,56,-24,-5,-127,18,-113,-10, 
  /* [9][0][][] */ -32,18,19,-10,13,39,-39,-40,47,-11,29,41,-41,-39,-9,-18,-9,28,-3,12,25,26,12,-31,-36,7,34,-1,0,-30,-127,-10, 
  /* [10][0][][] */ 17,-13,-16,3,1,11,3,41,10,-6,7,-13,18,-84,9,-9,10,0,-78,17,26,-28,-5,44,-96,59,30,45,16,39,-127,-18, 
  /* [11][0][][] */ 51,28,64,35,-105,-45,61,11,-6,28,-33,-7,-75,8,30,38,35,-38,-106,-34,-13,62,12,-1,-91,-33,47,65,-127,-18,-90,40, 
  /* [12][0][][] */ -34,27,-56,34,63,-21,-3,-15,-50,11,-30,19,-127,-69,59,0,14,46,4,57,6,53,26,38,-28,72,-14,-78,-56,-10,-88,-31, 
  /* [13][0][][] */ 2,-4,64,57,-94,-16,-46,-36,74,25,25,-15,0,-39,40,73,6,53,-44,2,-20,55,-31,14,-47,-27,-12,-23,-97,-10,-127,6, 
  /* [14][0][][] */ 34,46,-21,-38,-27,8,32,12,-29,24,44,15,-44,-12,-15,-8,43,17,-95,32,-2,8,-19,-15,-115,44,-24,-35,-43,25,-127,11, 
  /* [15][0][][] */ 16,-25,63,-107,-16,49,46,57,-53,-6,-62,58,-31,-71,75,21,-32,-37,-127,-23,37,26,60,-83,-99,66,-64,-46,72,84,-57,-7, 
  /* [16][0][][] */ 44,-18,-11,27,-7,31,5,-5,5,-31,-37,-11,9,-11,7,-1,-24,-2,-13,-23,-21,43,-3,34,-55,-6,-15,7,33,-11,-127,22, 
  /* [17][0][][] */ -18,6,-13,-56,-62,-38,-1,24,1,35,43,-19,-24,51,63,-45,-21,57,-49,-26,64,-33,39,54,-74,-36,33,-91,-54,-41,-127,-28, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 18,1,1,32 } };
const TfArray<18, float> quant3_scale = { 18, { 0.0077774431556463242, 0.0056112632155418396, 0.0069485516287386417, 0.0062815523706376553, 0.005655284970998764, 0.0070442277938127518, 0.0062390188686549664, 0.0053061000071465969, 0.005936846137046814, 0.0079193683341145515, 0.0069369394332170486, 0.0052193314768373966, 0.0056745731271803379, 0.0050296615809202194, 0.0087458612397313118, 0.0045459410175681114, 0.0090977167710661888, 0.005975040141493082, } };
const TfArray<18, int> quant3_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 43, -311, -234, 1905, 16, 435, 201, 476, -1059, -340, 94, -334, 563, 1424, 164, -941, 47, 126, 3059, -218, 299, -517, -74, -291, 1977, 800, 416, 285, 402, -137, 3449, -559, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 7.4610630690585822e-05, 6.0730744735337794e-05, 6.9695975980721414e-05, 6.7903158196713775e-05, 8.0834281106945127e-05, 6.0668138758046553e-05, 5.0281065341550857e-05, 5.9431862609926611e-05, 5.5492884712293744e-05, 4.6675937483087182e-05, 5.3953866881784052e-05, 6.939297600183636e-05, 5.8273813920095563e-05, 6.1545884818769991e-05, 6.1779122916050255e-05, 5.3622414270648733e-05, 5.2125746151432395e-05, 6.5037820604629815e-05, 9.4574606919195503e-05, 4.7151708713499829e-05, 5.6452539865858853e-05, 5.7416855270275846e-05, 7.897386240074411e-05, 6.0809536080341786e-05, 0.00012676442565862089, 5.364108073990792e-05, 6.2338716816157103e-05, 6.0562520957319066e-05, 7.5278978329151869e-05, 5.406220952863805e-05, 0.00011126157914986834, 5.0082169764209539e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -6,-13,79,5,64,-1,-55,-77,5,-79,-73,-10,42,18,-41,43,-53,-30,-42,-41,-81,-71,18,69,-66,-16,54,-11,63,9,7,-53,37,-20,-70,36,-58,-64,-51,15,36,-40,-51,72,29,-63,84,2,-12,-127,-13,56,-36,-37,-70,71,11,36,106,-52,-56,58,-45,30,9,30,25,61,41,55,51,-98,75,-77,39,38,-57,-9,-30,29,38,6,71,16,-16,-55,-49,48,30,98,6,-55,-11,40,-13,2, 
  /* [1][0][][] */ -92,23,-48,7,-8,68,35,-1,64,-62,-92,82,42,-31,-35,24,78,-21,2,104,-64,-15,40,36,57,18,-37,92,18,-12,77,-40,58,58,-9,28,69,43,-33,-43,-37,26,-7,-82,-30,19,-19,-33,3,-127,101,61,20,51,-73,-46,22,73,72,48,-35,77,-36,-44,-26,19,45,6,55,26,4,5,-85,84,-51,15,69,8,-57,63,-47,60,-35,-65,7,114,-56,-42,73,90,51,16,28,22,26,-1, 
  /* [2][0][][] */ 5,19,-33,66,-17,-55,53,71,-61,57,-28,93,65,-23,59,-63,-37,-10,1,41,-117,12,71,23,-40,44,77,12,-48,58,30,49,-40,-30,-53,-68,-42,67,84,1,-93,-64,16,12,-78,70,-25,-45,76,-20,49,-40,-25,32,15,19,-56,73,-46,-1,-2,54,-48,43,50,15,36,53,-67,54,0,-57,35,-64,32,3,-34,9,17,22,32,-71,-24,-53,3,-127,-9,-6,43,62,-13,16,-39,-56,-71,-44, 
  /* [3][0][][] */ 81,21,31,-15,-33,26,-63,6,52,21,74,-4,76,101,51,28,65,80,-2,21,127,-39,-1,-72,-18,-58,-5,81,66,-31,85,-8,-33,-4,14,-12,-58,3,43,34,-18,-52,-71,7,33,79,-9,-9,52,-15,36,-25,96,55,124,-49,-71,-59,-45,-43,-59,29,-25,73,63,-7,-24,4,-5,-66,33,86,36,-81,62,19,29,51,104,-31,-47,-73,90,85,31,59,2,-58,-17,59,34,-74,112,-66,-78,65, 
  /* [4][0][][] */ 56,64,3,24,-14,-5,13,35,93,42,22,33,25,0,12,-31,23,0,15,9,114,-24,52,14,31,-8,42,-17,5,26,-44,14,44,67,1,-26,-5,-2,-42,46,-48,-60,-36,-48,19,49,24,59,-6,-30,15,12,-71,2,-71,17,53,-44,1,34,51,-64,-38,-67,-18,35,16,-3,39,-53,-29,-93,-28,11,65,-12,62,3,13,-9,14,-52,-100,-94,23,58,47,11,-69,-27,36,24,26,93,-127,-17, 
  /* [5][0][][] */ 113,-47,74,70,49,-68,32,63,58,-45,21,-26,40,74,57,48,67,69,-23,69,1,41,-17,4,-84,-18,9,-55,47,38,27,-46,-21,31,-44,35,-84,-13,52,45,-46,-45,38,90,-51,25,45,-23,-47,117,39,34,41,9,2,-9,97,54,-61,-1,53,-34,-20,-48,-2,90,5,42,73,6,63,-33,-13,80,3,-67,17,-62,-14,67,93,35,36,62,-32,-17,-54,46,58,-90,83,88,-2,36,127,-68, 
  /* [6][0][][] */ 35,-31,125,88,-66,-10,-10,57,-43,-96,-48,-60,94,79,116,-86,21,-33,-29,104,-127,-60,119,65,-53,-86,-6,-11,-12,-102,59,-74,-73,-70,-29,-86,22,41,-91,63,96,115,31,5,-115,104,-45,-21,-112,-55,-24,-53,68,-86,58,8,-6,5,-25,85,-112,54,86,-36,-36,95,92,-31,97,17,-94,-14,86,-69,-58,-31,-91,-77,-33,3,47,-45,43,5,-42,-85,-39,-82,90,118,115,30,-55,-64,19,-27, 
  /* [7][0][][] */ 108,31,-7,-6,-48,85,-17,6,41,9,-97,25,58,-50,40,50,34,-13,-11,99,4,41,-12,77,-62,86,5,40,-65,54,-17,26,38,39,65,89,-77,85,-21,-34,71,-56,75,59,52,-19,108,-97,1,-12,-81,-73,-14,38,-22,47,91,-65,-6,-49,-19,18,44,-84,-56,-44,52,26,-75,43,58,79,80,26,49,42,-78,24,-83,40,81,-11,2,-127,72,-1,-84,75,69,4,82,68,-35,-11,30,-42, 
  /* [8][0][][] */ 3,43,-47,-74,50,20,-45,-6,-17,45,54,102,9,-42,-89,-44,-30,106,-66,17,-21,-19,104,93,-102,80,52,69,-48,21,-93,113,65,-29,36,-10,108,-5,-21,102,62,60,-93,-79,1,-47,-21,103,70,-118,-46,29,-63,-23,-54,-76,32,113,-68,116,127,32,28,80,-15,-46,-20,84,-56,44,21,-20,68,45,24,-30,-17,107,64,57,24,67,-110,-78,42,-11,92,-20,5,-54,-85,77,-88,-103,-66,39, 
  /* [9][0][][] */ -40,-35,120,64,73,-125,-62,-86,40,61,-66,80,-11,-71,-127,-43,-20,-19,-106,-38,-39,97,-43,-81,111,-5,-3,38,-18,-49,-94,31,76,-17,47,-34,-34,37,6,-86,25,-70,65,-73,65,-30,-70,54,72,-93,-79,-64,87,-85,-94,117,35,-53,49,-38,-86,109,77,-55,-72,-10,83,18,-77,124,117,-63,26,86,-100,-124,-74,-77,-4,114,44,-10,125,-31,-42,-94,79,47,121,87,-23,115,76,-12,18,-30, 
  /* [10][0][][] */ -73,52,85,-31,10,103,112,58,-9,52,19,-6,91,54,-31,-12,-16,86,-79,-17,-63,40,62,-37,26,72,-122,-95,-21,43,-57,-48,92,91,127,64,-6,44,-20,44,-13,126,-86,-48,-116,-61,20,-74,35,5,47,-22,83,26,-80,-14,-81,8,58,-56,-28,73,116,67,105,-64,-73,-36,20,-2,-98,-24,92,103,-80,84,-53,88,11,8,76,-12,70,104,-106,60,99,-19,58,28,-17,-36,-41,-82,-12,-51, 
  /* [11][0][][] */ 33,23,6,68,88,57,39,26,38,53,-52,75,-4,-83,-28,-37,-39,-57,48,28,-48,11,24,-65,-26,-62,-18,60,58,-8,43,3,-56,-37,24,29,-26,39,-11,-30,4,93,-49,1,-48,-77,-45,-50,65,6,90,32,-38,-50,-27,3,-42,-31,16,-45,-52,61,75,19,36,83,-37,10,74,29,-127,-48,29,91,-68,20,-57,30,-32,48,-61,-16,-26,31,21,-17,6,-38,-32,51,-10,-62,-76,-37,-31,-34, 
  /* [12][0][][] */ 50,57,-31,10,69,32,-18,-10,-90,58,-30,5,-36,30,29,-64,-77,-24,-49,-53,24,-9,37,65,-33,-20,65,-72,80,16,-8,99,-47,-24,-12,14,0,-57,-33,30,127,55,-91,-35,29,-57,-21,83,-6,-71,-49,73,29,25,-57,83,15,-42,53,39,19,104,41,53,86,40,-50,87,66,78,37,75,69,67,-20,38,-33,39,-70,-90,-44,101,23,82,-27,98,91,63,-68,-108,86,32,66,-4,63,77, 
  /* [13][0][][] */ 89,6,68,70,57,94,68,61,40,-101,48,-45,62,75,62,-18,-99,-52,-28,19,101,-33,120,-47,-66,23,8,23,-65,-24,70,7,24,88,0,9,-74,-23,88,16,-20,91,-32,17,-1,72,-8,-19,22,106,-40,-127,-51,84,88,-53,-33,15,26,-71,-58,70,-4,23,-35,-14,-64,67,-14,-13,85,35,-66,51,-50,11,-81,2,124,-57,35,-51,91,42,-58,36,105,118,32,14,-31,31,97,-20,49,20, 
  /* [14][0][][] */ -50,-77,69,62,71,1,9,-66,-42,-9,38,85,-6,-56,-79,-71,-19,-26,-25,35,-40,34,3,60,-70,-34,-18,35,-58,-89,-46,37,93,-6,-7,17,84,94,18,-51,5,-62,31,67,45,-85,56,-40,127,69,60,56,82,17,-9,25,-21,31,27,72,-2,-46,2,74,-50,-10,73,-66,-65,-53,-65,78,14,75,42,-77,49,-52,15,34,42,-17,-88,-107,-75,-25,-79,81,77,-25,67,-28,74,75,-19,51, 
  /* [15][0][][] */ 15,-23,-16,57,83,-62,43,-79,44,24,-87,8,89,-1,-90,-93,42,10,-93,24,5,13,82,98,98,66,46,85,16,57,71,-92,14,9,-48,-13,-37,66,99,-37,26,80,-37,-7,25,-86,-15,-74,19,-119,16,16,-86,-103,-60,5,29,41,-8,83,-41,-35,1,85,-16,81,-78,-16,-53,12,53,-60,18,-46,48,-127,10,85,88,67,-66,51,-75,-36,-96,-52,-58,54,76,89,-97,-30,12,86,-76,85, 
  /* [16][0][][] */ -87,-3,89,-58,54,60,-59,9,51,57,-95,59,-19,-36,-59,-69,71,42,66,50,120,75,-61,42,-12,53,-66,48,-71,2,49,0,-78,54,33,65,-20,49,-75,-80,-55,-39,54,56,9,86,90,-14,-127,-111,37,88,-24,98,55,19,34,54,69,-3,86,89,-49,58,59,5,-43,64,25,60,-28,-10,19,78,40,72,-18,80,-112,-11,12,-90,57,28,-7,76,39,-22,88,42,-16,86,45,-36,-47,16, 
  /* [17][0][][] */ 24,-100,25,69,-12,-93,-29,-37,51,-22,74,60,92,46,-79,25,46,80,80,100,-53,16,35,-12,31,75,-34,28,89,-35,-20,49,4,-3,49,16,-5,91,-50,3,-67,-39,1,-32,-3,10,78,-57,119,88,-1,20,0,60,47,-32,-71,80,-35,-77,31,-81,61,83,-42,-74,44,-74,-86,13,93,46,27,-53,-46,14,90,-3,32,-22,21,-26,-32,-127,-78,57,76,-40,28,54,-63,-68,-4,62,17,15, 
  /* [18][0][][] */ -35,45,42,-25,-19,-66,-29,19,56,36,-16,-51,-25,69,67,-8,19,8,90,-8,127,-4,25,-55,24,-20,-4,54,27,31,-2,20,32,-7,-12,-58,-29,58,47,8,-16,7,-13,-7,-72,48,-15,-8,-4,47,4,3,-26,34,116,32,-3,15,2,-85,35,54,27,31,-49,-46,13,61,44,-41,14,100,-46,-7,-40,71,32,7,52,-41,-21,-2,5,40,39,29,87,8,-17,-32,5,53,105,-28,25,70, 
  /* [19][0][][] */ 34,6,79,45,67,-102,68,68,123,-8,-24,-7,-81,49,-72,37,56,-108,117,65,13,81,-56,23,97,-39,23,-58,-69,-125,-36,37,96,-66,43,16,24,-51,-70,-120,37,-125,-68,-5,-107,19,95,-91,-18,25,-17,24,-31,26,-32,-7,39,63,14,-55,52,-39,64,57,-54,-10,-38,-14,-28,58,95,-33,-52,-123,-70,-105,-19,-75,-5,105,58,-127,11,46,-83,4,16,-48,106,58,3,61,-38,111,83,-44, 
  /* [20][0][][] */ -19,58,53,95,-74,82,43,78,-5,-26,-27,36,12,69,19,-43,-13,0,-99,-7,-27,-29,-20,-43,50,-73,-76,49,11,5,-63,117,79,27,-3,38,48,-5,28,-56,-65,-28,-50,-55,-1,-64,-55,99,75,-108,-95,54,45,77,18,24,79,85,88,101,108,-43,-39,-25,-23,-52,-26,31,-58,-24,-47,56,-27,-39,44,35,96,70,112,96,81,17,51,-13,76,96,29,127,-3,59,23,68,14,5,-31,23, 
  /* [21][0][][] */ 83,83,71,-81,88,-56,55,26,32,-25,-55,44,21,35,-53,-51,-88,-22,0,-8,89,-27,59,-42,74,-60,4,72,21,27,12,-24,14,27,-70,-73,101,56,-87,0,-17,-16,32,13,-122,-72,-34,90,-11,-65,17,85,27,16,-111,24,-43,49,-15,117,70,-56,-33,-18,80,42,-28,-48,-72,-9,53,36,37,-6,74,-19,-61,-4,65,97,21,52,46,-111,39,-127,19,-56,-57,97,77,-70,-42,-36,37,-26, 
  /* [22][0][][] */ 30,-20,-31,-39,40,-34,55,57,-36,42,-25,-42,78,-57,-55,-36,25,35,-70,-22,56,-34,38,29,63,-5,-59,61,-44,-36,-49,-59,34,33,20,10,6,8,-2,-50,-3,-30,15,70,45,-82,66,-6,-47,-1,-4,1,-41,-75,-69,35,-17,-8,-12,7,78,-46,-59,-85,-39,11,-51,-18,59,82,1,8,-30,24,48,-78,36,-23,72,64,69,-45,-30,-127,60,41,63,29,-27,26,-30,47,15,23,-11,60, 
  /* [23][0][][] */ 50,-57,-2,43,69,-72,9,-83,48,-60,48,54,18,-58,-24,-41,73,-20,-102,81,61,-49,96,-21,-11,-1,51,30,72,16,50,-23,-10,45,29,27,85,-2,-107,3,-63,11,-3,-100,-46,-78,98,45,83,-38,-78,-31,45,-40,-75,81,-36,-14,76,39,-94,-86,-23,2,32,29,-89,-78,54,-13,92,-50,-3,-19,-37,-115,49,-5,65,85,-42,-68,14,-127,74,25,99,-55,-72,1,78,-19,76,-38,-53,56, 
  /* [24][0][][] */ -24,12,-34,-16,-22,-25,-6,-36,42,49,51,4,39,31,13,-31,-18,17,66,-19,91,-28,-24,-20,23,6,32,19,46,37,21,1,-3,11,23,33,-28,-12,24,-4,-13,-25,47,23,36,-2,5,32,-39,60,23,37,35,38,127,-33,7,34,0,12,62,21,35,47,-26,44,5,-7,-15,13,-11,20,-18,26,47,111,39,-36,-25,-26,-18,9,-3,12,5,29,1,-24,33,-20,19,-23,36,28,6,55, 
  /* [25][0][][] */ -70,-71,-56,8,92,-72,-71,48,61,-104,-42,40,74,18,-82,-18,-20,73,-1,-69,63,91,-17,-25,24,-41,-72,53,89,-93,18,127,99,-80,39,81,106,-47,-23,8,-123,89,-87,7,79,53,51,54,-52,54,-69,21,41,31,-30,27,19,58,-113,56,117,82,8,53,3,63,12,23,-74,0,-11,-117,55,-121,63,27,75,82,-10,47,56,6,-72,46,-50,15,-107,-67,-25,-51,107,26,-101,-30,-77,-65, 
  /* [26][0][][] */ 11,-83,-22,-5,-70,-29,5,24,-45,-127,117,86,-40,-20,22,4,94,48,31,-50,35,63,78,5,15,46,23,38,17,22,-70,-7,-19,-58,-64,-63,-39,95,20,66,-91,73,41,14,-90,64,-21,96,2,1,-3,79,20,-2,-6,-76,104,52,69,22,-3,-103,45,-2,88,-25,-20,47,-55,58,80,80,70,-55,-47,11,15,-96,-30,10,-14,29,91,-72,70,-22,6,20,-46,82,12,15,-25,110,8,59, 
  /* [27][0][][] */ -5,34,-27,-60,-58,-26,-30,-5,10,51,45,-44,0,54,46,0,61,0,8,-60,-93,22,0,-2,-71,30,-56,24,71,42,-20,25,49,62,-83,-32,-36,-31,-78,75,-44,37,21,29,41,14,77,112,68,5,78,-23,-58,-55,-68,-16,112,4,-50,-27,-40,-28,-12,40,63,-15,-77,94,65,3,-75,-21,69,-54,20,-82,45,-53,71,86,77,-3,78,-127,-21,-89,-14,35,-34,9,-10,-21,11,33,41,34, 
  /* [28][0][][] */ 123,-26,83,40,-97,-62,-109,7,19,-26,27,48,-28,-12,76,83,66,55,15,50,14,56,-63,-27,-127,55,-21,-39,-32,-19,-2,-18,-78,43,82,39,2,-36,33,46,12,-4,-25,40,-76,18,31,31,7,-36,-96,-58,-58,5,7,54,41,7,13,31,-31,-20,-80,-33,24,56,41,63,-8,47,-32,-23,70,13,27,-69,-82,-84,-7,60,-21,-67,73,-40,58,-48,-2,-51,-64,-28,32,-19,-54,62,-117,-85, 
  /* [29][0][][] */ 48,6,62,-25,-75,17,-119,11,68,-12,-107,-58,96,-68,-32,-41,-78,68,-4,-46,-101,-9,39,16,-24,-2,-35,-19,-86,-16,65,12,59,4,-61,-41,-8,80,1,81,35,71,-33,77,26,64,-30,-35,32,-68,23,-89,53,-76,83,63,-64,41,-50,76,-95,127,-90,-48,-64,-54,48,73,72,-47,36,-77,104,31,53,13,87,-34,-41,42,6,-53,-21,-48,59,108,45,87,-31,81,69,78,-87,16,-20,47, 
  /* [30][0][][] */ 21,20,-33,12,-38,21,27,-23,33,-4,55,-41,-51,76,68,21,5,29,127,-42,82,-31,-30,-12,-23,38,-31,41,12,-28,16,20,-37,-14,-31,-3,-22,-3,19,6,52,31,-5,56,82,33,10,16,-45,50,23,-39,57,89,109,40,11,-19,-27,-18,-23,34,33,39,-42,-29,-33,66,-18,26,39,20,-40,19,33,71,-3,-37,-29,-31,12,107,-23,78,-32,48,14,58,29,-37,50,18,13,-11,45,44, 
  /* [31][0][][] */ 90,-54,54,96,77,80,-42,-89,-64,23,-96,-84,94,-115,-58,98,-105,-93,27,56,13,7,-16,113,62,-68,34,42,-53,-46,83,71,24,46,-69,8,94,-25,-55,-105,85,-33,-12,28,8,-68,7,17,67,66,127,-40,-80,-74,-116,22,-103,50,52,97,-81,-6,93,-47,94,120,-64,-90,73,-93,-113,32,-82,20,2,-42,-58,-24,23,68,-58,-10,102,52,47,69,-100,3,52,6,-82,-41,14,96,44,-22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0031709517352283001, 0.0025810566730797291, 0.0029620788991451263, 0.0028858841396868229, 0.0034354568924754858, 0.0025783958844840527, 0.0021369452588260174, 0.0025258541572839022, 0.002358447527512908, 0.00198372732847929, 0.002293039346113801, 0.0029492012690752745, 0.0024766370188444853, 0.0026157000102102757, 0.0026256127748638391, 0.0022789526265114546, 0.002215344225987792, 0.0027641074266284704, 0.0040194205939769745, 0.0020039475057274103, 0.0023992329370230436, 0.0024402162525802851, 0.0033563890028744936, 0.002584405243396759, 0.0053874882869422436, 0.0022797458805143833, 0.0026493952609598637, 0.0025739071425050497, 0.0031993566080927849, 0.0022976438049226999, 0.0047286171466112137, 0.00212849210947752, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 556, -35, 1597, 3230, 1706, -986, 1343, -676, -1241, -263, 2893, -1373, 1558, 3002, 1317, 1402, -353, -108, -317, 2511, 1881, -395, 840, -476, -549, 1122, 664, 892, 2539, 1222, 2141, 846, 655, 1787, 2236, 1788, -680, 1396, 1525, -1946, 4, 660, 16, 1142, -212, 687, -648, 370, -2997, 1655, 589, -1593, 3448, 8, 1427, 587, 635, 1116, -356, -1304, 150, 985, 325, 2072, 3113, 1430, 1666, 3064, 1978, -616, 1428, 3564, 1261, -542, 2444, 4670, 383, -2149, 186, 303, 3729, 764, -129, -429, 483, 940, 697, -778, 1672, -316, 2145, 584, 171, -1371, 89, 780, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00035353412386029959, 0.00049578171456232667, 0.00035164013388566673, 0.00023297044390346855, 0.00032156251836568117, 0.00038994205533526838, 0.00039149256190285087, 0.00036703911609947681, 0.00031223331461660564, 0.00062471145065501332, 0.0002810084552038461, 0.0003668175486382097, 0.00032982934499159455, 0.00026365008670836687, 0.00037047202931717038, 0.00029223266756162047, 0.00044543732656165957, 0.00042012668563984334, 0.00044940545922145247, 0.00021956725686322898, 0.00040566525422036648, 0.00039410463068634272, 0.00030017533572390676, 0.00042209666571579874, 0.00048966926988214254, 0.00048997864359989762, 0.000323371437843889, 0.00038623737054876983, 0.00030677785980515182, 0.00031666341237723827, 0.00028812591335736215, 0.00040397752309218049, 0.00041576210060156882, 0.00032193050719797611, 0.0002642229082994163, 0.00029666622867807746, 0.00030441803392022848, 0.00031998913618735969, 0.00032522965921089053, 0.00024098191352095455, 0.00043150354758836329, 0.00032903041574172676, 0.00031089704134501517, 0.00030570186208933592, 0.00044798082672059536, 0.00028768560150638223, 0.00034813670208677649, 0.00030554787372238934, 0.0002280171902384609, 0.00036390434252098203, 0.00042297926847822964, 0.00028533313889056444, 0.00023814334417693317, 0.00028094882145524025, 0.00047228735638782382, 0.00044610467739403248, 0.00032199342967942357, 0.00030131713720038533, 0.00047228933544829488, 0.00028814960387535393, 0.00039786752313375473, 0.00036086401087231934, 0.00051823665853589773, 0.00035058290814049542, 0.00019263396097812802, 0.00029335144790820777, 0.00023808726109564304, 0.00025974435266107321, 0.00032014798489399254, 0.00034626110573299229, 0.00035836081951856613, 0.00022690482728648931, 0.00029744300991296768, 0.00038617171230725944, 0.0002967403270304203, 0.00022307323524728417, 0.00031066578230820596, 0.00029160882695578039, 0.00045206377399154007, 0.00037853702087886631, 0.00023086357396095991, 0.00038639726699329913, 0.00041292436071671546, 0.0004790738457813859, 0.00036534719401970506, 0.00032727885991334915, 0.00049773667706176639, 0.00035862487857230008, 0.0003784548316616565, 0.00043728697346523404, 0.00030431378399953246, 0.00033613693085499108, 0.00035402399953454733, 0.00029705028282478452, 0.0004246437456458807, 0.00038521777605637908, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,85,-99,42,51,-33,106,80,-69,20,43,-99,103,127,-96,45, 
  /* [1][0][][] */ -21,3,-54,-7,-20,53,25,-127,33,-43,-43,-66,-18,-36,-62,2, 
  /* [2][0][][] */ -31,-39,50,84,12,39,-118,127,-25,22,71,-90,-8,-79,-47,88, 
  /* [3][0][][] */ 95,-118,101,-17,-19,-51,-29,127,-25,84,77,48,17,65,12,14, 
  /* [4][0][][] */ -51,-29,9,60,-86,35,-1,-127,22,7,19,-22,52,36,79,99, 
  /* [5][0][][] */ 127,24,-9,-19,-86,9,35,78,13,-20,43,87,122,31,-71,-12, 
  /* [6][0][][] */ 23,-33,-45,-38,-75,-9,11,-53,-43,-37,-26,17,60,37,127,-10, 
  /* [7][0][][] */ -44,28,-33,-78,19,-48,-61,18,-96,37,-53,-50,-127,-30,13,80, 
  /* [8][0][][] */ 56,46,80,17,58,37,76,-3,75,-19,33,18,-127,-34,-81,3, 
  /* [9][0][][] */ -31,65,28,-50,-18,-23,37,-13,-23,39,-33,14,33,127,15,18, 
  /* [10][0][][] */ 71,46,-30,76,-27,-16,36,-88,-96,-4,-68,-87,-127,-54,44,107, 
  /* [11][0][][] */ 58,-2,65,-12,-19,-36,19,90,-113,29,-35,19,0,-19,60,127, 
  /* [12][0][][] */ -56,-45,14,4,14,-14,127,46,-59,49,13,-13,5,61,-41,121, 
  /* [13][0][][] */ 43,63,9,37,112,50,99,65,-69,48,-127,-68,27,72,-100,-25, 
  /* [14][0][][] */ -98,127,0,-16,11,18,54,3,-26,4,82,-4,-101,23,-50,27, 
  /* [15][0][][] */ -5,-7,-127,-55,89,-59,-93,-50,-17,-26,-20,-79,-8,-75,-58,39, 
  /* [16][0][][] */ 107,-14,17,-16,42,-45,51,-33,-33,24,127,51,20,11,-36,13, 
  /* [17][0][][] */ -6,4,-22,-99,-7,-64,127,-108,-44,-2,-38,59,25,84,21,73, 
  /* [18][0][][] */ 12,119,-25,-40,56,-62,-23,-79,-15,127,-28,9,-29,26,-19,-27, 
  /* [19][0][][] */ -79,-127,126,-83,21,-112,44,-44,54,77,96,80,42,0,70,-17, 
  /* [20][0][][] */ -26,80,64,20,12,23,34,-54,66,17,79,-12,-127,-44,-70,-3, 
  /* [21][0][][] */ -68,38,39,9,49,39,48,31,-127,65,-38,21,-7,34,-29,-22, 
  /* [22][0][][] */ 10,-127,45,8,19,-121,123,-17,5,-38,-49,-76,77,-101,-79,-35, 
  /* [23][0][][] */ -60,-98,28,53,13,-7,21,-30,17,-32,74,-14,26,67,61,127, 
  /* [24][0][][] */ -10,-6,30,83,28,10,-50,-127,74,29,-31,16,-9,6,-14,-28, 
  /* [25][0][][] */ -11,32,27,-81,-22,-16,44,-33,-54,52,-44,19,30,127,20,1, 
  /* [26][0][][] */ -62,89,-2,15,25,-81,-1,-35,15,17,1,74,14,-2,-95,127, 
  /* [27][0][][] */ -20,-127,-39,11,-61,81,7,-67,20,-34,37,-22,40,-55,-100,-26, 
  /* [28][0][][] */ -27,0,23,84,21,16,-22,-127,-97,43,74,-10,74,0,-56,-16, 
  /* [29][0][][] */ -124,99,-34,-11,-24,31,-110,-85,-32,-26,-7,1,-14,-70,-127,66, 
  /* [30][0][][] */ 33,64,-39,104,-90,-68,-88,-11,-24,5,9,-96,127,17,-10,93, 
  /* [31][0][][] */ 127,7,-45,-29,-64,18,108,11,-94,10,74,95,44,9,-11,33, 
  /* [32][0][][] */ -37,-41,127,1,-34,58,80,22,-19,0,2,35,14,53,69,57, 
  /* [33][0][][] */ 7,18,-74,-32,-44,25,123,27,-5,-9,10,-94,93,127,-39,52, 
  /* [34][0][][] */ -77,-8,123,11,33,-65,101,-33,-127,52,51,-66,60,85,-27,-62, 
  /* [35][0][][] */ -16,5,-42,22,-84,97,-35,2,-11,127,18,58,-55,74,38,27, 
  /* [36][0][][] */ 4,-80,127,-48,-54,24,-37,-32,24,32,-39,100,27,-99,-34,42, 
  /* [37][0][][] */ 57,-26,79,-18,81,-67,-20,25,-64,127,-67,18,-58,-45,70,-1, 
  /* [38][0][][] */ 39,53,20,-118,-2,-76,-127,68,-87,29,-93,-55,-93,-93,-98,49, 
  /* [39][0][][] */ -89,13,-54,-20,-67,-77,87,7,-127,-20,28,76,35,-3,-20,63, 
  /* [40][0][][] */ 127,26,12,-60,-101,40,33,-79,-22,5,-49,-93,42,21,14,65, 
  /* [41][0][][] */ 85,-81,-40,-44,-17,-4,-55,-32,49,-13,-3,-48,127,-71,53,-32, 
  /* [42][0][][] */ -20,-79,-46,127,-2,-86,-108,28,11,23,5,43,-95,78,-56,2, 
  /* [43][0][][] */ -104,-49,-58,-121,-57,17,-11,101,51,-127,-29,19,-22,-43,-24,107, 
  /* [44][0][][] */ -47,21,5,-23,-25,-30,32,85,91,-58,87,127,90,16,17,26, 
  /* [45][0][][] */ 30,65,-69,75,127,-85,-33,-81,89,-60,74,-37,-34,5,-57,60, 
  /* [46][0][][] */ -25,-43,15,0,84,-13,31,18,-1,127,-22,-106,26,60,-34,60, 
  /* [47][0][][] */ 102,-46,-48,-20,81,-14,-25,-63,-27,127,-45,58,-16,-121,-103,12, 
  /* [48][0][][] */ -16,5,8,-106,-35,-84,127,-118,-17,20,-57,37,87,64,-8,48, 
  /* [49][0][][] */ -63,61,-55,70,8,-52,95,70,-44,66,40,-83,-32,74,127,-28, 
  /* [50][0][][] */ 1,35,-11,15,-127,1,-70,-63,54,70,22,25,-26,-36,12,33, 
  /* [51][0][][] */ 127,-65,-54,10,-60,99,-74,-50,39,-3,-31,97,-42,-108,-17,61, 
  /* [52][0][][] */ -17,-47,47,46,-43,-91,-127,-8,-75,-46,-26,-61,45,-41,63,69, 
  /* [53][0][][] */ 18,116,55,-117,24,127,105,-30,-14,-39,-7,-20,49,-123,10,65, 
  /* [54][0][][] */ 10,105,-6,12,-2,-66,-96,48,26,-10,-49,127,79,79,10,87, 
  /* [55][0][][] */ -54,-36,46,39,49,-20,104,117,-68,5,27,12,127,44,-31,10, 
  /* [56][0][][] */ 127,5,0,30,-52,112,-49,-73,-34,77,-84,10,-73,92,-10,63, 
  /* [57][0][][] */ -47,-45,-33,-22,-79,-78,52,-25,-127,-19,31,56,17,38,2,57, 
  /* [58][0][][] */ 50,-55,61,29,-2,-70,-28,10,32,-4,-127,-38,28,-36,-40,40, 
  /* [59][0][][] */ 51,-7,-123,94,-2,37,74,-12,-92,-37,43,-80,-96,-83,11,127, 
  /* [60][0][][] */ -1,20,-11,30,-22,-4,-16,-9,-38,-60,50,127,-45,-124,-29,2, 
  /* [61][0][][] */ -49,7,113,-68,-98,67,-4,121,-2,-86,48,58,103,13,10,127, 
  /* [62][0][][] */ 65,28,16,-127,-31,-12,20,-40,-13,47,-40,32,36,-15,-72,-71, 
  /* [63][0][][] */ -5,-26,11,1,-58,-44,-35,-14,-76,1,-42,3,127,-11,24,3, 
  /* [64][0][][] */ 40,10,-21,51,-114,-40,-36,-98,32,125,27,-21,35,-63,-34,127, 
  /* [65][0][][] */ -46,-2,-32,-8,-99,97,16,-24,61,-109,127,-94,100,69,-119,78, 
  /* [66][0][][] */ -127,80,-85,-94,27,-43,-119,-44,-107,96,116,45,-91,-55,40,58, 
  /* [67][0][][] */ 5,-29,-127,-116,69,72,13,-29,-22,-5,27,-20,29,23,3,53, 
  /* [68][0][][] */ 68,35,-16,-32,-76,55,9,43,-49,64,114,-43,7,-36,-127,-11, 
  /* [69][0][][] */ 57,-93,51,-50,19,-104,-26,127,9,56,45,60,-32,57,-31,-3, 
  /* [70][0][][] */ 46,-9,124,40,84,-41,127,2,26,38,-93,30,-47,82,-76,48, 
  /* [71][0][][] */ 19,37,116,-84,-126,-105,38,11,-33,-17,21,-127,-106,15,29,12, 
  /* [72][0][][] */ -57,-96,26,-127,72,-7,12,59,-83,14,-114,-35,67,105,-59,121, 
  /* [73][0][][] */ 9,17,50,18,99,-90,-51,21,-3,102,-44,11,-91,-55,127,-25, 
  /* [74][0][][] */ -94,-7,-127,-42,52,-23,-22,33,-66,0,-96,-5,-12,-65,-51,85, 
  /* [75][0][][] */ 64,-37,52,-28,10,-11,-127,-25,7,-79,53,-4,15,6,3,-4, 
  /* [76][0][][] */ 11,-41,-20,79,33,70,85,-67,52,-93,54,127,35,-67,-24,25, 
  /* [77][0][][] */ -40,-40,127,-32,21,-45,-28,-117,0,7,44,91,58,36,33,4, 
  /* [78][0][][] */ -41,-18,15,-15,-5,-39,50,-29,14,2,-7,-42,-39,-68,-127,-20, 
  /* [79][0][][] */ -127,-116,-35,26,118,17,-30,21,7,64,-7,36,-39,-92,-38,11, 
  /* [80][0][][] */ 15,-127,24,72,-18,-7,-58,92,-43,41,55,12,-68,-16,-1,84, 
  /* [81][0][][] */ 126,44,-13,75,-21,7,16,116,28,1,104,61,127,5,86,-36, 
  /* [82][0][][] */ -54,-10,8,-18,33,-127,-97,-82,22,93,-55,-39,-25,62,-98,9, 
  /* [83][0][][] */ 43,-31,100,0,-30,-26,-127,-16,33,-74,14,-45,10,3,20,5, 
  /* [84][0][][] */ 26,-67,-98,25,127,24,31,53,-107,16,-96,-25,9,-39,-91,8, 
  /* [85][0][][] */ 2,66,42,-38,69,-17,44,-103,127,-30,41,15,93,-97,39,-2, 
  /* [86][0][][] */ 99,-46,127,40,19,-70,83,39,-58,-40,-64,-50,27,31,-46,8, 
  /* [87][0][][] */ -18,4,26,-105,84,-41,-52,62,24,-51,86,-81,-124,-127,3,18, 
  /* [88][0][][] */ -70,-39,50,-2,7,18,-76,-41,-3,21,-62,-127,-37,-28,-2,-10, 
  /* [89][0][][] */ -89,-6,34,-61,21,2,-127,12,82,34,-74,0,4,-87,-60,-3, 
  /* [90][0][][] */ -14,-27,-38,-79,127,39,-59,33,34,76,42,-2,57,18,-60,-4, 
  /* [91][0][][] */ -36,-60,31,30,-16,3,-4,127,-60,-85,40,-21,-41,81,34,126, 
  /* [92][0][][] */ -15,85,9,-4,-24,60,-97,41,-34,-10,57,-16,-34,127,74,14, 
  /* [93][0][][] */ -20,55,-40,-43,54,75,-70,15,67,86,76,52,-127,23,-48,79, 
  /* [94][0][][] */ 23,66,98,15,-127,-36,-3,-1,53,-5,39,-54,-61,-16,22,-19, 
  /* [95][0][][] */ 1,25,30,2,127,-7,-54,88,8,9,-87,88,-23,18,82,-50, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0029693301767110825, 0.004164066631346941, 0.0029534224886447191, 0.0019567168783396482, 0.0027008010074496269, 0.0032751201651990414, 0.0032881428487598896, 0.0030827585142105818, 0.0026224451139569283, 0.0052469461224973202, 0.002360187703743577, 0.0030808974988758564, 0.0027702338993549347, 0.0022143949754536152, 0.003111591562628746, 0.0024544596672058105, 0.0037412245292216539, 0.0035286406055092812, 0.0037745528388768435, 0.0018441436113789678, 0.003407179145142436, 0.0033100815489888191, 0.0025211700703948736, 0.0035451864823698997, 0.0041127284057438374, 0.0041153267957270145, 0.0027159941382706165, 0.0032440044451504946, 0.0025766247417777777, 0.0026596533134579659, 0.0024199672043323517, 0.0033930039498955011, 0.0034919825848191977, 0.0027038916014134884, 0.0022192059550434351, 0.0024916972033679485, 0.0025568045675754547, 0.0026875862386077642, 0.0027316012419760227, 0.0020240051671862602, 0.0036241947673261166, 0.0027635237202048302, 0.0026112217456102371, 0.0025675874203443527, 0.0037625872064381838, 0.0024162689223885536, 0.0029239973518997431, 0.0025662940461188555, 0.0019151144661009312, 0.0030564295593649149, 0.0035525993444025517, 0.0023965106811374426, 0.0020001640077680349, 0.0023596868850290775, 0.0039667375385761261, 0.0037468294613063335, 0.0027044201269745827, 0.0025307601317763329, 0.0039667543023824692, 0.0024201662745326757, 0.0033416859805583954, 0.0030308938585221767, 0.0043526655063033104, 0.0029445430263876915, 0.0016179310623556376, 0.0024638564791530371, 0.0019996929913759232, 0.0021815907675772905, 0.0026889203581959009, 0.0029082442633807659, 0.003009869484230876, 0.0019057717872783542, 0.0024982213508337736, 0.0032434531021863222, 0.0024923195596784353, 0.0018735902849584818, 0.0026092794723808765, 0.0024492200464010239, 0.0037968799006193876, 0.0031793294474482536, 0.0019390212837606668, 0.0032453474123030901, 0.003468148410320282, 0.0040237372741103172, 0.0030685481615364552, 0.0027488125488162041, 0.0041804863139986992, 0.0030120874289423227, 0.0031786391045898199, 0.0036727697588503361, 0.0025559288915246725, 0.0028232112526893616, 0.0029734447598457336, 0.0024949228391051292, 0.0035665794275701046, 0.0032354409340769053, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 3458, 6002, 6, 4515, 2611, 5431, 474, 3134, 12146, -2411, -9227, 4116, -10882, 12021, 3345, 10883, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.8639310484286398e-05, 0.00011095679656136781, 7.1705537266097963e-05, 7.5481162639334798e-05, 9.2605412646662444e-05, 9.8818760307040066e-05, 6.5970438299700618e-05, 8.5277053585741669e-05, 0.00013031906564719975, 0.00010504826786927879, 5.656261055264622e-05, 9.1804038675036281e-05, 0.00012354174396023154, 7.7328309998847544e-05, 0.00013085750106256455, 9.5844457973726094e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -89,49,63,16,-51,-22,-55,14,-30,-1,4,-26,17,32,28,-35,30,13,78,13,6,-45,127,60,41,27,26,23,-29,-113,-57,-1,-16,-33,25,17,16,50,-6,50,2,19,-89,-2,-47,-21,2,78,-31,-10,-54,-14,29,8,16,-50,-80,-3,-20,85,66,33,10,4,-29,-62,-29,18,-50,-55,43,-21,-12,2,-71,-46,-32,12,-15,0,-49,49,77,-66,-4,57,12,53,23,-13,3,-32,-33,-8,-44,6, 
  /* [1][0][][] */ 28,54,30,-14,-62,-29,-37,16,4,-8,79,-62,-2,-24,-92,-34,36,11,-46,41,-18,-77,21,65,-10,-68,9,-40,84,-105,127,-72,76,42,4,75,51,64,-22,-34,35,37,-15,-7,19,61,-114,-37,-80,-43,-17,-1,64,-44,-46,34,28,0,-26,22,12,56,12,-88,-23,-4,-55,-3,10,-7,-59,-37,-55,-34,10,-68,23,38,36,-89,-23,-27,-65,-41,24,-26,-24,12,-45,-19,-53,45,30,86,-38,66, 
  /* [2][0][][] */ 77,-31,12,7,17,-84,68,20,-2,-1,-49,-3,-80,-31,9,-55,-100,-30,-38,53,22,-38,-39,-7,-11,-53,-7,-13,-42,34,-86,127,-65,99,-34,-23,-42,4,-18,-20,-79,80,87,5,-98,-8,-15,-10,52,19,-14,-40,57,-15,-36,65,34,-12,43,4,10,28,-62,18,83,20,-18,-2,-8,63,-31,18,54,47,77,29,11,-71,76,48,84,-13,-34,37,-56,40,15,53,8,26,-12,-2,-52,47,-10,22, 
  /* [3][0][][] */ 4,21,-24,15,34,-16,-12,-51,-55,48,25,57,24,2,-45,42,-5,-35,37,21,15,127,22,-58,13,3,-35,4,71,-33,61,-11,-9,31,-31,-40,4,49,39,11,-84,-51,-23,9,-15,38,22,9,-24,-45,-4,-26,22,-91,-32,-54,8,80,-43,9,1,-20,-46,5,24,45,-34,24,-35,-1,4,-64,-20,-54,27,-29,20,-17,-38,-28,-19,-22,-50,11,-2,-48,23,-18,-9,12,33,-41,43,6,-46,46, 
  /* [4][0][][] */ 45,-10,-24,13,22,31,-26,-6,-40,64,64,-13,-6,-3,17,-43,16,-12,-18,31,6,-38,52,53,-54,-1,-127,25,-38,-64,-3,8,-63,-51,22,74,0,25,9,-12,-31,-42,38,-34,-27,0,-31,48,-26,57,10,14,22,-5,-63,13,43,-7,19,-16,30,-18,44,14,-51,11,-23,-4,-29,18,-50,56,29,-55,-21,-46,25,-36,-25,15,-35,74,-60,10,-25,2,19,-35,35,15,12,18,-47,-42,32,34, 
  /* [5][0][][] */ -109,38,53,-27,45,-19,56,-20,-20,31,-11,-40,27,-15,-2,-42,8,-13,51,23,-127,-13,-62,18,-32,-15,46,5,40,-90,-17,45,36,109,-13,7,9,37,42,-4,-36,74,60,-33,12,59,51,-11,9,6,-36,24,-4,-49,33,-78,33,-43,-46,-66,60,90,-39,-20,75,-41,-76,-50,-42,-14,-78,-31,-11,19,-35,-44,45,-39,-41,1,101,2,38,-79,-85,36,46,-19,-39,50,28,21,-17,9,-3,82, 
  /* [6][0][][] */ 28,-25,-84,-10,-49,-107,127,106,-87,67,-13,61,-115,-69,92,48,-15,-66,-1,-22,-8,-39,-55,-84,-9,55,64,36,42,15,108,-67,33,-16,5,-105,24,20,-14,94,0,9,-58,-44,-14,-60,-76,44,89,-89,-22,50,-31,47,-12,-66,60,36,9,23,-81,35,-121,-7,27,18,-6,55,36,16,-11,-47,-42,22,107,42,56,-57,53,-69,-26,-52,-91,62,21,-42,38,-20,-65,79,63,30,-33,-11,-32,120, 
  /* [7][0][][] */ 60,54,-38,-79,-9,9,41,-14,-87,6,-6,-70,-36,15,9,-19,-16,-37,-21,49,-4,102,9,56,-10,19,16,65,43,41,42,-36,89,32,-17,31,-13,-37,14,12,-53,-11,-1,-77,7,-63,59,-6,37,-60,-77,-37,-77,31,0,6,5,25,-88,-15,-6,85,67,-3,-9,-11,-64,18,8,-24,-127,50,20,101,-31,59,-80,76,-3,-92,-21,-56,60,-65,61,-53,-34,3,3,40,-77,49,49,-46,-41,36, 
  /* [8][0][][] */ 8,81,-62,31,-27,-15,-101,26,-62,-32,20,5,-45,19,30,81,25,-34,7,39,37,6,9,6,-60,68,7,20,-9,-11,-26,-27,-37,-40,-15,-60,-53,44,37,9,3,-32,28,8,-30,-42,7,1,-48,-30,55,101,18,-43,-70,95,-5,28,3,-31,-58,14,-1,59,-25,-43,-35,-19,-55,17,20,2,-14,-43,-127,-26,-39,50,-62,-47,-29,15,-27,-40,-11,-16,34,38,16,19,-75,-7,-69,-108,15,-59, 
  /* [9][0][][] */ -4,-3,-60,52,-25,-32,82,66,-12,47,-55,108,-32,-5,44,103,21,33,46,-3,10,13,44,-114,-30,-9,21,0,-3,-35,20,49,-59,-7,0,-127,13,-17,-8,-52,-16,5,48,-32,-49,-11,11,0,44,76,31,-2,-43,-60,10,-25,-14,-15,73,8,-49,47,-56,-20,61,0,-5,-11,-67,25,35,53,-5,76,-8,-9,-19,31,-53,-1,61,-20,60,15,21,15,-23,-20,-56,34,-10,-32,29,23,-44,-12, 
  /* [10][0][][] */ 43,28,-31,-29,-5,-25,54,20,17,-41,-17,-12,-87,-7,6,-5,-81,-12,23,20,48,31,4,0,-46,70,23,-13,-32,-73,-30,0,83,-36,32,16,57,-70,93,127,19,-61,19,1,9,-64,-9,30,34,86,-61,-51,-17,14,4,47,20,-51,70,52,-21,50,-54,-16,3,-56,6,59,10,-26,-32,38,119,23,0,-66,16,-53,46,-14,-45,21,50,35,-22,4,29,25,-30,-11,33,56,42,47,-41,13, 
  /* [11][0][][] */ -67,-37,63,-77,12,-6,-46,-24,73,-40,28,0,6,-19,18,-6,-61,0,53,5,-61,31,-69,-120,38,10,-43,65,43,-83,60,-40,32,-1,14,-10,-67,46,-116,30,-77,89,-44,58,19,-5,25,-75,43,-37,-95,-42,-10,36,100,-69,17,-75,27,-66,-33,-39,-16,-127,12,-71,55,99,109,33,56,-45,-37,-23,55,-55,126,26,35,60,-8,22,-30,93,84,19,5,-42,-96,-27,9,42,64,30,36,65, 
  /* [12][0][][] */ 29,-43,-15,-68,20,95,-6,11,48,33,-7,52,13,45,34,-16,-52,41,6,31,127,-2,54,-104,33,39,-58,-80,-19,70,-24,-6,19,-15,0,-64,32,-12,-26,10,23,-2,32,67,-29,23,5,-18,-47,15,1,20,2,-45,6,32,-31,45,28,54,38,-80,-27,-98,19,99,-27,-53,-15,-43,70,-13,-11,10,-7,79,-21,56,-51,-8,-27,52,113,13,-4,67,-32,-65,47,22,-68,63,75,14,-22,-115, 
  /* [13][0][][] */ -17,34,-35,-41,-27,-18,23,-63,-2,-47,1,-62,50,-89,-56,-67,-5,-26,-92,-15,-127,-38,30,97,-48,11,98,14,33,-52,51,47,6,-24,-93,102,-50,-91,38,-84,121,2,-2,37,-31,-78,47,-19,76,14,-50,11,19,-1,-19,80,55,-41,-56,43,72,28,23,-85,-12,26,-48,-6,-61,-32,-78,-2,-70,22,-33,-48,-114,44,20,76,-19,46,32,-104,79,20,15,-21,-37,43,-8,0,-51,1,-25,8, 
  /* [14][0][][] */ -17,43,-58,-6,97,60,-92,-22,38,-76,52,-11,-16,-19,-63,-71,-54,49,26,127,23,-33,-6,15,-9,39,-11,65,18,-16,-25,13,96,-6,-39,-23,-12,42,50,13,66,3,20,18,0,-65,57,-68,30,-26,-46,-32,69,38,-24,20,41,46,-91,17,-10,-60,-27,-102,22,-61,-45,20,-71,59,-11,46,-16,-28,-9,-26,37,-13,-31,-42,24,-24,-14,-12,-7,69,-15,-12,-35,71,71,-16,-7,-34,-59,-67, 
  /* [15][0][][] */ -87,-67,61,-85,13,-6,-17,-81,-4,32,-28,88,13,-43,27,107,-126,-31,33,-80,28,-23,-4,-72,75,1,42,-41,-84,-94,-60,45,-65,52,64,-100,-9,-55,-5,-34,-22,-8,37,-1,-19,-21,73,80,-18,-23,32,-57,-58,64,21,-62,-114,-7,127,9,-42,13,-91,45,-57,2,16,34,59,-67,70,-15,46,-23,-18,-30,18,1,36,21,-10,72,51,53,-19,-10,-123,6,-8,-33,-98,65,40,-56,-9,83, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.002917170524597168, 0.0047156638465821743, 0.0030474853701889515, 0.0032079492229968309, 0.0039357300847768784, 0.0041997972875833511, 0.0028037435840815306, 0.0036242748610675335, 0.0055385599844157696, 0.0044645513407886028, 0.0024039109703153372, 0.0039016716182231903, 0.0052505237981677055, 0.0032864531967788935, 0.0055614435113966465, 0.0040733893401920795, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1443, -3861, -1258, -1439, 1411, -1890, 598, -3167, -1948, -9391, 3167, -1345, 240, 8316, 5984, -2371, 16719, 3866, -8238, 663, -1573, 3011, -8741, 309, 280, -3655, -4155, -2635, -568, -4164, -1430, -301, 7346, -223, -1423, -225, 7, -1468, -1130, 4318, 1432, -3491, 1648, -5539, 4977, 4085, 469, 11101, 2, 9444, 9396, -3369, 66, 382, 447, 8047, -1366, -1672, 6923, 3350, 3281, 11663, -677, -4012, 4212, 2116, -2761, 2587, -3005, -653, 4700, -128, 11765, -250, -658, 8909, -877, -8, 7109, 1536, 2177, 17948, 769, 1808, 12047, 801, -4727, -1863, -5042, -4815, 15243, 109, 3359, 1615, -7466, -2984, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00030461873393505812, 0.00016133007011376321, 0.00015637051546946168, 0.00037623351090587676, 0.00027750764274969697, 0.00030438948306255043, 0.00035240480792708695, 0.00025459166499786079, 0.00022709490440320224, 0.00016358830907847732, 0.00014954157813917845, 0.00039953089435584843, 0.00023598338884767145, 0.00011464222916401923, 0.000284407171420753, 0.00020387560653034598, 0.00014268007362261415, 0.00028404875774867833, 9.0768662630580366e-05, 0.0001396939333062619, 0.00026002168306149542, 0.00046250474406406283, 0.00024569829110987484, 0.00033068124321289361, 0.00069986958988010883, 0.00022195518249645829, 0.00034520702320151031, 0.00014338492474053055, 0.0002058313402812928, 0.00013336051779333502, 0.00040926539804786444, 0.00016533611051272601, 0.00025009829550981522, 0.00017809131531976163, 0.00025876413565129042, 0.00033589170197956264, 0.00024018911062739789, 0.0002965741150546819, 0.00040112549322657287, 0.00024418294196948409, 0.00021059090795461088, 0.00016091630095615983, 0.00031397631391882896, 0.00019313121447339654, 0.00015134814020711929, 0.00019830220844596624, 0.00020602357108145952, 0.00013578204379882663, 0.00027270652935840189, 7.0281785156112164e-05, 0.00016393314581364393, 0.00013064361701253802, 0.00021738537179771811, 0.00014083142741583288, 0.00023155716189648956, 0.00018199688929598778, 0.00015857233665883541, 0.0001695935643510893, 0.00028360038413666189, 0.00016954746388364583, 0.00024822921841405332, 0.00011670655658235773, 0.00027748601860366762, 0.00010767975618364289, 0.00018351271864958107, 0.00027681552455760539, 0.00016811309615150094, 0.00018414077931083739, 0.00018851796630769968, 0.00025231463951058686, 0.00027213056455366313, 0.00018410863413009793, 0.00010290404316037893, 0.00027532226522453129, 0.00028216783539392054, 0.00011051900219172239, 0.00020070676691830158, 0.00021225298405624926, 0.00015567427908536047, 0.00020680978195741773, 0.00029160451958887279, 0.00012179809709778056, 0.00033000510302372277, 0.00029083204572089016, 9.6857627795543522e-05, 0.00021619330800604075, 0.00017150853818748146, 0.00018277661001775414, 0.00027221129857935011, 0.00016478214820381254, 7.6499716669786721e-05, 0.0012439257698133588, 0.00020535748626571149, 0.00016381844761781394, 8.7452935986220837e-05, 0.00035996423684991896, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 48,97,26,-17,-34,14,44,27,88,-48,-47,50,-27,-24,18,-64,-96,4,26,35,26,30,127,96,1,-51,-43,-12,-34,4,27,-28,-42,-5,-35,41,30,12,10,-39,6,-20,-7,6,-127,21,16,-32,7,-57,-20,25,18,60,-15,-4,-96,-50,-18,-110,-127,-7,-10,-27,-42,11,46,-18,-46,28,16,15,-60,-5,35,-17,1,-52,-61,23,-10,-30,25,-50,-114,-55,-33,9,-106,-29,-82,35,70,-18,51,-1, -38,-19,-41,62,-16,107,-47,5,82,51,-127,37,-54,-52,-127,127,-127,43,101,127,83,-27,114,90,28,0,26,72,19,102,11,-127,127,68,10,33,44,127,-13,-85,127,1,87,127,-5,-43,127,-59,-7,-105,-45,-11,-36,127,-36,-127,6,38,-43,-48,37,-127,33,79,-41,57,104,-22,17,127,127,-22,-91,39,-46,-74,27,-76,7,127,-25,-105,127,-57,-127,-38,52,31,98,54,-59,-1,114,-49,127,32, 28,-99,-39,-8,-38,9,-14,42,44,60,-81,-47,4,61,4,-31,4,1,24,33,9,15,56,91,13,-48,11,-6,28,-22,22,-86,-43,-84,-58,127,19,9,2,67,-15,38,-7,13,51,37,-16,12,27,-55,47,7,70,14,12,-29,45,-82,-18,-77,-54,29,-51,-52,31,5,-127,-33,-57,-2,28,28,7,-48,-13,-2,-13,23,-99,-26,-8,-75,15,-13,-41,-77,12,1,-57,-13,-70,55,20,66,44,-1, 
  /* [0][1][][] */ 83,27,103,127,-14,-45,127,51,1,-61,-58,127,-1,-126,-36,15,-91,-54,120,27,-83,-18,-114,-127,-9,48,-78,127,-84,71,118,69,-6,68,16,62,-127,12,-2,-81,44,-79,8,59,-102,-24,11,-108,-127,-98,-127,11,127,-99,67,-21,-115,23,-37,-21,18,-71,-35,44,-118,-17,105,-92,-75,-3,-57,-127,-59,46,127,-83,127,88,-87,-55,127,-127,-43,45,9,-32,-3,127,17,45,-84,17,6,-110,125,-26, -127,43,-56,34,-56,-127,-115,-127,127,49,-9,53,-118,-127,-6,62,-113,-127,127,95,62,-127,-85,74,-127,127,39,80,-82,-12,-127,90,-41,82,127,-30,0,106,127,17,-72,65,13,99,8,-127,-86,-127,-8,-127,-69,127,47,72,53,-65,44,45,55,-30,-26,-48,-127,127,-39,-127,65,127,23,60,-115,-73,-45,63,-111,-127,110,127,127,-67,-95,-40,-100,19,-4,-108,127,81,127,127,-127,-127,-127,-99,90,127, 57,15,76,58,11,-15,19,35,-75,127,-31,59,5,13,-62,71,-5,-27,52,-23,-127,-3,-65,-123,6,12,127,-40,127,127,24,-122,-42,-127,-11,104,-119,60,-19,3,-25,127,3,29,-44,-4,-11,-73,109,-122,-63,48,126,-103,-127,63,127,-11,-127,85,-68,-98,3,72,127,-32,-111,-9,-78,-2,-85,-10,-63,-127,-9,0,-7,-24,-110,-66,-86,-109,-22,127,-69,40,20,-44,-28,-9,-24,109,-41,127,14,-3, 
  /* [0][2][][] */ 29,-101,35,-18,4,43,26,77,-44,25,93,-74,16,-21,-28,10,-51,0,29,59,24,33,51,-38,21,51,-6,-9,-4,-40,-14,30,-26,-5,-23,-23,56,28,13,-44,12,31,-22,-16,65,19,-29,0,-56,-1,-54,26,-74,-17,-37,-10,-19,15,19,11,-94,28,40,-49,-50,54,-89,-40,78,-3,26,47,-12,3,27,23,-24,-41,-3,-7,7,-15,-38,-11,-78,58,-23,33,-22,22,-7,27,-33,1,9,-10, -53,25,127,9,127,87,-39,42,-98,53,-52,-63,127,-10,-29,6,29,43,42,-53,32,26,111,-45,70,-50,13,62,-33,87,-26,46,-106,34,24,28,82,30,11,-127,-9,16,-127,51,47,28,-51,-11,3,-93,-92,55,70,-83,-43,-54,-33,127,-34,4,126,-100,111,77,-62,10,-10,5,127,-18,-4,117,-127,30,-9,-82,15,-97,-115,-46,-10,-123,-13,-60,-21,127,68,-38,101,32,31,41,-37,-41,10,13, 13,127,39,-22,-43,-2,-33,46,-4,39,83,-11,21,-5,13,16,-60,20,27,59,-1,27,16,-106,12,66,19,67,16,0,-3,-60,-13,-35,-17,57,36,17,-19,38,-4,4,19,12,2,-14,-29,18,28,34,66,-35,-93,5,19,35,-21,-4,54,127,-21,-8,84,-41,20,23,-119,56,47,-33,-34,89,-7,1,-16,-18,-37,-10,34,-12,-16,-61,5,-10,-3,47,4,-90,-41,8,18,55,-45,6,5,12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012946296483278275, 0.0068565281108021736, 0.0066457469947636127, 0.015989923849701881, 0.011794074438512325, 0.012936552986502647, 0.01497720368206501, 0.010820145718753338, 0.0096515333279967308, 0.0069525032304227352, 0.0063555170781910419, 0.016980063170194626, 0.010029293596744537, 0.0048722946085035801, 0.012087304145097733, 0.0086647132411599159, 0.0060639027506113052, 0.012072071433067322, 0.0038576680235564709, 0.0059369918890297413, 0.011050921864807606, 0.019656451418995857, 0.010442176833748817, 0.014053952880203724, 0.029744457453489304, 0.0094330953434109688, 0.014671298675239086, 0.0060938592068850994, 0.0087478319182991982, 0.0056678219698369503, 0.017393779009580612, 0.0070267845876514912, 0.010629177093505859, 0.0075688809156417847, 0.010997476056218147, 0.014275397174060345, 0.010208036750555038, 0.012604399584233761, 0.017047833651304245, 0.010377774946391582, 0.0089501133188605309, 0.0068389428779482841, 0.013343993574380875, 0.0082080764696002007, 0.0064322957769036293, 0.008427843451499939, 0.0087560014799237251, 0.0057707368396222591, 0.011590027250349522, 0.0029869757127016783, 0.0069671585224568844, 0.0055523533374071121, 0.0092388782650232315, 0.0059853354468941689, 0.0098411794751882553, 0.0077348677441477776, 0.0067393244244158268, 0.0072077261283993721, 0.012053016573190689, 0.0072057670913636684, 0.010549741797149181, 0.0049600284546613693, 0.01179315522313118, 0.0045763896778225899, 0.0077992901206016541, 0.01176465954631567, 0.0071448064409196377, 0.0078259827569127083, 0.0080120135098695755, 0.010723371990025043, 0.011565548367798328, 0.0078246165066957474, 0.0043734218925237656, 0.011701196432113647, 0.011992132291197777, 0.004697057418525219, 0.0085300374776124954, 0.0090207513421773911, 0.0066161570139229298, 0.0087894154712557793, 0.012393192388117313, 0.0051764189265668392, 0.014025215990841389, 0.012360361404716969, 0.0041164490394294262, 0.0091882152482867241, 0.0072891125455498695, 0.0077680055983364582, 0.011568980291485786, 0.0070032412186264992, 0.0032512377947568893, 0.052866846323013306, 0.008727692998945713, 0.006962283980101347, 0.0037167498376220465, 0.015298480167984962, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 3182, 1150, 145, -1340, 3233, 4757, 4686, 1319, -442, 3811, 842, -3352, 1760, 1110, 320, -402, 2924, 3692, -126, -574, 2429, 11335, 9363, -1683, -2703, -460, 6207, -366, 830, 822, 7546, -1236, 5837, 1432, 3173, -2903, 173, -2875, 1133, 1042, 1587, 851, 939, 16, 386, 1553, 3316, 1881, 1904, 1069, 3178, 1820, -1727, 883, 601, 1288, 579, 1833, 5023, 628, -1341, 3922, 1170, 1862, 2088, 3275, -3293, 1300, 3461, -635, 4494, 754, 1487, 1556, 1863, 734, -569, 1050, 1206, 2142, 2177, 1766, 4403, -69, 2583, 2656, 290, -722, 7383, 9, 79, -3438, 6525, 1762, -121, -1000, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0002298066538060084, 0.00027308028074912727, 0.00023384082305710763, 0.00026395596796646714, 0.00020635459804907441, 0.00016871702973730862, 0.00018936886044684798, 0.00023853422317188233, 0.00028155636391602457, 0.00019597631762735546, 0.00027203912031836808, 0.00015018008707556874, 0.0002566030016168952, 0.00035801666672341526, 0.00020255966228432953, 0.00022692001948598772, 0.00019865122158080339, 0.00020070288155693561, 0.00021590619871858507, 0.00026583948056213558, 0.00024849208421073854, 8.5096908151172101e-05, 0.00010213123459834605, 0.0002094761875923723, 0.00022066928795538843, 0.00022359919967129827, 0.0001283451565541327, 0.0002659312158357352, 0.00027007571770809591, 0.00024123457842506468, 0.00012218290066812187, 0.00019956982578150928, 0.00014484928396996111, 0.00032597736571915448, 0.00025320175336673856, 0.0002266374503960833, 0.0002908542228396982, 0.00021822565759066492, 0.00016274131485261023, 0.00035982535337097943, 0.00028856433345936239, 0.00026409744168631732, 0.00034260202664881945, 0.00034609061549417675, 0.00041994539787992835, 0.00017373189621139318, 0.00016246984887402505, 0.00031340020359493792, 0.00027192066772840917, 0.00035894181928597391, 0.00024258212943095714, 0.00025880709290504456, 0.0002393068716628477, 0.00040005150367505848, 0.0003673509054351598, 0.00035776160075329244, 0.00035563032724894583, 0.00023204513126984239, 0.0001613008207641542, 0.00026685063494369388, 0.00028245901921764016, 0.00017361289064865559, 0.00025465499493293464, 0.00031015352578833699, 0.00029343191999942064, 0.00022524748055730015, 0.00017804891103878617, 0.00033111736411228776, 0.00020131257770117372, 0.00028861372265964746, 0.00014969376206863672, 0.00019363107276149094, 0.00028229135205037892, 0.00023276153660845011, 0.00028575881151482463, 0.0002081640122924, 0.0002881334803532809, 0.00017166485486086458, 0.000283362518530339, 0.00024004271836020052, 0.00020654583931900561, 0.00023345233057625592, 0.00017304741777479649, 0.00020755316654685885, 0.00018778428784571588, 0.00023454942856915295, 0.0002855343627743423, 0.00038609380135312676, 0.0001275516115128994, 0.00035209651105105877, 0.00043482301407493651, 0.00015196949243545532, 0.00013728757039643824, 0.00027118183788843453, 0.00038011305150575936, 0.000211614795261994, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -22,43,8,-28,-48,-50,-93,1,76,-42,62,-65,74,-62,-3,-127, 
  /* [1][0][][] */ -88,68,-50,-67,-67,46,56,53,-50,17,43,-53,36,127,-8,48, 
  /* [2][0][][] */ -78,-8,-91,9,-22,-26,53,-59,-78,127,56,11,55,48,-72,110, 
  /* [3][0][][] */ -51,-77,1,-72,-85,11,-52,-122,2,12,40,-76,-54,-40,-127,-27, 
  /* [4][0][][] */ 61,-13,25,63,-77,-6,-127,60,46,87,6,50,18,-2,-26,-39, 
  /* [5][0][][] */ -85,35,-69,-41,51,-35,15,-37,69,4,5,-35,45,-110,-127,-55, 
  /* [6][0][][] */ -4,-23,-29,14,-99,60,6,-53,-3,-56,127,-45,36,5,-95,-2, 
  /* [7][0][][] */ -33,94,127,-60,37,40,-36,-61,44,44,-66,-1,30,3,26,31, 
  /* [8][0][][] */ -49,5,33,-27,30,20,81,127,-34,-13,-59,-94,29,91,-95,-75, 
  /* [9][0][][] */ 20,7,48,12,-82,-62,-117,-67,28,-29,127,33,-24,-64,37,-35, 
  /* [10][0][][] */ 7,-60,26,-92,-72,81,85,40,8,-118,-5,45,-62,32,-127,16, 
  /* [11][0][][] */ 100,-75,-14,86,-120,-37,50,7,127,122,-53,46,52,-56,-25,92, 
  /* [12][0][][] */ -77,-52,127,-12,58,-39,27,99,19,-48,80,40,-45,26,-93,33, 
  /* [13][0][][] */ 7,-43,5,39,-11,47,127,36,-90,3,-3,3,-17,101,84,-57, 
  /* [14][0][][] */ 127,-81,113,-2,33,69,62,21,28,99,55,48,58,-31,64,-39, 
  /* [15][0][][] */ 1,121,2,-51,32,127,-76,86,-37,-8,-12,-22,-15,125,-27,-55, 
  /* [16][0][][] */ -42,63,113,-48,39,107,17,-22,7,16,-19,54,95,5,80,127, 
  /* [17][0][][] */ -19,71,56,-82,25,-52,-31,-59,-52,83,-17,23,-79,-16,127,-50, 
  /* [18][0][][] */ -127,10,-68,-87,120,63,-26,-88,55,109,124,103,-15,87,-43,-19, 
  /* [19][0][][] */ 31,101,98,83,33,-24,-33,-2,-12,127,54,98,49,53,-54,50, 
  /* [20][0][][] */ 63,-13,12,78,-54,25,-13,44,-40,-4,-127,-21,93,-22,63,6, 
  /* [21][0][][] */ -106,-127,-29,114,-19,22,-117,38,63,-2,30,48,2,25,-116,14, 
  /* [22][0][][] */ 1,-52,-47,-5,127,22,-68,97,93,125,39,105,-18,72,17,4, 
  /* [23][0][][] */ -51,15,-27,5,52,59,127,98,-3,101,-28,-21,-14,19,-95,-29, 
  /* [24][0][][] */ 12,-99,36,33,127,47,103,-41,90,30,54,42,-77,31,1,-16, 
  /* [25][0][][] */ 127,-32,79,0,42,-15,-9,76,120,-42,-73,-8,102,-78,51,14, 
  /* [26][0][][] */ 23,17,127,62,74,28,-42,-1,29,86,-34,108,70,-41,34,-45, 
  /* [27][0][][] */ -50,46,-73,4,-18,108,19,-112,20,-55,117,38,41,-39,127,118, 
  /* [28][0][][] */ -5,31,-65,-127,11,-75,4,-85,-106,81,-67,10,4,35,-12,54, 
  /* [29][0][][] */ 72,98,-56,18,43,31,-37,-12,53,26,26,65,-127,1,-28,82, 
  /* [30][0][][] */ -40,106,-91,-82,34,-34,-5,43,-126,66,-127,-48,52,63,-23,114, 
  /* [31][0][][] */ 54,-95,104,32,50,-118,-117,20,-54,5,44,-32,-87,48,55,127, 
  /* [32][0][][] */ -64,89,5,49,-127,91,9,55,26,-121,3,-107,19,44,35,94, 
  /* [33][0][][] */ -91,-18,71,93,-11,6,-65,20,-47,-55,17,-23,-7,-24,13,127, 
  /* [34][0][][] */ -8,-1,-76,-58,37,-14,-9,54,9,9,4,5,-40,-6,-19,127, 
  /* [35][0][][] */ 47,0,40,-29,4,26,-80,-47,-33,-127,-72,33,5,-32,35,-21, 
  /* [36][0][][] */ -11,-29,-127,-15,-14,117,-20,32,11,4,59,21,67,16,-44,52, 
  /* [37][0][][] */ 35,20,60,-38,63,-127,22,-30,-114,50,-89,-26,10,16,99,51, 
  /* [38][0][][] */ -40,127,14,-78,59,13,82,-92,-6,-13,-100,55,-63,-96,-93,34, 
  /* [39][0][][] */ 91,12,-127,-69,-28,14,20,-54,-5,5,12,-26,79,0,-84,-66, 
  /* [40][0][][] */ -65,-7,-69,-69,-80,-15,-6,-127,-9,13,-21,-58,52,91,51,81, 
  /* [41][0][][] */ -32,-84,-34,127,-10,-6,-58,-13,-18,-49,70,-72,-73,13,3,51, 
  /* [42][0][][] */ -25,56,-29,-127,15,24,21,-15,54,-19,-33,14,78,-14,-34,8, 
  /* [43][0][][] */ -13,52,12,9,108,21,17,21,13,32,-22,-85,-127,-50,-15,-26, 
  /* [44][0][][] */ 90,-12,27,10,-26,-47,24,25,36,-57,13,-1,127,1,-79,-32, 
  /* [45][0][][] */ 11,-104,-98,27,-67,-127,-19,55,32,-34,17,2,-100,118,37,-53, 
  /* [46][0][][] */ -32,-95,64,89,-6,-13,-125,92,35,-52,43,-50,42,110,69,127, 
  /* [47][0][][] */ -45,-70,17,74,-6,-30,59,10,-24,-67,-127,-34,34,-39,-53,41, 
  /* [48][0][][] */ -127,72,-13,-26,-8,53,4,-101,24,-32,40,-65,56,-99,-30,8, 
  /* [49][0][][] */ -59,-13,36,-30,9,-7,97,127,-32,-26,19,29,-44,38,-45,24, 
  /* [50][0][][] */ 37,21,-74,26,53,-118,-33,1,-81,48,-47,12,23,-66,-127,-49, 
  /* [51][0][][] */ -51,50,-25,97,-29,48,-59,-67,-70,-85,-7,-72,8,15,5,127, 
  /* [52][0][][] */ -127,-4,26,-18,36,35,72,6,1,-87,-48,-46,-77,-58,-118,-4, 
  /* [53][0][][] */ -49,-63,-49,-127,-32,-16,15,87,34,-45,-46,-2,-11,23,61,78, 
  /* [54][0][][] */ 24,-37,11,10,-44,36,34,-13,-38,-84,62,18,-29,-33,-127,17, 
  /* [55][0][][] */ -16,-17,-20,42,62,-50,76,40,-41,-53,-127,-13,39,-33,-41,34, 
  /* [56][0][][] */ 13,-27,-99,-10,-127,8,-42,-13,-10,12,-17,7,79,-28,-1,54, 
  /* [57][0][][] */ -49,22,32,-48,122,37,38,23,-52,6,9,7,-53,94,-127,-45, 
  /* [58][0][][] */ 36,24,-2,-27,42,-19,-73,-57,17,-127,-51,18,-71,-30,-27,64, 
  /* [59][0][][] */ -74,7,-31,-2,4,57,-88,-33,53,127,-52,22,8,30,-9,25, 
  /* [60][0][][] */ 11,-53,-1,23,-127,-33,41,10,-11,22,-13,22,-7,-48,27,23, 
  /* [61][0][][] */ 8,42,-107,-7,-49,-43,-127,-60,-33,-15,64,118,51,-39,89,76, 
  /* [62][0][][] */ 22,-9,37,-8,21,30,64,127,-56,114,25,58,3,6,62,119, 
  /* [63][0][][] */ 34,-120,-11,-7,-58,21,45,-14,2,-14,-6,5,-25,127,117,35, 
  /* [64][0][][] */ -44,-17,-101,-35,12,61,43,-3,5,-32,29,-5,66,-20,-57,127, 
  /* [65][0][][] */ -16,-28,89,59,68,-45,66,105,-37,-30,-127,-84,36,97,-27,-41, 
  /* [66][0][][] */ -62,-109,-9,-94,-84,-127,57,-47,4,-27,26,74,-63,-39,-92,98, 
  /* [67][0][][] */ -30,-127,-111,-23,-81,105,4,-105,-89,-9,-16,-72,20,25,-42,60, 
  /* [68][0][][] */ 127,7,38,1,-40,-15,-64,-40,-48,-110,-20,3,55,-2,47,-76, 
  /* [69][0][][] */ 57,0,54,-24,11,-36,-65,26,-4,127,-32,18,2,22,58,-48, 
  /* [70][0][][] */ 50,5,-17,32,-99,60,-7,-113,110,127,-5,87,56,-19,-17,27, 
  /* [71][0][][] */ 103,-121,95,107,-93,-35,-9,17,127,41,-55,86,120,-68,41,121, 
  /* [72][0][][] */ -24,-45,36,95,22,6,-127,87,63,13,49,-2,-33,-54,-49,82, 
  /* [73][0][][] */ 80,-9,72,-107,35,-127,-66,39,7,102,-49,19,42,-74,59,-44, 
  /* [74][0][][] */ 102,4,30,61,-127,-2,56,18,-92,-43,13,-63,31,-60,-5,30, 
  /* [75][0][][] */ 85,127,-76,13,46,38,-45,-56,-63,-30,16,53,-91,57,65,65, 
  /* [76][0][][] */ -50,-33,7,-14,-59,-10,77,-12,-77,41,84,58,-49,-127,-13,92, 
  /* [77][0][][] */ -119,127,-26,12,-62,-122,89,114,106,-94,-31,100,-76,18,-18,106, 
  /* [78][0][][] */ 127,54,-63,27,-89,31,-106,-40,-23,-11,-67,13,13,-110,51,72, 
  /* [79][0][][] */ -62,2,127,41,-15,-63,-34,-42,-42,-4,35,3,-60,115,-67,39, 
  /* [80][0][][] */ 64,127,27,-118,25,59,62,-2,4,25,-28,19,78,-23,16,-29, 
  /* [81][0][][] */ 25,-43,10,-127,121,35,-28,88,75,66,3,-25,-35,29,-97,-53, 
  /* [82][0][][] */ 72,45,92,-16,122,-102,44,37,-3,94,-18,16,16,-24,58,-127, 
  /* [83][0][][] */ -43,93,37,-17,48,127,125,89,8,102,-56,-49,-47,106,-55,-95, 
  /* [84][0][][] */ 0,-83,13,106,32,-99,-74,34,-76,49,-50,0,-127,65,-5,-82, 
  /* [85][0][][] */ -83,90,-22,4,-26,-74,-49,-70,-10,79,-1,-50,-127,-51,-30,46, 
  /* [86][0][][] */ 4,67,127,121,46,-50,43,-3,22,64,-69,-92,26,61,-116,-86, 
  /* [87][0][][] */ -41,30,127,-28,-99,-15,33,9,46,-1,6,37,-34,24,-12,19, 
  /* [88][0][][] */ -19,-63,-69,22,48,26,-9,21,-18,-36,-104,-95,127,-21,26,31, 
  /* [89][0][][] */ 43,27,-29,-127,-5,-77,-50,56,90,-34,55,-97,-26,-33,64,-48, 
  /* [90][0][][] */ 16,66,40,34,-38,37,43,102,-2,-53,-5,127,62,15,-38,83, 
  /* [91][0][][] */ -46,-15,-25,111,126,79,-28,-74,-27,62,-19,-3,-109,-127,-39,-14, 
  /* [92][0][][] */ -23,60,9,-31,-127,-26,-74,59,-35,25,79,72,-15,-22,61,-13, 
  /* [93][0][][] */ 100,80,127,21,-65,-63,41,22,-62,-78,-35,-59,28,-34,-28,-53, 
  /* [94][0][][] */ -12,-123,34,-127,25,67,-1,-11,108,-24,-17,82,29,42,-82,41, 
  /* [95][0][][] */ -41,-85,-46,-68,127,120,-44,46,89,86,-86,77,-49,122,-59,30, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0024070767685770988, 0.0028603400569409132, 0.0024493320379406214, 0.0027647688984870911, 0.0021614315919578075, 0.0017672022804617882, 0.0019835168495774269, 0.0024984923657029867, 0.0029491216409951448, 0.0020527257584035397, 0.0028494345024228096, 0.0015730396844446659, 0.0026877510827034712, 0.0037499940954148769, 0.002121682045981288, 0.0023768411483615637, 0.0020807436667382717, 0.0021022334694862366, 0.002261478453874588, 0.0027844973374158144, 0.002602794673293829, 0.00089133530855178833, 0.0010697589023038745, 0.0021941282320767641, 0.0023113687057048082, 0.0023420576471835375, 0.0013443328207358718, 0.0027854582294821739, 0.0028288692701607943, 0.0025267768651247025, 0.0012797871604561806, 0.0020903653930872679, 0.0015172029379755259, 0.003414402948692441, 0.0026521252002567053, 0.0023738814052194357, 0.0030465107411146164, 0.002285773167386651, 0.0017046104185283184, 0.0037689388263970613, 0.0030225254595279694, 0.0027662506327033043, 0.0035885355900973082, 0.0036250762641429901, 0.0043986574746668339, 0.0018197298049926758, 0.0017017670907080173, 0.0032826652750372887, 0.0028481939807534218, 0.003759684506803751, 0.0025408915244042873, 0.0027108376380056143, 0.0025065853260457516, 0.0041902819648385048, 0.0038477641064673662, 0.0037473223637789488, 0.0037249987944960594, 0.0024305232800543308, 0.0016895222943276167, 0.0027950885705649853, 0.0029585761949419975, 0.001818483229726553, 0.0026673469692468643, 0.0032486584968864918, 0.0030735104810446501, 0.0023593222722411156, 0.0018649476114660501, 0.0034682413097470999, 0.0021086195483803749, 0.0030230428092181683, 0.0015679456992074847, 0.0020281607285141945, 0.00295682018622756, 0.0024380271788686514, 0.0029931394383311272, 0.0021803840063512325, 0.0030180127359926701, 0.0017980787670239806, 0.0029680398292839527, 0.0025142929516732693, 0.0021634346339851618, 0.0024452628567814827, 0.0018125602509826422, 0.0021739858202636242, 0.0019669195171445608, 0.0024567542131990194, 0.002990788547322154, 0.0040440838783979416, 0.0013360209995880723, 0.0036879843100905418, 0.0045544910244643688, 0.0015917825512588024, 0.001437998958863318, 0.0028404551558196545, 0.003981439396739006, 0.0022165286354720592, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27165, -7319, 1552, -16716, 12331, -9335, 19851, -6151, 12309, -7079, 10643, 16576, -3380, -25547, -1670, 7952, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.1802857089787722e-05, 7.4722200224641711e-05, 3.8178543036337942e-05, 7.1623500843998045e-05, 9.5226256235036999e-05, 0.00017738989845383912, 5.3137060604058206e-05, 7.7873963164165616e-05, 0.00011600631842156872, 0.00012514062109403312, 7.8048215073067695e-05, 8.3945044025313109e-05, 7.670163904549554e-05, 0.00013480489724315703, 6.2711616919841617e-05, 7.6365162385627627e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 41,29,-2,24,-9,-90,-12,6,-28,-80,21,-13,72,-65,61,56,-87,-18,22,5,102,17,-78,13,5,81,127,82,1,87,58,-40,-2,3,-6,-35,49,29,-7,-8,125,23,40,-20,-4,-3,8,-52,18,-51,88,-13,-83,-3,54,35,-13,-46,4,6,-1,38,-85,-17,5,-4,58,26,-2,-32,5,39,20,67,8,45,62,-33,52,15,-11,51,61,35,-63,8,-8,79,11,1,-98,-3,27,19,114,87, 
  /* [1][0][][] */ 33,49,-34,-10,8,-45,97,-70,-72,-29,-50,-56,-3,-39,13,-48,-19,-22,-37,1,-12,-108,127,-32,15,10,15,58,-47,14,-50,41,-65,23,19,-2,-12,55,-31,93,27,20,-1,-51,74,-77,4,18,-72,-6,49,-121,-55,58,60,59,57,27,-80,21,-35,-26,3,-7,32,31,89,25,-62,-117,10,3,36,70,-25,28,-66,-29,84,-37,57,-32,62,-57,-21,-34,-23,0,-32,-28,26,11,65,-66,-42,69, 
  /* [2][0][][] */ 2,-6,-6,-10,71,54,-57,28,-37,48,0,-20,30,0,1,43,26,-23,-127,4,-17,-30,-5,29,-3,-13,-61,26,-37,-15,-11,71,-23,-34,3,21,-45,34,-10,-41,77,9,11,39,7,53,11,-4,-79,18,-21,24,-34,63,8,-60,13,26,46,12,-17,3,-27,49,36,-9,-30,5,-5,2,-4,-34,19,56,35,74,-57,-20,-45,-33,35,32,67,-2,-10,-47,-31,-54,-22,-34,-10,80,-1,3,77,-28, 
  /* [3][0][][] */ 46,-31,-10,-118,-18,-20,81,-39,44,106,-71,-9,21,-15,-34,53,47,32,-8,21,-56,14,11,3,-38,79,13,6,-40,-21,-63,57,10,-21,23,-28,-1,-54,-1,48,8,17,-9,42,50,-62,6,41,48,-22,8,-37,90,57,5,9,-14,-16,-10,-33,-27,23,48,-9,-20,-25,127,-13,-32,-7,-44,27,17,-51,-1,-61,22,-46,115,7,-18,-39,-21,-34,-39,-20,63,66,-32,46,-58,20,16,-80,-28,41, 
  /* [4][0][][] */ -38,63,54,40,-23,20,-38,-18,18,-36,4,-4,11,58,-6,14,-21,-53,-18,-75,16,-23,-72,11,-35,-48,-31,12,-40,127,-51,-16,-2,-25,8,-43,67,48,-34,9,16,8,24,-47,-68,-6,57,-32,24,-12,-40,-2,-81,37,65,27,16,61,-14,43,-37,-77,-28,-4,57,26,-62,-19,-7,19,16,-85,-29,58,63,57,-43,44,-59,42,10,83,17,-66,46,-73,-31,-83,-38,-73,-53,-16,7,26,43,-33, 
  /* [5][0][][] */ -1,-21,36,-13,-12,0,-28,4,27,10,-12,-5,-14,-23,28,-22,-14,-17,-51,-37,-32,4,-15,7,27,-57,59,-30,0,39,4,64,-6,-80,24,9,-50,-38,-32,6,-45,-15,-32,0,-5,7,-76,21,-19,26,57,-11,32,-62,5,15,-13,-58,-24,-22,38,31,22,49,-35,-3,105,-37,-10,-22,13,14,-4,13,37,20,3,-5,127,43,-30,-11,-52,28,40,72,6,89,3,-35,-10,-1,7,-16,-34,9, 
  /* [6][0][][] */ 37,-66,70,31,-28,112,-60,-58,-42,-68,-95,50,-6,19,-27,118,8,22,-8,-58,-127,-15,-70,-79,8,-75,-9,78,-123,58,13,-34,34,81,-39,-7,-14,-31,1,-8,-59,18,51,-43,-9,32,-88,-10,37,18,-62,-90,74,1,-49,-3,34,-30,-3,13,3,-30,28,23,58,-76,-72,-81,-100,17,-8,-75,-19,-92,18,-77,96,36,-44,46,-36,77,32,-93,71,-51,-22,0,-58,65,-91,60,20,-37,77,-121, 
  /* [7][0][][] */ -31,-3,-58,56,-1,6,22,1,-70,-1,68,64,11,-59,12,-18,-20,-19,20,-15,-69,-4,-46,-46,68,40,8,50,17,32,17,20,-47,-127,32,109,-17,13,-42,7,1,-24,4,-60,15,58,75,80,-18,51,-22,20,14,-46,25,-30,-25,47,-64,-23,48,14,5,-32,66,-41,85,4,-56,-40,75,-29,4,-40,-61,-33,39,-45,69,-14,-12,-4,-76,-24,33,14,-83,38,6,0,6,23,53,10,69,2, 
  /* [8][0][][] */ -8,-55,-3,16,-9,4,28,-16,-10,-1,53,56,11,32,-43,-9,79,-7,-5,11,-1,-86,-30,2,-22,-32,60,20,-14,44,-2,-27,-21,14,16,10,-44,-18,27,-46,-15,62,7,-51,18,-26,9,-19,47,12,56,-2,3,16,-45,-2,-32,111,-64,31,-8,-62,-72,-6,-98,-28,-11,19,-6,24,27,-22,-11,-127,54,-92,-3,15,-71,13,-29,-10,6,60,72,-70,-57,56,-49,97,18,-27,-35,-4,7,-64, 
  /* [9][0][][] */ -22,-46,-29,17,-7,38,-4,41,-32,-4,49,66,-32,40,17,-49,-4,24,-36,-35,8,42,-4,4,-12,27,-6,23,27,-13,20,-6,-27,-10,23,39,-25,-8,26,6,-12,-32,27,-17,-6,41,-8,51,-14,19,-2,41,126,12,-25,-13,5,-22,34,27,-28,16,64,8,14,11,76,-14,37,-2,-5,17,-6,-127,-34,-118,-19,-7,37,14,-31,18,-15,-39,36,7,-50,8,5,84,28,14,50,36,-15,17, 
  /* [10][0][][] */ 30,39,11,-13,-25,25,-49,-6,58,7,-38,22,21,8,-2,-41,-28,-1,21,6,21,-22,0,-33,39,-11,-95,46,-9,56,-4,9,10,17,-19,-1,13,0,10,11,36,-15,54,-50,-16,-23,18,29,-2,8,12,-29,-18,-4,-6,34,-6,-9,-10,11,-13,-38,-8,22,0,-5,-88,-25,-59,-8,56,-13,-31,20,31,15,58,-22,-74,19,-18,31,-2,-1,3,19,-75,-127,-17,36,3,4,45,-48,5,28, 
  /* [11][0][][] */ 41,-64,4,13,-53,47,12,26,81,-18,-29,-46,15,15,13,-1,-14,48,-12,-63,6,19,15,-36,27,3,54,-8,40,-51,-24,16,7,109,-98,21,25,-4,63,21,-63,47,-36,5,-52,-20,-20,5,36,-17,-18,-16,-15,12,-76,79,-16,-6,-24,-49,15,4,-17,-71,-13,-53,-127,-107,0,-38,-78,21,53,8,-10,-27,36,57,-110,-30,-13,-7,-21,-3,-19,-28,48,84,15,-53,2,-14,-36,41,81,26, 
  /* [12][0][][] */ 18,26,-52,-30,23,-32,-15,38,51,-42,0,-1,13,-22,-26,18,16,-51,-20,12,-8,53,-4,75,-16,-24,-127,-14,58,-24,27,1,-27,-91,79,-9,24,-13,3,30,-14,-67,46,42,31,7,5,-4,-58,-13,-45,111,81,-48,17,-100,8,21,-42,-39,28,59,69,17,-12,-29,28,50,121,15,17,40,27,-31,-20,3,-27,-40,39,-64,19,-67,43,-42,-3,-14,-11,-100,0,29,-50,30,18,59,14,44, 
  /* [13][0][][] */ -15,15,-73,40,33,14,-25,0,28,59,-29,41,-50,-30,77,-64,16,38,31,22,-50,-43,-5,-1,72,33,-19,13,12,24,53,-19,-22,41,-9,49,8,-54,-52,-27,4,-9,29,13,24,51,-18,49,-31,36,5,13,-17,-37,42,36,20,-36,-11,15,28,10,1,6,18,77,127,29,12,-18,-26,-35,8,35,-84,46,35,-74,104,-12,-27,-42,12,10,12,54,-46,-30,3,-19,2,34,36,13,46,44, 
  /* [14][0][][] */ -14,73,13,34,-67,-47,36,34,-65,-17,68,11,-94,9,53,-21,-39,57,-75,26,-15,48,-101,3,-48,13,-50,-107,2,0,36,102,-66,32,8,-15,-14,-63,7,-47,26,-37,45,-30,0,44,-63,26,19,-48,72,33,-30,10,-35,34,-69,47,24,30,29,74,-13,43,10,-42,19,-69,37,48,69,34,-61,42,10,24,26,10,45,8,-83,127,16,-125,88,5,-23,4,-121,-25,-31,3,-30,13,57,38, 
  /* [15][0][][] */ 49,-42,13,22,30,8,-14,-5,5,29,-56,2,55,65,-9,-22,-14,-6,-82,29,-10,-14,0,20,46,-49,88,23,42,-36,-32,57,70,39,-11,-54,49,70,48,58,90,14,-14,17,-52,-99,29,-38,-38,-27,-15,10,11,-53,-40,36,-18,-1,-7,25,-14,-37,-26,24,25,35,-57,41,9,-46,-14,0,1,-127,-53,-104,-16,25,-116,33,60,-31,28,26,-51,-22,2,-11,42,77,15,-85,-22,-33,30,-37, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0026266213972121477, 0.0031756935641169548, 0.0016225880244746804, 0.0030439987313002348, 0.0040471157990396023, 0.0075390706770122051, 0.00225832499563694, 0.0033096433617174625, 0.004930268507450819, 0.005318476352840662, 0.0033170490060001612, 0.0035676644183695316, 0.0032598194666206837, 0.0057292082346975803, 0.0026652438100427389, 0.0032455194741487503, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7246, 383, -2478, 3963, -2601, 2210, 1267, -2452, 5246, -5005, -219, -4395, 8568, -3696, -1261, -4756, -139, -1560, -7895, -1441, -2209, 1171, -3982, -468, 39, 6139, -10677, -4358, -2195, -2673, 3176, -578, 18829, 332, -2136, -1806, -1522, 8424, 8837, 9875, 454, 2628, -3547, 2312, 113, -2034, 11218, 7364, -3160, -635, -3226, 1294, -832, -737, -3690, 1352, -2664, 2709, 1230, 4207, -394, -762, 3188, 8008, 15761, -1237, 15452, 10543, -2520, 1241, 6899, -1325, -131, 159, -2647, -3861, 21148, 4693, 9502, 16734, 12159, -570, 13596, 12510, -429, -389, 5075, -4765, 5873, -1138, -5148, -2251, -1141, 1047, 23406, -2481, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00013811292592436075, 0.00044280957081355155, 0.00030385615536943078, 0.00033122228342108428, 0.000165692123118788, 0.00056865467922762036, 8.2267477409914136e-05, 0.00022180030646268278, 0.00032801870838738978, 0.0001750056107994169, 0.00034965309896506369, 0.00018774972704704851, 9.4972594524733722e-05, 8.712857379578054e-05, 0.00027382755069993436, 0.00023649672220926732, 0.00026219303254038095, 0.00031513546127825975, 0.00018486255430616438, 0.00043279508827254176, 0.00020638719433918595, 0.00027165256324224174, 0.00020046067947987467, 0.00019939814228564501, 0.0025921894703060389, 0.00018812280904967338, 0.000264685571892187, 0.00017751810082700104, 0.00039711425779387355, 0.00016752188093960285, 0.00014272019325289875, 0.00033226606319658458, 0.00012127894297009334, 0.0006312826881185174, 0.00014587615441996604, 0.00022946925309952348, 0.00038651935756206512, 0.00019008765229955316, 0.00010872895654756576, 9.4082664872985333e-05, 0.00056864827638491988, 0.0002593555545900017, 0.00024556773132644594, 0.00026312546106055379, 0.00022337908740155399, 0.00030998967122286558, 0.00012762249389197677, 0.00019330864597577602, 0.00013598466466646641, 0.00034298791433684528, 0.0002907027374021709, 0.00027218140894547105, 0.00015624615480192006, 0.00091843074187636375, 0.00023519083333667368, 0.00028975741588510573, 0.0001538436918053776, 0.0005951549974270165, 0.00044998308294452727, 0.00033304639509879053, 0.00028676085639744997, 0.00026855766191147268, 0.00017950708570424467, 9.5279734523501247e-05, 0.00021288235438987613, 0.0005108267068862915, 0.00010001379996538162, 0.00019073889416176826, 0.000333234085701406, 0.00054183584870770574, 0.00013438700989354402, 0.00033054864616133273, 0.00040611354052089155, 0.0001840481418184936, 0.00012338539818301797, 0.00018785675638355315, 5.1958442782051861e-05, 0.00028586440021172166, 0.00015177678142208606, 0.00011805748363258317, 0.00014827458653599024, 0.00026867826818488538, 0.00011858857033075765, 0.00028700378607027233, 9.3619513791054487e-05, 0.00047081767115741968, 0.00022373383399099112, 0.00023377730394713581, 0.00016074533050414175, 0.00028236076468601823, 0.00017868480063043535, 0.00036290567368268967, 0.00032218472915701568, 0.00021986161300446838, 9.5785013400018215e-05, 0.00038170200423337519, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -3,-8,-23,12,122,-7,64,8,-17,11,-9,-12,-13,-9,3,-3,-23,4,8,-4,1,21,51,29,-7,-21,-38,6,33,9,21,13,-67,2,18,-8,-4,-54,-57,-25,1,-2,81,-3,-16,40,-68,-34,-20,36,-14,59,-46,-5,37,-12,23,-19,6,-23,-2,-8,-45,-12,-47,-29,-44,-41,-10,9,7,-3,29,-4,22,41,2,18,127,-25,-82,14,-127,-14,-29,-21,12,18,-13,-24,9,-31,1,19,-26,24, 9,12,87,-114,-38,-6,92,-62,-13,-8,-33,44,-72,23,-105,48,-16,112,80,-31,3,127,54,127,29,-10,60,54,127,32,127,-37,-73,-15,-95,-12,-2,-127,127,-82,-32,-99,-17,-35,49,-29,-56,-22,73,1,15,122,-99,10,-74,-3,-52,-18,-1,17,-26,-127,-127,-53,-82,5,7,-97,1,13,-41,113,-127,2,15,-5,-95,-127,-9,-101,-127,-6,-1,-77,90,84,-31,25,-127,0,33,-19,17,127,-66,-72, -40,-26,-52,38,65,1,50,-10,-29,5,-1,17,-17,9,26,-70,-15,-6,-27,-20,-3,-11,-13,39,-21,23,-12,-17,-6,9,-4,-9,11,-8,-28,71,-5,-10,-94,45,6,63,43,-6,-18,-18,-62,-40,-20,2,-7,47,10,-26,3,-30,91,-25,-14,-40,-29,-4,-52,-1,-51,-27,127,-26,-5,14,22,20,16,10,0,20,-16,10,-25,-48,-63,-21,-109,-29,11,-69,12,-1,-73,-24,-7,24,4,13,-52,8, 
  /* [0][1][][] */ -82,-3,13,-71,76,73,-15,-23,-12,-7,-28,-4,-126,26,35,58,-6,43,63,37,25,-17,93,-51,43,55,51,16,1,-2,-34,-11,-98,-15,72,-8,-7,-107,-125,-127,-18,34,123,-29,-46,127,-92,-102,6,85,5,-43,-111,41,94,-22,33,-21,23,-23,26,-22,50,-85,-51,14,-35,-87,-8,-12,-60,27,78,110,29,-72,-107,-19,-59,-41,-55,-2,-46,-68,30,18,-127,40,-32,127,73,-47,127,-4,-64,8, 66,127,127,127,-127,-127,127,-62,127,127,-72,-58,-127,127,-49,61,127,-127,127,127,127,-92,127,-113,-127,-127,127,127,-99,127,-55,127,-127,127,127,-112,127,49,24,-69,127,-27,-127,-92,127,-19,120,121,127,-127,127,-127,93,127,-117,127,-115,127,-127,127,-95,104,94,-127,127,127,-11,127,-105,-127,-65,-127,0,127,127,124,-22,-12,74,-127,29,127,67,127,127,80,-73,127,-5,51,-38,2,-74,-34,-127,-23, -127,-26,-25,-87,22,45,-76,11,-38,-23,-2,127,-112,47,37,28,-36,52,63,9,21,-33,106,7,37,7,44,31,-21,-8,1,-8,-93,-42,85,127,10,-48,-127,-24,-34,-19,33,-13,-70,-57,-127,-127,52,64,-3,-36,127,16,127,-41,127,-35,35,-63,-10,-39,-108,-43,-81,6,-58,-64,7,2,-127,14,24,-90,-2,127,-127,-45,-58,-17,-38,-32,-70,-95,5,24,-98,45,-42,-65,127,127,-44,-35,-100,-8, 
  /* [0][2][][] */ -40,-35,-15,22,46,0,-24,31,-18,10,32,-16,96,24,-19,6,17,-11,-42,-18,-5,-2,-19,-34,0,-20,18,14,5,-2,-40,7,-15,0,24,-21,-2,-7,-49,-15,-18,46,27,14,15,15,-65,-19,-112,-9,-6,-15,-37,-28,32,-5,25,-13,-3,-28,10,44,9,-21,-49,-21,127,-1,25,22,-5,6,-19,1,0,-22,-26,37,-33,-38,-35,17,-96,-23,-5,-3,70,-15,36,6,-39,-8,-12,-8,-31,0, -27,-53,11,-99,-36,-9,51,127,-67,75,127,-24,-58,56,127,127,4,-35,60,-52,-1,-35,97,27,9,-19,44,-20,5,4,-108,-46,-73,-30,-96,0,-77,-48,78,-107,-29,-127,-51,127,31,-16,-49,-21,40,-3,-7,-26,27,13,-46,-37,-46,-48,47,-73,127,50,79,-2,-113,-49,-23,-55,127,26,-66,11,39,-7,20,-20,-36,-37,-14,26,-99,-12,-94,-106,31,-127,23,-2,10,-5,40,0,17,-111,-66,127, 9,9,-23,64,20,-13,-3,18,-32,1,-2,47,97,32,-38,-33,-3,2,-20,-23,-4,4,34,3,-21,-5,9,-14,-4,11,-48,8,-17,3,12,-16,4,35,-74,67,-40,11,32,2,1,-2,-19,-7,-45,13,-14,-21,15,-20,25,7,45,-7,-3,-37,-8,29,-39,-21,-8,-14,-9,20,34,0,9,-12,-41,-47,-25,-4,18,34,77,-46,8,-2,-29,-1,1,20,81,-8,32,4,4,5,-12,-10,-44,-20, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0058697992935776711, 0.018819406628608704, 0.012913886457681656, 0.014076946303248405, 0.0070419153198599815, 0.024167822673916817, 0.0034963677171617746, 0.0094265127554535866, 0.013940794393420219, 0.0074377385899424553, 0.01486025657504797, 0.0079793632030487061, 0.0040363352745771408, 0.0037029644008725882, 0.011637670919299126, 0.01005111075937748, 0.01114320382475853, 0.013393256813287735, 0.0078566586598753929, 0.018393790349364281, 0.0087714558467268944, 0.011545233428478241, 0.0085195787250995636, 0.0084744207561016083, 0.11016804724931717, 0.0079952189698815346, 0.011249136179685593, 0.0075445189140737057, 0.016877355054020882, 0.0071196798235177994, 0.0060656080022454262, 0.014121307991445065, 0.0051543549634516239, 0.026829512789845467, 0.0061997366137802601, 0.0097524430602788925, 0.016427071765065193, 0.0080787250772118568, 0.0046209804713726044, 0.0039985133334994316, 0.024167550727725029, 0.01102261058986187, 0.010436628945171833, 0.011182831600308418, 0.0094936108216643333, 0.013174560852348804, 0.0054239556193351746, 0.0082156173884868622, 0.0057793483138084412, 0.014576985500752926, 0.012354865670204163, 0.011567709036171436, 0.0066404612734913826, 0.039033304899930954, 0.0099956104531884193, 0.0123146902769804, 0.0065383566543459892, 0.025294087827205658, 0.019124280661344528, 0.014154471457004547, 0.012187335640192032, 0.011413700878620148, 0.0076290508732199669, 0.0040493886917829514, 0.0090474998578429222, 0.021710135042667389, 0.0042505864985287189, 0.0081064030528068542, 0.014162448234856129, 0.023028023540973663, 0.0057114479131996632, 0.014048317447304726, 0.017259825021028519, 0.0078220460563898087, 0.0052438792772591114, 0.0079839117825031281, 0.0022082338109612465, 0.012149237096309662, 0.0064505133777856827, 0.0050174430944025517, 0.0063016698695719242, 0.011418825946748257, 0.0050400141626596451, 0.012197660282254219, 0.0039788293652236462, 0.020009750500321388, 0.0095086880028247833, 0.0099355354905128479, 0.0068316766992211342, 0.012000332586467266, 0.0075941039249300957, 0.015423490665853024, 0.01369285024702549, 0.0093441186472773552, 0.0040708631277084351, 0.016222335398197174, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 629, 3731, 246, 1676, 2714, 7004, 79, 1808, 8860, -927, 10051, 1311, 3686, 203, 2012, 66, 1625, 1710, 14, 5538, 416, 4329, -1129, 497, -6065, 1034, 1848, 901, 3470, 442, 2399, 2412, 1642, 9750, 1710, 3441, 1480, 1248, 2356, 1672, 6347, 1446, 2076, 176, 1435, 4428, 4453, 11479, 1129, -658, 854, 3065, 1435, -2079, 3165, -212, 1586, 9917, 1151, 1417, 1806, 3861, 2720, -116, 11182, 9856, 938, 1214, 5610, 3557, 1521, 576, -2291, 2974, 1957, 2127, 328, 6543, 2501, 8128, 2083, 135, 2969, 7389, -374, 7928, 2040, 707, -444, 1247, 572, 6641, 2025, 2245, 3299, 2154, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00043517799349501729, 0.00019847739895340055, 0.00033157807774841785, 0.00028600738733075559, 0.00023472192697227001, 0.00013332683010958135, 0.00025610945886000991, 0.00019708648324012756, 0.00010427537927171215, 0.0001972061290871352, 8.5054227383807302e-05, 0.00032025785185396671, 0.00013444082287605852, 0.0006378847174346447, 0.00029218592680990696, 0.00026801813510246575, 0.0003586130915209651, 0.00035040965303778648, 0.00030166484066285193, 0.00015239269123412669, 0.00046418426791206002, 0.000186503617442213, 0.00025693772477097809, 0.00032985559664666653, 0.00011816027836175635, 0.00022892351262271404, 0.00029296203865669668, 0.00037837505806237459, 0.00022891444677952677, 0.00040255862404592335, 0.00024070619838312268, 0.00021589345124084502, 0.00031807832419872284, 8.5848347225692123e-05, 0.00024512523668818176, 0.00019238708773627877, 0.00035390668199397624, 0.00036805574200116098, 0.0002208299410995096, 0.00027793963090516627, 0.00014096953964326531, 0.00025469949468970299, 0.00024148389638867229, 0.00031437634606845677, 0.00020571463392116129, 0.00019722827710211277, 0.00015609727415721864, 7.2750764957163483e-05, 0.0002772527514025569, 0.00036839590757153928, 0.00050867337267845869, 0.00021709915017709136, 0.00026074127526953816, 0.00023758407041896135, 0.0002277481253258884, 0.00038231909275054932, 0.0001867942773969844, 8.5741288785357028e-05, 0.00018572053522802889, 0.00017943675629794598, 0.0002082869759760797, 0.00020335610315669328, 0.00024185783695429564, 0.00034619306097738445, 8.8538545242045075e-05, 8.9482557086739689e-05, 0.00043398785055615008, 0.00046071544056758285, 0.00013019204197917134, 0.00014678825391456485, 0.00031594635220244527, 0.00032291878596879542, 0.00025022734189406037, 0.00021456532704178244, 0.00020858109928667545, 0.00030552229145541787, 0.0002341046929359436, 0.00012640988279599696, 0.00021630007540807128, 0.00011188201460754499, 0.00018971716053783894, 0.00030667110695503652, 0.00016905016673263162, 0.0001285909820580855, 0.00017502412083558738, 9.8036427516490221e-05, 0.00034539634361863136, 0.00042534616659395397, 0.00033107295166701078, 0.00040845980402082205, 0.0003335094079375267, 0.00011763881047954783, 0.00023902571410872042, 0.00016602012328803539, 0.00016629931633360684, 0.00027553821564652026, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 32,1,19,58,-127,-20,66,66,63,76,-42,4,3,-11,51,62, 
  /* [1][0][][] */ -19,13,-66,13,127,97,-1,-7,21,24,-58,44,-20,105,-33,-49, 
  /* [2][0][][] */ -53,89,86,10,84,87,17,57,27,-14,40,-3,74,-127,-18,29, 
  /* [3][0][][] */ 127,-29,20,11,28,29,-8,7,40,24,-62,-7,-32,66,-33,68, 
  /* [4][0][][] */ -26,-43,5,35,-127,21,-74,-30,5,1,4,-37,0,47,-43,98, 
  /* [5][0][][] */ -77,13,20,9,127,16,19,-2,-39,17,-16,9,-37,43,-58,-14, 
  /* [6][0][][] */ -127,22,-30,19,-10,-56,56,16,12,-34,-51,37,9,6,-39,12, 
  /* [7][0][][] */ -5,105,40,-65,50,24,127,16,36,-20,-18,55,97,32,-17,21, 
  /* [8][0][][] */ -37,-25,-65,60,-78,67,-73,-94,38,-31,90,37,104,47,-127,-30, 
  /* [9][0][][] */ -15,-127,-38,85,-44,-37,-20,61,36,35,21,69,-70,8,5,-22, 
  /* [10][0][][] */ 11,-35,-106,29,-127,110,54,-83,-2,-84,68,-27,44,92,-94,97, 
  /* [11][0][][] */ -29,-70,-17,1,19,113,9,-25,4,32,25,-54,2,76,-91,127, 
  /* [12][0][][] */ -17,-117,-117,127,-95,-88,57,70,67,59,-35,93,16,-85,-38,-22, 
  /* [13][0][][] */ -64,-16,-41,-1,-16,-3,34,14,-31,127,1,-16,46,41,15,-3, 
  /* [14][0][][] */ -125,-25,-60,-65,-18,72,-3,-121,127,-69,54,-15,115,-45,-96,-83, 
  /* [15][0][][] */ -9,-127,93,-44,-33,-45,13,60,9,-54,-76,-18,96,-22,-28,-27, 
  /* [16][0][][] */ -3,-39,-3,-32,23,27,-35,-16,53,-127,49,-11,-16,-11,-65,-76, 
  /* [17][0][][] */ -54,13,15,-73,21,-27,-50,-1,80,-69,34,85,127,-79,-31,-119, 
  /* [18][0][][] */ 60,5,-15,-120,6,-26,127,-31,22,46,-15,53,-9,66,-15,-101, 
  /* [19][0][][] */ -68,-37,-28,-104,-100,62,-2,-21,36,-34,12,-127,-21,-32,-49,18, 
  /* [20][0][][] */ 11,59,67,-72,76,4,-33,74,-72,-107,18,-84,-14,127,-17,3, 
  /* [21][0][][] */ 16,-102,-118,-20,83,38,80,83,-78,-96,-36,17,110,-127,3,4, 
  /* [22][0][][] */ 47,-16,93,-14,15,4,83,44,0,127,40,37,-17,7,117,9, 
  /* [23][0][][] */ -127,-62,2,64,53,32,22,-12,-16,39,4,-76,14,97,82,93, 
  /* [24][0][][] */ 4,-31,69,55,36,-127,35,-70,30,119,-122,98,-10,-58,98,-81, 
  /* [25][0][][] */ 116,-53,76,127,11,-1,-19,58,-120,60,62,-83,-35,13,84,-10, 
  /* [26][0][][] */ -23,20,11,42,-58,108,-11,46,-61,-40,-82,32,10,26,48,-127, 
  /* [27][0][][] */ 43,-9,-6,-64,-42,11,-77,-1,-90,-25,-87,-50,-85,43,-28,127, 
  /* [28][0][][] */ -72,9,27,5,26,-9,-127,8,3,-29,-2,-24,20,-60,-73,-42, 
  /* [29][0][][] */ -22,-110,-28,83,-42,9,127,3,81,62,-110,69,29,-27,-50,63, 
  /* [30][0][][] */ 49,-66,-85,13,-127,34,67,-43,17,2,3,-30,-13,58,2,85, 
  /* [31][0][][] */ -127,-14,18,106,-30,5,-50,-1,-20,-50,-4,-48,-13,-63,-18,102, 
  /* [32][0][][] */ -121,-108,-83,-11,-89,-45,12,-28,127,77,-63,-68,34,38,35,-37, 
  /* [33][0][][] */ -20,-5,-96,44,-127,-108,43,10,-111,11,-48,-69,-36,105,61,73, 
  /* [34][0][][] */ 19,53,18,23,-78,-37,51,7,47,-127,-26,30,-27,-4,40,86, 
  /* [35][0][][] */ 63,8,-76,-30,-127,19,113,-65,66,77,-21,13,19,103,44,101, 
  /* [36][0][][] */ -8,15,-40,49,127,-8,43,63,-60,21,-81,-87,17,-27,6,5, 
  /* [37][0][][] */ -127,67,-12,-76,73,-113,-30,-26,-13,-10,-21,61,62,-79,23,-116, 
  /* [38][0][][] */ 67,60,27,-60,-116,-63,-127,-36,-66,-69,63,69,-49,-88,88,7, 
  /* [39][0][][] */ 5,-10,-40,53,5,65,75,-62,-39,51,23,-35,-28,85,53,127, 
  /* [40][0][][] */ 72,38,66,77,-46,-47,7,18,-64,63,8,-14,-43,-22,127,-15, 
  /* [41][0][][] */ -23,-9,13,61,-106,119,8,63,-74,25,-115,19,39,40,44,-127, 
  /* [42][0][][] */ 0,-89,9,-44,101,63,72,6,-22,-127,-77,-40,1,19,-9,64, 
  /* [43][0][][] */ -30,-71,4,18,127,3,8,116,-9,-53,-103,-60,111,-7,-33,25, 
  /* [44][0][][] */ -47,-42,-70,-120,62,127,63,-48,-22,-120,-118,71,-63,57,18,96, 
  /* [45][0][][] */ 26,-67,-62,-5,-127,59,-29,-57,99,-46,32,-70,-8,11,-30,24, 
  /* [46][0][][] */ 0,-71,-16,35,91,-77,-18,101,-33,-27,55,83,-74,-43,39,-127, 
  /* [47][0][][] */ -96,-60,-31,127,-43,2,27,21,-25,127,127,95,-39,88,2,97, 
  /* [48][0][][] */ 29,7,-83,-105,33,-88,18,73,46,-85,0,41,-60,34,-67,-127, 
  /* [49][0][][] */ 62,70,18,11,-10,-9,42,39,-39,127,-35,46,-36,-24,58,83, 
  /* [50][0][][] */ 3,-3,14,-1,-127,-17,-9,-48,51,24,9,46,-19,-61,12,-3, 
  /* [51][0][][] */ 17,22,-10,-127,-36,94,39,-44,25,3,14,-56,41,77,-35,13, 
  /* [52][0][][] */ 13,4,17,-127,96,-100,1,-58,40,4,117,-58,47,-3,-50,110, 
  /* [53][0][][] */ -42,-66,32,-31,-30,-127,14,-83,-11,85,-95,72,-45,-20,49,-66, 
  /* [54][0][][] */ 68,68,46,-16,-100,-60,-86,-127,14,-8,54,66,-53,-32,53,8, 
  /* [55][0][][] */ 24,7,-35,71,-31,17,27,-21,3,127,28,50,-3,-7,0,52, 
  /* [56][0][][] */ -4,-127,-73,82,-49,4,3,76,88,13,51,34,-16,-8,34,114, 
  /* [57][0][][] */ 17,61,102,-94,123,1,22,-11,114,-72,5,127,46,-63,92,-63, 
  /* [58][0][][] */ 91,-83,15,-61,31,22,-22,127,30,118,-12,54,70,-5,123,-9, 
  /* [59][0][][] */ -35,58,67,-66,-12,-76,10,-6,32,-8,-127,-83,-82,-62,82,-18, 
  /* [60][0][][] */ 80,-32,7,29,48,-29,61,-91,36,127,-46,98,3,-26,-55,-19, 
  /* [61][0][][] */ 72,54,36,-16,-65,-127,-9,-60,-23,-13,-42,6,-69,-34,63,72, 
  /* [62][0][][] */ -21,86,-44,59,-79,127,-51,48,-73,1,-34,35,-21,38,84,-108, 
  /* [63][0][][] */ 28,-8,-74,-127,-15,-32,90,-22,-13,-92,-13,35,-23,74,33,-18, 
  /* [64][0][][] */ -54,25,-1,-27,51,-47,37,61,-127,-21,-55,-23,-28,87,41,66, 
  /* [65][0][][] */ -77,-10,-66,-25,74,37,-44,-68,-107,-59,46,-40,-127,98,-78,40, 
  /* [66][0][][] */ -21,70,-18,26,-54,127,-15,7,-77,21,-10,43,-26,55,48,-59, 
  /* [67][0][][] */ 16,0,-26,-25,6,-77,66,-82,3,13,2,96,-55,-32,-6,-127, 
  /* [68][0][][] */ 3,-127,-35,104,-6,-18,26,116,79,49,73,0,-103,5,-25,2, 
  /* [69][0][][] */ 32,41,87,-96,33,1,-38,76,24,96,37,65,82,-108,44,-127, 
  /* [70][0][][] */ 53,28,60,-34,107,18,-120,-54,-127,-92,-16,44,-38,55,-98,-21, 
  /* [71][0][][] */ -50,-59,46,-24,55,-24,36,28,-93,61,-127,-58,15,97,-14,69, 
  /* [72][0][][] */ 11,4,58,24,-34,-25,-101,-64,-4,86,-28,83,51,127,-105,-10, 
  /* [73][0][][] */ -33,-40,-20,-21,20,-82,25,-30,50,55,101,5,34,11,-49,127, 
  /* [74][0][][] */ 6,5,-34,68,-79,-3,90,29,79,67,25,127,116,39,-52,13, 
  /* [75][0][][] */ -50,32,-23,44,-32,127,-27,43,-44,59,-33,55,-25,54,36,-71, 
  /* [76][0][][] */ -63,70,-69,49,-127,-10,-4,10,47,24,-33,-33,75,-30,-111,66, 
  /* [77][0][][] */ 127,113,-110,107,111,90,47,0,49,60,100,1,95,24,82,26, 
  /* [78][0][][] */ 18,-43,19,-62,84,-118,41,-52,92,60,127,-22,16,-8,-39,122, 
  /* [79][0][][] */ -43,48,-7,26,11,-40,-27,-7,-127,-5,67,15,106,45,-76,-36, 
  /* [80][0][][] */ -79,43,45,5,39,34,-13,-127,-80,48,-61,-55,-26,-96,33,58, 
  /* [81][0][][] */ 80,82,-45,4,33,-37,84,127,-100,122,-48,-45,-51,41,104,120, 
  /* [82][0][][] */ 32,127,-47,-62,2,-40,95,-91,24,27,-55,56,98,-23,70,-37, 
  /* [83][0][][] */ -15,-22,39,16,1,14,-11,-95,73,-34,72,12,31,-45,-58,-127, 
  /* [84][0][][] */ -122,-79,-55,-25,-26,112,96,-5,85,77,127,113,65,86,-83,0, 
  /* [85][0][][] */ 114,-9,119,-73,73,5,-4,72,-27,127,-56,7,-3,57,97,6, 
  /* [86][0][][] */ -61,67,-16,7,24,75,8,3,127,33,105,-35,-27,50,17,-41, 
  /* [87][0][][] */ 14,-63,23,-47,50,-127,26,-26,40,-8,64,-33,38,-41,-45,76, 
  /* [88][0][][] */ -90,64,24,-10,70,-25,5,35,-68,-59,104,-70,52,110,116,-127, 
  /* [89][0][][] */ -28,29,-22,19,-35,127,-13,41,-43,5,-40,13,-2,42,23,-84, 
  /* [90][0][][] */ 49,-82,20,29,127,6,31,16,-7,-91,-90,-11,5,-5,-45,38, 
  /* [91][0][][] */ -35,112,-69,-52,-42,-63,-95,56,-73,2,-48,-127,-100,-58,17,44, 
  /* [92][0][][] */ 76,58,79,33,-127,-126,-12,10,-33,70,-36,-34,-51,-106,33,3, 
  /* [93][0][][] */ -19,-127,-120,35,-63,-69,2,78,66,56,12,65,-64,58,-4,-5, 
  /* [94][0][][] */ 127,27,97,-23,22,-41,-4,48,26,105,7,62,0,-1,123,-10, 
  /* [95][0][][] */ -51,-57,-25,-24,127,-6,57,70,-58,-5,-110,-73,20,-8,-58,14, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0056879976764321327, 0.0025942004285752773, 0.0043338937684893608, 0.0037382619921118021, 0.0030679348856210709, 0.001742649357765913, 0.0033474806696176529, 0.0025760205462574959, 0.0013629321474581957, 0.0025775842368602753, 0.0011117019457742572, 0.0041859326884150505, 0.0017572098877280951, 0.0083374772220849991, 0.0038190183695405722, 0.0035031333100050688, 0.0046872552484273911, 0.004580032080411911, 0.0039429129101336002, 0.0019918498583137989, 0.0060671241953969002, 0.0024376970250159502, 0.0033583065960556269, 0.0043113804422318935, 0.00154441490303725, 0.0029921466484665871, 0.0038291628006845713, 0.0049455543048679829, 0.0029920281376689672, 0.0052616456523537636, 0.0031461522448807955, 0.0028218370862305164, 0.0041574453935027122, 0.0011220815358683467, 0.0032039114739745855, 0.0025145970284938812, 0.0046257399953901768, 0.0048106755129992962, 0.0028863595798611641, 0.0036328122951090336, 0.0018425435991957784, 0.0033290518913418055, 0.0031563171651214361, 0.0041090585291385651, 0.0026887948624789715, 0.0025778738781809807, 0.0020402707159519196, 0.00095088948728516698, 0.0036238343454897404, 0.0048151216469705105, 0.0066486191935837269, 0.0028375962283462286, 0.0034080210607498884, 0.0031053444836288691, 0.0029767837841063738, 0.0049971048720180988, 0.0024414961226284504, 0.0011206822236999869, 0.0024274617899209261, 0.0023453296162188053, 0.0027224165387451649, 0.0026579676195979118, 0.0031612047459930182, 0.0045249192044138908, 0.0011572437360882759, 0.0011695824796333909, 0.0056724417954683304, 0.0060217850841581821, 0.0017016760539263487, 0.0019185971468687057, 0.0041295792907476425, 0.0042207124643027782, 0.0032705985940992832, 0.0028044779319316149, 0.0027262610383331776, 0.0039933314546942711, 0.0030598673038184643, 0.0016522414516657591, 0.0028271519113332033, 0.0014623547904193401, 0.0024796996731311083, 0.0040083471685647964, 0.0022095716558396816, 0.0016807494685053825, 0.0022876542061567307, 0.0012813858920708299, 0.0045145056210458279, 0.0055594905279576778, 0.0043272916227579117, 0.0053387773223221302, 0.0043591372668743134, 0.0015375990187749267, 0.0031241874676197767, 0.0021699673961848021, 0.0021736165508627892, 0.0036014243960380554, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -2873, 10128, -20180, 2599, 11989, -14504, -41909, -9630, -4067, 11386, -14698, -12547, 6432, -12835, -2173, -3981, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014214971452020109, 0.00016189485904760659, 0.0001366220967611298, 0.00013396976282820106, 0.00012068971409462392, 0.00016467702516820282, 0.00011174225073773414, 0.000169017119333148, 0.000104297258076258, 0.000104501836176496, 0.00014916381041985005, 0.00010535136243561283, 0.0001358279405394569, 7.101576920831576e-05, 0.00014038418885320425, 0.00018832203932106495, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 30,32,28,-43,74,56,-30,59,-9,116,-2,47,-38,38,0,52,36,76,38,-66,-76,78,-7,48,54,43,27,49,-52,-47,-14,90,-28,8,-73,49,51,-127,-38,10,18,-41,58,-2,-7,-57,-62,-19, 
  /* [1][0][][] */ -47,-10,-68,-48,11,88,-49,11,-8,-25,-44,30,54,-25,-20,-26,-32,-37,-12,19,-64,45,-109,-42,-51,-39,46,62,-28,-28,37,-47,12,-64,-35,51,18,-56,127,-39,-27,29,-51,-14,39,52,31,14, 
  /* [2][0][][] */ 10,-4,63,-35,-20,-77,33,36,111,80,-66,24,118,-50,127,81,-62,-25,-26,29,84,-85,-34,-104,4,-35,29,-80,33,52,-46,13,35,-30,62,33,-75,23,1,-33,32,31,73,-19,29,-84,90,-65, 
  /* [3][0][][] */ 46,10,-27,-32,34,114,15,-15,40,-56,22,-24,-64,17,10,41,-43,-68,54,-120,-18,0,-15,-12,-46,90,127,68,-7,-35,26,35,64,-24,102,33,-40,-54,0,45,32,4,-17,-7,19,17,-12,-27, 
  /* [4][0][][] */ 101,-10,-9,-53,68,101,38,-7,59,-12,-100,31,46,-36,-5,-15,-93,-116,-26,-84,-19,38,-44,-41,-64,127,-84,111,-50,-49,29,74,47,-45,14,-14,-6,22,-16,34,-56,-14,-3,57,-56,102,-28,-38, 
  /* [5][0][][] */ 9,-5,-53,10,-13,52,12,-30,66,55,34,94,57,-25,34,-1,-44,127,-11,44,-1,2,-70,-18,43,-2,-65,-32,-21,35,18,-29,-36,7,37,20,-40,2,-99,6,101,-21,25,44,-17,0,-50,35, 
  /* [6][0][][] */ 68,11,14,63,6,-35,94,-68,1,71,124,98,51,37,-48,69,45,-49,-79,96,48,-53,-42,52,-76,89,80,1,127,49,-30,5,92,-80,-127,-3,111,36,3,16,15,44,57,-14,57,125,37,12, 
  /* [7][0][][] */ -86,3,-25,33,-59,-52,14,47,70,106,-51,-71,-95,12,-18,-17,-79,104,11,118,-49,45,25,45,-17,-91,-20,-80,36,37,-2,6,-8,18,20,-9,13,-51,127,1,7,43,26,-19,53,73,-37,2, 
  /* [8][0][][] */ -10,-96,40,-58,55,-47,74,-38,-33,-121,26,13,-33,1,29,30,12,8,-49,102,10,29,-17,22,61,-19,-65,-37,-127,-19,-45,-114,9,-61,0,83,-22,25,120,10,18,2,76,123,-24,-72,-40,81, 
  /* [9][0][][] */ 24,-35,6,-80,22,80,-54,46,8,-32,-35,-24,32,-67,102,-17,18,-127,45,55,-79,54,60,-58,-14,-85,-18,91,69,74,-47,-29,-59,34,-8,127,-16,-56,-57,-4,-37,-12,39,106,47,91,-72,28, 
  /* [10][0][][] */ -7,21,-27,-7,15,34,-62,-42,58,33,62,-13,-30,-8,49,-48,-48,127,-1,46,1,-10,20,18,-38,33,2,92,40,3,-30,-13,70,6,-9,28,-14,-47,-33,16,-69,-3,24,-10,6,44,34,31, 
  /* [11][0][][] */ -33,52,-18,42,36,52,4,8,7,16,-127,-76,70,25,-14,-54,7,30,-41,-54,-4,-20,112,11,40,9,-12,41,14,26,1,61,25,2,-49,-4,39,84,111,11,24,-33,68,2,-54,-15,97,2, 
  /* [12][0][][] */ -53,-12,35,22,-62,-51,0,7,-23,-28,-127,8,75,-100,14,37,50,86,78,-108,-33,42,-45,-86,3,-20,37,-37,23,17,-15,69,63,63,29,-19,-55,-32,18,2,-26,18,51,2,23,-17,-32,-23, 
  /* [13][0][][] */ -52,-123,-43,-110,11,25,60,-2,-120,20,127,-66,62,40,122,6,118,32,1,-94,76,-62,120,5,-61,8,-20,10,-48,-96,-117,11,56,-26,-70,64,44,-59,86,-69,-8,57,74,43,51,-28,98,-64, 
  /* [14][0][][] */ 69,17,-50,-2,-44,6,-83,-16,-23,58,53,41,-21,-63,17,-49,45,-116,22,12,79,-63,25,5,-18,121,-89,-1,-46,-30,-93,-6,127,37,91,-33,-74,14,-31,57,-15,-50,102,-30,-46,-39,-59,42, 
  /* [15][0][][] */ -59,11,36,14,96,9,1,35,30,76,-20,46,67,-17,-33,-6,10,43,3,-35,25,-21,-46,-72,73,-71,-39,69,-33,0,10,10,-57,-7,127,5,-91,15,52,-11,-36,-20,18,6,-49,-32,-5,19, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0060413628816604614, 0.0068805310875177383, 0.0058064390905201435, 0.0056937146000564098, 0.0051293126307427883, 0.0069987736642360687, 0.0047490457072854042, 0.0071832276880741119, 0.0044326335191726685, 0.0044413278810679913, 0.0063394620083272457, 0.0044774329289793968, 0.0057726874947547913, 0.0030181701295077801, 0.0059663276188075542, 0.0080036865547299385, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 11250, 319, 15956, 642, 17536, -1906, 35101, 595, 11050, 35819, 14806, 24716, -2709, 11047, 37532, 23074, 2639, 5131, 1036, 57779, 3076, 16733, 4077, 17209, 11824, 24192, 7159, -1598, -1004, 17280, 15694, 189, 344, 529, 4497, 16652, 6734, 21841, 2946, 21451, 22647, -5365, 880, 10692, 251, 6367, 35164, 19531, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.9388467788230628e-05, 0.00019271550991106778, 6.8382403696887195e-05, 0.00026990025071427226, 0.00015141726180445403, 0.00014335004379972816, 5.5947064538486302e-05, 0.00027524444158188999, 0.0001154381170636043, 4.8960133426589891e-05, 3.8695958210155368e-05, 7.8020515502430499e-05, 8.6378036940004677e-05, 0.00014000468945596367, 4.4022672227583826e-05, 9.5460847660433501e-05, 0.00012142513878643513, 5.1432049076538533e-05, 0.00016935562598519027, 3.3605971111683175e-05, 5.2976509323343635e-05, 5.4610674851574004e-05, 7.4853669502772391e-05, 0.00016965546819847077, 6.4390966144856066e-05, 9.5430157671216875e-05, 4.3895983253605664e-05, 6.3371553551405668e-05, 0.00029331143014132977, 6.2738981796428561e-05, 0.00011269325477769598, 0.00042988912900909781, 0.00021476745314430445, 0.000178758185938932, 6.1872153310105205e-05, 5.2086110372329131e-05, 7.4421164754312485e-05, 9.6496747573837638e-05, 9.9289980425965041e-05, 8.8018896349240094e-05, 7.6945812907069921e-05, 0.00018122432811651379, 0.00051833025645464659, 8.5534753452520818e-05, 0.00018343674310017377, 5.7700111938174814e-05, 6.3069797761272639e-05, 6.4742831455077976e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -114,73,-127,85,-38,76,-63,127,-71,-51,70,-43,78,-89,-59,-37,99,101,73,-105,83,-37,70,-66,-64,-42,97,104,-98,-56,-54,92,63,-90,90,-116,-95,-97,94,23,-10,-50,82,-57,70,51,-47,-28, -93,43,-76,113,-85,127,-35,98,-112,-81,115,-62,114,-127,-70,-82,117,122,127,-127,93,-106,101,-116,-127,-73,80,127,17,-94,-88,127,107,-127,102,-118,-127,-127,127,3,-93,127,106,-73,-41,100,-65,-28, -65,21,11,31,-62,39,-15,87,-68,-9,48,-35,103,-66,-43,-13,57,68,80,-33,26,-74,37,-27,-22,-25,14,28,83,-80,-39,80,31,-78,47,-33,-55,-11,51,-77,-127,-27,29,-3,-68,51,-36,13, 
  /* [0][1][][] */ -98,78,-71,60,-75,74,-113,115,-127,-96,72,-75,94,-107,-87,-83,91,110,-54,-88,90,-97,87,-71,-56,-69,103,92,-127,-69,-68,83,119,44,108,-127,-127,-101,92,-50,-59,-72,84,-82,127,92,-127,-57, -127,127,-88,127,-127,127,-127,124,-121,-127,127,-127,127,-96,-127,-127,127,127,-30,-116,127,-127,127,-127,-119,-127,127,97,9,-127,-127,-9,127,23,127,-118,-95,-87,110,-127,-97,122,127,-74,-39,127,-125,-84, -68,62,-64,43,-72,31,-47,32,-61,-51,82,-63,119,-45,-61,-6,71,59,-36,-29,35,-91,37,-57,-112,-19,60,77,94,-102,-29,24,49,-13,66,-67,11,1,53,-90,-54,-56,12,-71,-77,83,-67,-82, 
  /* [0][2][][] */ -41,31,-15,60,-35,51,-87,98,-52,-37,30,-47,21,-69,-48,-73,52,71,-60,-18,16,-36,42,-30,-31,-1,54,32,-57,-74,-52,10,39,47,43,-105,-24,-44,29,-97,-67,-17,25,-40,87,56,-53,-49, -10,16,-94,33,-55,32,-91,-76,-90,-40,62,-55,88,-98,-68,-48,77,58,-74,-28,42,-43,40,-28,-51,-61,44,40,-3,-49,-53,18,45,53,64,-104,-41,-41,19,-106,-55,62,36,-127,-21,29,-73,-127, 19,9,-77,-9,-35,14,-41,-28,1,-21,42,-41,77,25,-30,4,42,4,-66,6,19,5,-2,-8,-42,-23,33,18,63,-20,-2,-38,1,38,44,-37,7,3,25,-106,-1,-7,10,-61,-42,40,-16,-51, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0042240098118782043, 0.008190409280359745, 0.0029062521643936634, 0.011470760218799114, 0.0064352336339652538, 0.0060923765413463116, 0.0023777501191943884, 0.011697888374328613, 0.004906119778752327, 0.0020808055996894836, 0.0016445781802758574, 0.0033158718142658472, 0.0036710663698613644, 0.0059501989744603634, 0.0018709634896367788, 0.0040570860728621483, 0.0051605682820081711, 0.0021858620457351208, 0.0071976138278841972, 0.0014282537158578634, 0.0022515016607940197, 0.0023209536448121071, 0.0031812808010727167, 0.0072103571146726608, 0.0027366159483790398, 0.0040557817555963993, 0.0018655792810022831, 0.0026932908222079277, 0.012465734966099262, 0.00266640679910779, 0.0047894632443785667, 0.018270287662744522, 0.0091276168823242188, 0.0075972229242324829, 0.0026295664720237255, 0.0022136596962809563, 0.003162899287417531, 0.0041011115536093712, 0.0042198239825665951, 0.0037408028729259968, 0.0032701969612389803, 0.0077020339667797089, 0.022029034793376923, 0.0036352269817143679, 0.0077960612252354622, 0.0024522547610104084, 0.0026804662775248289, 0.0027515701949596405, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1508, -874, 285, -2633, 2722, -595, 3119, -3265, 990, 259, 1608, 3304, 59, -328, 417, 4782, -2032, 2086, 4198, 741, -601, 2141, -832, 3168, 1845, 1282, 854, -741, 5011, -173, 1823, -2058, -1012, 3625, -885, 1337, 1743, 1396, 197, 3625, 1489, 7454, -3697, 1372, 6896, -472, 2011, 1807, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00031401307205669582, 0.00041608233004808426, 0.00051429780432954431, 0.00021354873024392873, 0.00030232022982090712, 0.0003009900392498821, 0.00024209989351220429, 0.00018166829249821603, 0.00031739837140776217, 0.00039784735417924821, 0.00023344287183135748, 0.00022506871027871966, 0.00052021967712789774, 0.00040186775731854141, 0.00033893421641550958, 0.00017698276496957988, 0.00025085906963795424, 0.00033459081896580756, 0.00021334766643121839, 0.00038045810651965439, 0.00033595759305171669, 0.00025352646480314434, 0.00026116889785043895, 0.00026964637800119817, 0.0002424172853352502, 0.00031668698647990823, 0.00035421291249804199, 0.0004217029782012105, 0.00017528864555060863, 0.00037014909321442246, 0.00021162322082091123, 0.00021005060989409685, 0.00021670755813829601, 0.00020267500076442957, 0.00030923489248380065, 0.00036077681579627097, 0.00028365670004859567, 0.00022995847393758595, 0.00029073245241306722, 0.00024404094438068569, 0.00038460193900391459, 0.00012032473023282364, 0.00015460456779692322, 0.00029077412909828126, 0.00013221538392826915, 0.00030591076938435435, 0.00027748744469136, 0.00031615723855793476, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 79,35,127,-42,55,103,-75,-58, 
  /* [1][0][][] */ 7,-82,-127,7,39,22,27,6, 
  /* [2][0][][] */ -127,-6,-40,-18,56,36,-68,-36, 
  /* [3][0][][] */ 49,74,127,-110,-25,-126,-9,-29, 
  /* [4][0][][] */ -127,18,-56,-18,57,11,-30,-72, 
  /* [5][0][][] */ -99,16,-56,-15,12,36,-88,-127, 
  /* [6][0][][] */ -40,-127,-127,41,102,17,18,63, 
  /* [7][0][][] */ -64,-127,-100,-76,-91,-71,38,94, 
  /* [8][0][][] */ 87,36,1,-4,90,-72,-127,11, 
  /* [9][0][][] */ -40,51,-48,75,-64,-39,127,-32, 
  /* [10][0][][] */ -16,127,39,72,119,-17,-11,62, 
  /* [11][0][][] */ -86,-28,-23,3,-72,108,127,-1, 
  /* [12][0][][] */ 62,27,-127,39,-12,-45,-61,-13, 
  /* [13][0][][] */ 50,-27,-62,8,14,-127,-16,-11, 
  /* [14][0][][] */ 9,-86,61,6,127,-100,-43,24, 
  /* [15][0][][] */ -33,-46,5,127,76,85,-79,43, 
  /* [16][0][][] */ 127,26,-40,19,80,-110,-126,-8, 
  /* [17][0][][] */ 63,127,49,68,45,58,29,-94, 
  /* [18][0][][] */ 25,-13,-5,0,127,4,34,3, 
  /* [19][0][][] */ 17,127,30,4,-113,21,25,-29, 
  /* [20][0][][] */ -63,21,70,-127,22,35,-17,117, 
  /* [21][0][][] */ -35,81,54,-127,19,46,-18,111, 
  /* [22][0][][] */ -62,-52,-86,11,-126,127,103,-11, 
  /* [23][0][][] */ 81,46,-127,18,20,-36,-52,-29, 
  /* [24][0][][] */ -41,41,21,7,-7,77,-127,105, 
  /* [25][0][][] */ -103,-47,-127,3,-61,-66,65,106, 
  /* [26][0][][] */ 46,-1,-28,-35,112,-17,127,-32, 
  /* [27][0][][] */ 127,-64,17,70,4,36,-29,80, 
  /* [28][0][][] */ 50,52,53,1,127,-41,43,-23, 
  /* [29][0][][] */ -15,-9,-32,-46,-75,23,127,-33, 
  /* [30][0][][] */ 49,-127,-59,-81,-113,-15,8,-59, 
  /* [31][0][][] */ 10,22,-16,-10,-127,9,-27,-7, 
  /* [32][0][][] */ 45,-62,-49,87,-9,-88,116,-127, 
  /* [33][0][][] */ 71,127,59,49,92,2,-43,-14, 
  /* [34][0][][] */ -117,-41,127,-5,-24,104,105,0, 
  /* [35][0][][] */ -33,78,127,-10,-63,-60,-26,32, 
  /* [36][0][][] */ -103,9,87,-17,-3,127,65,18, 
  /* [37][0][][] */ -18,-97,-23,-127,-53,-97,89,42, 
  /* [38][0][][] */ 42,-7,94,-72,50,65,-127,13, 
  /* [39][0][][] */ -24,74,-127,-27,-21,6,6,70, 
  /* [40][0][][] */ 78,-63,15,32,12,-4,11,127, 
  /* [41][0][][] */ -48,104,127,-26,10,85,-82,39, 
  /* [42][0][][] */ 73,-104,-114,-18,-127,11,25,-102, 
  /* [43][0][][] */ -15,-96,41,-91,127,-61,57,66, 
  /* [44][0][][] */ -3,122,127,20,0,61,-73,10, 
  /* [45][0][][] */ -37,41,16,83,-95,57,-127,23, 
  /* [46][0][][] */ -43,-44,66,49,-123,-127,-30,-7, 
  /* [47][0][][] */ -20,56,48,-86,-127,39,-26,59, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0028784512542188168, 0.0038140856195241213, 0.0047143935225903988, 0.0019575287587940693, 0.0027712669689208269, 0.0027590736281126738, 0.0022192476317286491, 0.0016652916092425585, 0.0029094831552356482, 0.0036469318438321352, 0.0021398917306214571, 0.0020631286315619946, 0.0047686775214970112, 0.003683785442262888, 0.0031068951357156038, 0.0016223409911617637, 0.002299539977684617, 0.0030670806299895048, 0.0019556856714189053, 0.0034875303972512484, 0.0030796094797551632, 0.0023239911533892155, 0.0023940466344356537, 0.0024717568885535002, 0.0022221570834517479, 0.0029029622673988342, 0.003246949752792716, 0.0038656082469969988, 0.001606811536476016, 0.0033930311910808086, 0.0019398783333599567, 0.0019254627404734492, 0.0019864847417920828, 0.0018578530289232731, 0.0028346513863652945, 0.0033071187790483236, 0.0026001848746091127, 0.0021079513244330883, 0.0026650459039956331, 0.0022370405495166779, 0.0035255155526101589, 0.0011029760353267193, 0.0014172076480463147, 0.0026654279790818691, 0.0012119736056774855, 0.0028041803743690252, 0.0025436333380639553, 0.0028981063514947891, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1725, 2616, 21931, -6027, 6396, -14579, -1056, -15653, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00011905437713721767, 8.8244290964212269e-05, 0.000109326203528326, 9.6465082606300712e-05, 0.00016801460878923535, 0.00014901228132657707, 9.2542795755434781e-05, 8.1519261584617198e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -23,-51,-17,-66,4,-9,82,79,-102,-82,-29,-2,-63,3,-60,35,-97,13,19,127,60,-39,13,97,80,69,28,4,-103,-46,-82,-50,-69,120,55,-63,32,-34,101,14,28,21,3,-97,43,-26,-39,-84, 
  /* [1][0][][] */ -7,50,-21,-39,-77,72,-23,-40,-26,62,-20,15,55,47,-33,-6,-16,-118,84,-39,127,1,-72,30,47,-4,-73,71,38,-20,70,30,-26,-17,5,-7,1,111,-15,-36,53,35,-12,15,92,10,-27,66, 
  /* [2][0][][] */ -23,-37,101,5,77,-27,-11,29,-30,0,-12,40,12,-43,-29,-127,-49,-89,-23,20,-97,20,-40,-33,-52,19,4,-49,-32,7,-29,-6,-3,-4,20,-10,26,-30,-44,-2,25,-32,35,-42,-39,-45,-61,-43, 
  /* [3][0][][] */ 65,5,66,10,13,-37,20,72,-58,-31,41,-18,-66,51,-8,48,77,26,-26,43,-111,-72,127,1,11,-2,-48,-27,-73,65,118,-58,13,-112,0,24,-15,-87,-12,76,-79,-65,55,9,-103,-78,58,-3, 
  /* [4][0][][] */ 17,-18,69,-26,6,-9,0,-3,-53,-6,-22,-4,45,-66,47,-99,40,42,-12,-29,11,34,8,7,-4,11,56,-3,29,16,-127,-27,-33,-22,6,25,46,-5,29,10,-44,-10,-68,21,-21,-96,5,17, 
  /* [5][0][][] */ 21,-51,59,26,26,27,21,2,-71,-10,-51,27,38,5,17,-45,86,76,-1,-25,83,-48,127,-77,-14,44,6,42,15,11,-31,-44,-7,-41,-30,12,39,29,68,-3,-80,24,35,27,52,-21,75,4, 
  /* [6][0][][] */ -51,52,-127,87,54,2,31,15,-19,-17,62,-77,-87,-9,-38,36,-116,33,-5,79,23,56,-76,-75,2,-4,18,71,-16,-39,-42,1,51,67,-44,-19,-12,-10,81,18,78,64,-110,-62,-48,116,-53,-24, 
  /* [7][0][][] */ 37,72,-76,30,25,84,125,89,38,77,-90,5,-43,-4,-74,-48,36,46,122,108,82,1,127,9,109,96,-55,74,-72,47,-3,-67,11,-56,-11,2,6,104,-67,89,-71,58,11,-82,91,-11,50,-45, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.005059810820966959, 0.0037503822240978479, 0.0046463636681437492, 0.0040997657924890518, 0.0071406206116080284, 0.0063330219127237797, 0.0039330688305199146, 0.0034645686391741037, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 505, 8814, -476, -366, 1562, -404, 3639, -387, -3342, 646, -7303, -50, 223, -203, -213, 2668, 5650, 4628, 932, -3332, -6578, -918, 13550, -6907, -3208, -1229, 5380, -7256, -260, 480, -8157, 9783, 4951, 202, 2056, -26, -17, -315, 9063, 1424, 6465, -1397, 3626, 5791, -1151, 6897, 1270, -3256, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030024221632629633, 0.00023660036094952375, 0.0011725251097232103, 0.00028308582841418684, 0.00025612578610889614, 0.00078008492710068822, 0.00020195105753373355, 0.00034210010198876262, 7.136509520933032e-05, 0.00031421490712091327, 0.00021670441492460668, 0.0036497176624834538, 0.00064828823087736964, 0.0012505354825407267, 0.00080752908252179623, 0.001023730612359941, 0.00020083585695829242, 5.3066160035086796e-05, 0.00027906801551580429, 0.00040708083542995155, 0.00030177013832144439, 0.00023163078003562987, 0.00011269537208136171, 0.00061029050266370177, 0.0002508954203221947, 0.00064830883638933301, 0.0005728896358050406, 0.00023232884996104985, 0.00034902524203062057, 0.00043326648301444948, 0.00016310397768393159, 9.0835754235740751e-05, 0.00016052495629992336, 0.00022129430726636201, 0.0002169242943637073, 0.00039860923425294459, 0.0051744827069342136, 0.0002516315144021064, 0.00016773125389590859, 0.00023558843531645834, 0.00017178145935758948, 0.00016437222075182945, 0.00026246038032695651, 0.00018375924264546484, 0.00040646179695613682, 0.00010289300553267822, 6.6418338974472135e-05, 0.00020032990141771734, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,-42,9,19,-24,-97,-56,44,-24,-18,12,12,47,-3,-27,13,99,23,26,-1,6,-27,-55,14,-6,-14,-5,-36,-49,71,-5,-78,44,2,-19,-48,-13,-33,-2,-6,-27,38,10,-16,-12,64,127,-15, -127,-76,-23,127,-72,90,-107,127,39,12,16,0,53,23,-8,-37,-12,67,25,-10,-9,127,12,127,127,-27,-44,29,59,-116,-10,-85,70,-2,-29,-111,24,-2,-52,-42,-127,-11,-78,-127,23,38,59,127, -9,12,10,2,-25,54,41,43,9,-43,6,3,-21,-1,-12,6,-47,48,-67,-43,-10,-34,127,21,-67,4,12,13,-1,30,4,4,1,-13,-33,61,7,0,19,72,37,-34,21,-33,-11,26,-29,5, 
  /* [0][1][][] */ -11,-29,-30,-4,29,-94,127,-85,-2,-1,56,40,127,23,-14,-32,-32,-21,15,44,76,-68,35,17,-48,127,-73,-4,127,-92,58,-127,-57,11,-54,11,14,-62,-39,-1,117,127,12,-103,-62,-56,-3,86, 86,-127,127,-7,127,94,-80,-59,34,127,127,-127,-87,127,127,127,127,127,111,127,127,118,-3,9,122,-96,-127,127,41,127,127,3,-127,127,127,127,-127,127,-127,-127,40,16,-127,-31,127,-127,-5,86, 21,31,-43,-12,-56,127,-126,111,90,-84,13,65,-37,8,3,-69,19,26,-127,12,15,-109,-50,3,74,-11,-20,109,-85,-38,38,-50,-11,15,76,-27,37,-8,-1,-78,114,28,21,40,-43,96,76,-65, 
  /* [0][2][][] */ -10,19,6,-28,6,-55,-24,-12,12,-5,1,4,-19,-9,-16,3,-24,4,1,-33,14,-23,86,-3,-90,6,36,10,18,-9,3,18,-19,-20,-50,19,-2,-7,25,26,-34,-9,6,7,-17,29,-17,15, 33,-3,-36,-26,25,60,113,-119,127,-41,-24,9,-76,-22,-33,-63,-9,82,-15,26,11,35,-24,-29,-66,64,68,3,-77,4,-27,-40,-27,-6,-33,14,56,-17,-7,98,-121,-38,-20,54,34,53,7,-113, -9,21,3,-25,-19,7,-13,-51,-18,-35,-19,3,3,-16,-13,15,35,32,-35,-18,-5,-10,-41,-5,27,-22,23,-12,-23,3,-11,-18,30,-26,-31,-49,-9,3,33,-7,-14,-3,-6,15,-11,6,49,-33, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012760293669998646, 0.010055514983832836, 0.049832314252853394, 0.012031147256493568, 0.010885345749557018, 0.033153608441352844, 0.0085829198360443115, 0.014539253897964954, 0.0030330165755003691, 0.013354132883250713, 0.0092099374160170555, 0.15511299669742584, 0.027552248910069466, 0.053147755563259125, 0.034319985657930374, 0.043508552014827728, 0.0085355238988995552, 0.0022553117014467716, 0.011860390193760395, 0.017300935462117195, 0.012825231067836285, 0.0098443077877163887, 0.0047895531170070171, 0.025937344878911972, 0.010663054883480072, 0.027553124353289604, 0.024347810074687004, 0.0098739759996533394, 0.014833572320640087, 0.018413824960589409, 0.0069319186732172966, 0.0038605195004492998, 0.0068223103880882263, 0.0094050075858831406, 0.0092192823067307472, 0.016940891742706299, 0.21991550922393799, 0.010694338940083981, 0.007128578145056963, 0.010012508369982243, 0.0073007121682167053, 0.0069858189672231674, 0.011154565960168839, 0.0078097674995660782, 0.017274625599384308, 0.0043729525059461594, 0.0028227793518453836, 0.0085140205919742584, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 1773, 3760, 12220, 1292, 1458, -2085, 3755, 9436, 3501, -565, 3013, -2199, 18609, -1715, 2313, 12034, -149, 2139, 159, 2736, 1971, 2813, 422, 27502, 5390, 3958, 13087, 1076, 4407, 4239, 464, 789, 1006, 1324, -503, 50, -2680, -279, 2319, 1651, 3226, 1296, 3475, 4669, 4463, 2186, 1752, 4436, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00032587969326414168, 0.00022779367282055318, 7.8645447501912713e-05, 0.0002585673937574029, 0.00029166811145842075, 0.00026130914920940995, 0.00020215405675116926, 0.00010149153240490705, 0.0001590875763213262, 0.00035738764563575387, 0.00027744370163418353, 0.00023972155759111047, 5.3475690947379917e-05, 0.00028965703677386045, 0.00023588167096022516, 8.1704813055694103e-05, 0.00055542698828503489, 0.00023046268324833363, 0.00037483888445422053, 0.00027083908207714558, 0.0003176005557179451, 0.00024747027782723308, 0.00039040963747538626, 4.1166902519762516e-05, 0.00015946365601848811, 0.00015820587577763945, 8.0168647400569171e-05, 0.00035515829222276807, 0.00017225154442712665, 0.00017320482584182173, 0.00054832961177453399, 0.00049369793850928545, 0.00029025549883954227, 0.00029737449949607253, 0.00036181387258693576, 0.00038782347110100091, 0.00022079241171013564, 0.00040535553125664592, 0.0002608501526992768, 0.00034961139317601919, 0.00021797792578581721, 0.00033240337506867945, 0.00023923339904285967, 0.00018608017126098275, 0.00017355418822262436, 0.0003142457571811974, 0.000383977429009974, 0.00017975569062400609, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 56,127,-66,-75,29,77,23,62, 
  /* [1][0][][] */ 51,-66,50,-127,-45,73,-76,-38, 
  /* [2][0][][] */ -19,127,115,29,101,3,31,14, 
  /* [3][0][][] */ 102,43,-68,77,5,-86,-127,-19, 
  /* [4][0][][] */ -36,19,12,-62,-19,124,127,46, 
  /* [5][0][][] */ 0,55,-127,-58,38,84,37,-46, 
  /* [6][0][][] */ 3,127,45,49,65,22,29,-92, 
  /* [7][0][][] */ 127,0,-18,33,25,-7,83,21, 
  /* [8][0][][] */ 43,127,67,104,112,73,97,-84, 
  /* [9][0][][] */ 33,93,-127,-73,2,89,9,55, 
  /* [10][0][][] */ -55,-51,17,-50,-1,-38,-40,127, 
  /* [11][0][][] */ 25,-101,-127,-1,21,-11,41,-6, 
  /* [12][0][][] */ -28,-119,-118,-33,-127,20,-62,43, 
  /* [13][0][][] */ -19,11,-97,95,-127,-17,11,-24, 
  /* [14][0][][] */ -60,-42,-127,-11,29,-5,-9,-61, 
  /* [15][0][][] */ 21,-89,-127,28,-93,-15,-20,-26, 
  /* [16][0][][] */ 127,-67,-19,66,-85,23,33,95, 
  /* [17][0][][] */ -29,119,127,-22,-48,-14,-26,-12, 
  /* [18][0][][] */ -2,-127,43,61,-17,-78,41,-86, 
  /* [19][0][][] */ 127,-50,-58,33,-94,1,44,106, 
  /* [20][0][][] */ -34,-127,78,70,-11,-87,5,-75, 
  /* [21][0][][] */ -9,-73,-12,-51,127,-22,44,13, 
  /* [22][0][][] */ -127,42,-99,51,61,55,-121,-111, 
  /* [23][0][][] */ -91,-49,66,-12,-110,127,126,-38, 
  /* [24][0][][] */ -34,69,14,-9,-26,127,91,30, 
  /* [25][0][][] */ -40,-96,-127,-57,-48,-10,-36,-36, 
  /* [26][0][][] */ -19,51,-17,127,-85,43,-43,3, 
  /* [27][0][][] */ 14,-127,49,88,13,-75,4,-124, 
  /* [28][0][][] */ 5,127,62,46,79,-19,22,-42, 
  /* [29][0][][] */ 122,21,-14,12,60,-127,-89,54, 
  /* [30][0][][] */ 15,-8,21,-127,17,-25,18,-23, 
  /* [31][0][][] */ 41,-40,9,62,-12,23,18,127, 
  /* [32][0][][] */ -57,-66,6,-91,-54,127,85,93, 
  /* [33][0][][] */ -42,38,39,-45,33,127,-102,67, 
  /* [34][0][][] */ 53,127,-111,-55,32,51,-84,61, 
  /* [35][0][][] */ -4,-127,41,51,-35,-53,41,-88, 
  /* [36][0][][] */ -14,-30,-80,-12,-127,-54,-15,4, 
  /* [37][0][][] */ -65,-127,82,94,-43,-86,-8,-37, 
  /* [38][0][][] */ -68,9,56,-79,-127,-95,-64,78, 
  /* [39][0][][] */ 65,-127,84,72,-6,-58,-11,-80, 
  /* [40][0][][] */ 9,58,30,32,-127,-26,-84,41, 
  /* [41][0][][] */ 95,127,-63,-101,61,30,9,12, 
  /* [42][0][][] */ -12,-22,-9,18,127,9,36,29, 
  /* [43][0][][] */ 127,37,92,22,-69,-28,59,103, 
  /* [44][0][][] */ 70,46,-24,3,82,-124,-127,-6, 
  /* [45][0][][] */ 45,17,20,15,65,-127,-10,-48, 
  /* [46][0][][] */ 48,-29,-4,127,31,48,15,73, 
  /* [47][0][][] */ -63,-74,39,67,-44,28,127,-55, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0038851303979754448, 0.0027157510630786419, 0.00093760923482477665, 0.0030826346483081579, 0.0034772607032209635, 0.0031153217423707247, 0.002410076092928648, 0.0012099797604605556, 0.001896638423204422, 0.0042607672512531281, 0.0033076775725930929, 0.002857954939827323, 0.00063753599533811212, 0.0034532847348600626, 0.0028121760115027428, 0.0009740829118527472, 0.0066217882558703423, 0.002747570862993598, 0.0044688205234706402, 0.0032289372757077217, 0.0037864267360419035, 0.0029503351543098688, 0.0046544549986720085, 0.00049079087330028415, 0.0019011220429092646, 0.0018861268181353807, 0.0009557688026688993, 0.0042341891676187515, 0.0020535790827125311, 0.0020649440120905638, 0.0065371734090149403, 0.0058858557604253292, 0.0034604195971041918, 0.0035452921874821186, 0.0043135369196534157, 0.0046236226335167885, 0.0026322822086513042, 0.0048326393589377403, 0.0031098495237529278, 0.0041680592112243176, 0.0025987278204411268, 0.0039629056118428707, 0.0028521351050585508, 0.0022184436675161123, 0.0020691091194748878, 0.0037464306224137545, 0.0045777703635394573, 0.0021430433262139559, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7284, 14546, -4770, 4894, -2592, 3345, -11482, -17947, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00027122639585286379, 0.00013269805640447885, 0.00016412901459261775, 0.00016246446466539055, 0.00019752784282900393, 0.00019065896049141884, 0.0002962028665933758, 0.00016327279445249587, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -48,-7,35,9,-36,-12,16,12,-41,-7,-64,-62,-25,-61,-14,-31,48,-44,40,43,-20,31,-42,11,4,-40,57,-17,2,-16,22,10,84,36,40,-127,22,0,-10,-39,3,-18,42,54,38,8,29,4, 
  /* [1][0][][] */ 2,34,66,-34,-6,39,-45,-34,-3,23,-7,-92,14,99,-12,53,-16,26,-15,-67,13,-75,-28,26,-75,-8,2,-108,-29,1,34,-57,46,73,-40,2,127,-27,-5,47,-35,45,-80,-29,122,-16,-28,-22, 
  /* [2][0][][] */ 0,-19,-56,14,-7,49,33,10,-12,46,2,22,59,-87,17,-70,36,-83,29,26,-23,56,-7,22,-19,53,-31,-57,9,7,23,-68,-44,-88,36,-31,108,20,-20,-55,2,28,80,28,127,14,16,26, 
  /* [3][0][][] */ -10,22,-68,46,16,-32,-61,-99,16,-21,-30,-1,7,34,34,76,-4,11,-36,25,4,-98,22,-48,-72,-7,127,-13,-51,0,-64,16,-5,-77,19,-4,-18,-31,-19,95,-41,-32,2,24,42,5,-34,47, 
  /* [4][0][][] */ -22,-45,-7,9,31,-29,-12,-4,26,-28,59,-78,7,32,8,8,-14,-21,17,-17,-2,-47,7,-18,13,-12,41,50,33,28,-13,24,-10,-9,-1,-2,-65,86,33,-23,24,-19,-18,-21,-73,8,127,13, 
  /* [5][0][][] */ 33,-17,1,18,29,-38,29,-127,22,-29,-13,114,-80,67,14,-59,-7,-85,14,0,-36,62,-31,-35,-59,75,-21,2,-10,56,-48,-29,23,53,37,-7,-34,-6,-40,-47,17,-32,-44,-9,-36,63,88,21, 
  /* [6][0][][] */ 55,-21,15,-7,-35,-13,-36,19,-33,9,-44,127,-41,-34,-9,57,8,44,22,31,37,-78,-17,25,20,41,-61,3,11,-39,11,31,9,19,-13,-2,17,1,-5,-5,-7,-16,40,58,0,-30,73,-8, 
  /* [7][0][][] */ -34,8,-6,58,25,28,3,35,26,5,76,-10,122,104,64,48,40,52,-18,2,16,-19,-92,-26,22,-11,-32,72,47,-22,-41,-16,35,11,45,-99,-79,37,42,55,-38,24,88,127,-67,-28,-119,54, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.011527121998369694, 0.0056396671570837498, 0.0069754826836287975, 0.0069047394208610058, 0.0083949333056807518, 0.008103005588054657, 0.0125886220484972, 0.0069390935823321342, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 13792, 2062, 2153, -1655, 1090, 1061, -478, 38696, -80, 278, 10949, 51578, 3506, 10277, -299, 10788, -2228, 12336, 1442, 6055, 14431, 1384, 2620, -8589, 9185, 2086, 5302, 10860, -2631, -278, -8405, 7409, 3429, -245, -210, 6235, -7835, 20236, -2301, 18563, 290, 1024, 6936, 3384, 1179, 110, 6483, -182, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.1384031141642481e-05, 9.2426220362540334e-05, 0.00018082531460095197, 0.00015747267752885818, 0.00088560214499011636, 0.00012212927686050534, 0.00018153138807974756, 8.2950813521165401e-05, 0.00015158460882958025, 9.2403242888394743e-05, 5.757916733273305e-05, 6.4757397922221571e-05, 7.9558943980373442e-05, 5.8908273786073551e-05, 0.00018667533004190773, 0.00024840378318913281, 0.00012846347817685455, 0.00035291066160425544, 0.00016045190568547696, 0.00013224546273704618, 0.00016225225408561528, 0.00043299916433170438, 0.00015155045548453927, 0.00031527929240837693, 0.00013126281555742025, 7.4893672717735171e-05, 5.4551383072976023e-05, 8.5555555415339768e-05, 0.00011331191490171477, 0.00086336751701310277, 0.00026481770328246057, 7.0322697865776718e-05, 9.3705013568978757e-05, 0.00012959905143361539, 0.00020238349679857492, 6.1400714912451804e-05, 9.7953605290967971e-05, 3.3500578865641728e-05, 0.00016530965513084084, 5.3888219554210082e-05, 0.00014242515317164361, 0.00011693378473864868, 6.696561467833817e-05, 0.00010681855928851292, 5.949901242274791e-05, 0.00052008562488481402, 5.4968641052255407e-05, 0.0002562814624980092, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -68,-59,18,-2,127,-53,94,-85,-81,-76,-20,-44,90,27,60,-127,57,-10,-2,-47,-127,110,-27,3,3,36,48,-6,116,-78,21,-55,-118,-85,36,64,21,98,127,-49,-123,-18,26,68,62,-127,103,64, -73,-127,-72,79,-79,98,59,-83,-62,53,106,-109,127,83,112,-78,-77,-90,31,-57,-101,127,-75,121,-77,109,91,-92,110,-55,5,-127,-54,-70,74,122,118,103,105,-73,-127,-86,62,103,89,112,102,70, -32,-30,-49,127,-43,-42,56,-28,66,29,55,-87,26,49,-7,-5,-74,-25,22,-30,24,11,-48,1,-105,33,26,-85,37,50,88,-84,41,11,0,53,72,40,34,9,-32,93,67,43,50,26,12,-107, 
  /* [0][1][][] */ -115,-77,-2,-86,-69,-87,82,-118,-127,-127,125,-84,66,31,-127,-62,127,-127,-63,-80,-97,91,-13,5,-9,72,93,-49,-84,-83,15,-44,-94,-127,-127,58,31,106,16,-103,46,-32,84,108,101,104,127,-127, -120,-108,-127,-112,-35,127,127,-127,70,79,127,-127,105,127,62,-88,43,-90,-127,-127,-87,72,-127,127,-127,127,127,-127,-127,127,-10,-102,-127,-98,44,127,127,127,0,-127,94,-113,127,127,127,-12,96,104, -70,-37,-111,122,63,-57,26,-12,48,35,-6,-49,21,71,80,-51,-5,9,-6,-48,-88,-4,-116,-14,-76,52,16,-109,-41,32,127,-100,-56,9,64,63,81,92,-10,-36,31,127,74,12,74,-51,19,38, 
  /* [0][2][][] */ -127,-15,34,7,-42,-35,9,-79,35,-47,16,-50,-7,23,-50,-21,-89,-18,94,-44,-7,17,-63,-26,12,34,74,3,36,57,0,29,-20,-94,-45,49,26,4,-70,-39,5,-26,27,49,28,59,25,-70, -94,-31,-21,-53,80,38,56,-69,90,21,-66,-63,-5,60,-105,-74,35,13,52,-75,-62,-6,-25,36,-51,58,81,-36,43,8,-35,-31,-81,19,-70,63,36,3,-84,-67,20,-53,70,63,45,-111,42,3, -42,-25,-56,-35,-29,-12,7,-30,-42,14,-39,-18,-5,42,57,-30,33,42,-8,-54,-71,38,7,-28,-41,-5,20,-44,3,-54,43,-15,-79,22,31,49,2,-23,-22,-37,-10,76,22,13,41,-8,14,41, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0026088212616741657, 0.0039281141944229603, 0.0076850759796798229, 0.0066925887949764729, 0.037638090550899506, 0.0051904944702982903, 0.0077150841243565083, 0.0035254093818366528, 0.0064423456788063049, 0.003927137702703476, 0.0024471145588904619, 0.0027521892916411161, 0.0033812550827860832, 0.0025036016013473272, 0.0079337013885378838, 0.010557160712778568, 0.0054596974514424801, 0.014998702332377434, 0.0068192058242857456, 0.005620432086288929, 0.0068957209587097168, 0.018402464687824249, 0.0064408942125737667, 0.013399370014667511, 0.0055786697193980217, 0.0031829811632633209, 0.0023184337187558413, 0.0036361110396683216, 0.0048157563433051109, 0.036693118512630463, 0.011254752054810524, 0.0029887144919484854, 0.0039824629202485085, 0.0055079595185816288, 0.0086012985557317734, 0.0026095302309840918, 0.0041630282066762447, 0.0014237746363505721, 0.007025660015642643, 0.0022902493365108967, 0.0060530686751008034, 0.0049696858040988445, 0.0028460384346544743, 0.0045397887006402016, 0.0025287079624831676, 0.02210363931953907, 0.0023361672647297382, 0.010891961865127087, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1029, -426, -295, 819, 11169, 1392, -289, 3091, 960, 976, 267, 2765, 799, 264, -719, 446, 2568, 8772, 2818, -689, 1157, -1381, -36, 2066, -264, -580, 1010, -97, 2637, 9007, 1302, -20, 356, -92, 2046, 88, 396, -181, 1007, 990, 1358, 2011, 254, -380, 525, 1654, 805, -90, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00052600668277591467, 0.00042308654519729316, 0.00035523175029084086, 0.00040984558290801942, 9.0027213445864618e-05, 0.00042388675501570106, 0.00069146498572081327, 0.0002784169337246567, 0.00040758555405773222, 0.00064368546009063721, 0.00041196992970071733, 0.00032043881947174668, 0.00028880557511001825, 0.00047738669672980905, 0.00033485854510217905, 0.00036398824886418879, 0.00029391486896201968, 0.00010805903730215505, 0.00026021714438684285, 0.00041211763164028525, 0.00040544659714214504, 0.00021012310753576458, 0.00055470986990258098, 0.00038652404327876866, 0.00055354740470647812, 0.00091116444673389196, 0.00045047173625789583, 0.0011894541094079614, 0.00029345357324928045, 0.00010254441440338269, 0.00050160667160525918, 0.00082909408956766129, 0.00049726269207894802, 0.00053766410565003753, 0.00036240273038856685, 0.00040368142072111368, 0.00048215873539447784, 0.00072757917223498225, 0.00043477152939885855, 0.00057793973246589303, 0.00042653313721530139, 0.00035209362977184355, 0.00039113446837291121, 0.00049010134534910321, 0.0005331551656126976, 0.00028554795426316559, 0.00035135709913447499, 0.00037142925430089235, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -23,24,-3,-22,-61,-20,-127,22, 
  /* [1][0][][] */ 76,-81,-69,-48,127,-93,113,31, 
  /* [2][0][][] */ -95,113,-44,-127,65,-28,-31,31, 
  /* [3][0][][] */ 40,9,84,8,75,127,116,-4, 
  /* [4][0][][] */ -51,-127,69,16,-34,-110,10,-45, 
  /* [5][0][][] */ 127,-16,80,71,-67,-19,-9,-17, 
  /* [6][0][][] */ 22,30,127,-26,34,-34,-38,30, 
  /* [7][0][][] */ 17,5,-127,-44,-47,106,88,-71, 
  /* [8][0][][] */ 1,127,-35,4,85,86,31,29, 
  /* [9][0][][] */ -4,123,-58,96,25,-127,25,103, 
  /* [10][0][][] */ -9,-114,-3,-36,-69,-127,-64,-72, 
  /* [11][0][][] */ -127,-90,111,54,-9,-65,96,60, 
  /* [12][0][][] */ -34,46,-127,94,35,-70,-79,99, 
  /* [13][0][][] */ 92,-127,82,82,6,33,33,-50, 
  /* [14][0][][] */ -89,105,-66,-122,-63,-127,-9,-57, 
  /* [15][0][][] */ 40,113,36,-21,34,-65,97,-127, 
  /* [16][0][][] */ -125,-127,-57,109,-59,25,-9,77, 
  /* [17][0][][] */ -27,-99,-127,58,-63,50,-47,68, 
  /* [18][0][][] */ -127,-66,-39,84,-27,75,-29,121, 
  /* [19][0][][] */ 60,-127,98,-119,19,-73,18,-35, 
  /* [20][0][][] */ -3,87,42,15,43,127,84,-3, 
  /* [21][0][][] */ 27,112,46,-37,42,-60,98,-127, 
  /* [22][0][][] */ 30,11,108,2,-3,127,32,-36, 
  /* [23][0][][] */ -96,-62,32,-75,83,90,-45,-127, 
  /* [24][0][][] */ -100,-94,54,-82,109,112,-62,-127, 
  /* [25][0][][] */ 127,8,-62,-14,13,26,-70,-10, 
  /* [26][0][][] */ -127,-38,-123,-20,-62,-29,22,-8, 
  /* [27][0][][] */ 82,31,-3,-57,-127,-22,82,93, 
  /* [28][0][][] */ -120,-114,21,55,-77,-127,13,-9, 
  /* [29][0][][] */ 99,109,35,-127,38,2,-82,-87, 
  /* [30][0][][] */ -76,-68,20,-53,66,84,-51,-127, 
  /* [31][0][][] */ 45,40,1,127,1,-83,10,22, 
  /* [32][0][][] */ -19,127,-6,38,30,70,-23,46, 
  /* [33][0][][] */ -34,127,-77,30,27,-27,-34,-7, 
  /* [34][0][][] */ -114,-127,-57,104,0,15,29,84, 
  /* [35][0][][] */ -58,127,-37,-9,64,109,64,72, 
  /* [36][0][][] */ 60,20,1,-48,-127,-24,97,114, 
  /* [37][0][][] */ -74,112,15,26,-127,96,-23,-98, 
  /* [38][0][][] */ 45,24,21,25,126,69,127,54, 
  /* [39][0][][] */ -24,-73,35,-13,0,38,-101,127, 
  /* [40][0][][] */ -80,-37,-52,127,-31,6,-3,57, 
  /* [41][0][][] */ 127,0,52,96,-59,-7,7,-28, 
  /* [42][0][][] */ -42,11,-75,-127,58,-122,3,74, 
  /* [43][0][][] */ 24,-3,96,1,35,127,95,9, 
  /* [44][0][][] */ -26,-26,-63,127,48,10,-37,-40, 
  /* [45][0][][] */ 62,121,105,-113,50,-64,-2,-127, 
  /* [46][0][][] */ -34,-127,-36,33,-15,40,-56,116, 
  /* [47][0][][] */ 50,30,127,6,79,120,115,-26, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0044960416853427887, 0.0036163318436592817, 0.0030363430269062519, 0.0035031547304242849, 0.00076950754737481475, 0.0036231717094779015, 0.0059102964587509632, 0.0023797685280442238, 0.0034838372375816107, 0.0055019007995724678, 0.0035213124938309193, 0.0027389505412429571, 0.0024685654789209366, 0.0040804622694849968, 0.0028622031677514315, 0.0031111892312765121, 0.0025122370570898056, 0.00092363450676202774, 0.0022242057602852583, 0.0035225751344114542, 0.0034655544441193342, 0.0017960270633921027, 0.0047413823194801807, 0.0033038139808923006, 0.0047314460389316082, 0.0077881771139800549, 0.0038504067342728376, 0.010166858322918415, 0.0025082940701395273, 0.00087649829220026731, 0.0042874827049672604, 0.0070866812020540237, 0.0042503522709012032, 0.0045956834219396114, 0.003097637090831995, 0.0034504665527492762, 0.0041212514042854309, 0.0062189823947846889, 0.0037162092048674822, 0.0049399393610656261, 0.0036457916721701622, 0.0030095200054347515, 0.0033432214986532927, 0.0041891406290233135, 0.0045571434311568737, 0.002440720796585083, 0.0030032244976609945, 0.0031747911125421524, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7776, -2793, 11823, -9252, 21284, 6988, -8118, 11383, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0001812000700738281, 0.00022911894484423101, 0.00018991858814842999, 0.00024839790421538055, 0.00016244940343312919, 0.00017055230273399502, 0.00014678659499622881, 0.0003139140026178211, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -16,-13,-19,-65,-31,-36,26,-20,36,7,-30,-11,112,127,-14,-106, 
  /* [1][0][][] */ 127,-60,-42,17,-51,71,-65,-43,-46,83,-35,-52,-9,2,-58,-15, 
  /* [2][0][][] */ -43,-93,43,32,50,-56,-75,-24,32,-88,29,-127,46,-23,-72,19, 
  /* [3][0][][] */ 33,13,11,12,-5,64,-53,-23,127,41,8,21,10,-13,4,22, 
  /* [4][0][][] */ -94,-46,-29,-127,-7,42,61,-121,38,-20,-59,-39,-115,32,-42,-18, 
  /* [5][0][][] */ 96,63,72,-18,52,-52,-127,-127,-19,-73,72,44,-58,52,68,-46, 
  /* [6][0][][] */ 100,47,-119,-86,35,-81,-3,-97,-43,18,-127,101,97,-99,8,68, 
  /* [7][0][][] */ -127,-1,93,-25,-53,1,-6,-52,-43,58,79,-28,60,-25,31,25, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0077010025270283222, 0.0097375549376010895, 0.0080715399235486984, 0.010556910187005997, 0.0069040996022522449, 0.0072484724223613739, 0.0062384302727878094, 0.013341344892978668, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 19815, -423, -94, 2130, -1101, -37, 11097, 1098, 690, 187, -1635, 2509, -4118, -1314, -351, -327, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00011524219735292718, 0.00035366805968806148, 0.00016994783072732389, 0.00016842100012581795, 0.0013826120411977172, 0.0010896916501224041, 0.00016029759717639536, 0.00090508145513013005, 0.0002494927030056715, 0.0012590257683768868, 0.00023637988488189876, 0.00023082300322130322, 0.00013219134416431189, 0.00021585631475318223, 0.0002645057684276253, 0.0016111844452098012, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-1,8,6,-18,12,14,17,-1,-12,0,-16,-2,-4,-1,-5, 7,-11,-2,5,14,-1,16,-25,-8,9,-7,77,-5,23,-1,-3, 5,-4,-6,3,5,-13,-1,12,-1,2,-6,-8,-6,-4,2,-1, 
  /* [0][1][][] */ 13,-11,0,8,127,-23,-127,-21,127,127,-9,-2,109,-20,-1,-25, -127,127,127,4,-87,-90,-22,-101,12,-106,127,127,127,127,127,127, 22,4,1,4,-8,127,-5,-10,-4,-12,-14,-7,7,-2,-3,-12, 
  /* [0][2][][] */ 3,-4,-3,-14,-18,16,54,7,-6,-8,3,-2,-5,5,-7,-16, 27,-8,-11,-127,6,-16,-20,127,-5,1,-2,-18,-5,-53,-10,-42, 4,-1,-4,-2,2,-4,-12,-2,-1,2,-3,4,7,-3,-1,-16, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0048977932892739773, 0.015030891634523869, 0.0072227828204631805, 0.0071578924544155598, 0.058761011809110641, 0.046311896294355392, 0.0068126474507153034, 0.038465961813926697, 0.010603439994156361, 0.053508594632148743, 0.01004614494740963, 0.0098099773749709129, 0.0056181321851909161, 0.0091738933697342873, 0.011241494677960873, 0.068475335836410522, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -133, 102, 714, 503, 35010, 45500, 4613, 8248, 3114, 8867, 717, -198, 3840, 5047, 141, 22245, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00026611139765009284, 0.0018004466546699405, 0.00039693122380413115, 0.00020538599346764386, 4.2211773688904941e-05, 3.4238033549627289e-05, 0.00016957806656137109, 3.3530308428453282e-05, 0.00027339992811903358, 4.2658652091631666e-05, 0.00066940108081325889, 0.0014458934310823679, 0.00048718179459683597, 2.0658551875385456e-05, 0.0012580211041495204, 5.5304197303485125e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -82, -106, -28, 
  /* [0][1][][] */ 68, -34, 18, 
  /* [0][2][][] */ 34, 127, 20, 
  /* [1][0][][] */ 106, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -96, -80, 
  /* [3][0][][] */ 122, 127, 58, 
  /* [3][1][][] */ 3, -21, -14, 
  /* [3][2][][] */ -100, -127, -44, 
  /* [4][0][][] */ 15, -56, 13, 
  /* [4][1][][] */ 15, -127, 17, 
  /* [4][2][][] */ 5, -80, 10, 
  /* [5][0][][] */ -63, 25, -6, 
  /* [5][1][][] */ -127, 25, -6, 
  /* [5][2][][] */ -93, 14, -12, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -52, 55, -16, 
  /* [6][2][][] */ -37, -53, -89, 
  /* [7][0][][] */ 30, 24, -23, 
  /* [7][1][][] */ 127, 81, -2, 
  /* [7][2][][] */ 35, 15, -10, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -60, 96, 
  /* [9][0][][] */ -23, 46, -9, 
  /* [9][1][][] */ -16, 127, -11, 
  /* [9][2][][] */ -2, 99, -8, 
  /* [10][0][][] */ 25, 87, 12, 
  /* [10][1][][] */ -36, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -18, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -79, 79, 5, 
  /* [13][0][][] */ 74, 16, -22, 
  /* [13][1][][] */ 127, 100, -11, 
  /* [13][2][][] */ 91, 121, 47, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -70, -21, 24, 
  /* [15][1][][] */ -118, -127, 20, 
  /* [15][2][][] */ -25, -72, 2, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.08162214607000351, 0.55223608016967773, 0.12174741923809052, 0.062996342778205872, 0.012947266921401024, 0.01050154771655798, 0.052013274282217026, 0.010284473188221455, 0.083857692778110504, 0.013084334321320057, 0.2053198367357254, 0.44348689913749695, 0.14942923188209534, 0.0063364263623952866, 0.38586238026618958, 0.016962997615337372, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,120,120,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11699328571557999, } };
const TfArray<1, int> quant46_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,120,120,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,121,121,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.083878703415393829, } };
const TfArray<1, int> quant50_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.078872650861740112, } };
const TfArray<1, int> quant53_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10909097641706467, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.076508119702339172, } };
const TfArray<1, int> quant58_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.081150606274604797, } };
const TfArray<1, int> quant61_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.09547126293182373, } };
const TfArray<1, int> quant62_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.081675022840499878, } };
const TfArray<1, int> quant65_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.1190619096159935, } };
const TfArray<1, int> quant66_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,30,30,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.079339206218719482, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,30,30,18 } };
const TfArray<1, float> quant69_scale = { 1, { 0.37578177452087402, } };
const TfArray<1, int> quant69_zero = { 1, { 34 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,30,30,18 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension44, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension46, 115200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension47, 691200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 702768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension49, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 345600, (TfLiteIntArray*)&tensor_dimension50, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension51, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension53, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension55, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension57, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 221808, (TfLiteIntArray*)&tensor_dimension58, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension59, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension61, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension62, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension63, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 100800, (TfLiteIntArray*)&tensor_dimension65, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension66, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension68, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16208, (TfLiteIntArray*)&tensor_dimension69, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

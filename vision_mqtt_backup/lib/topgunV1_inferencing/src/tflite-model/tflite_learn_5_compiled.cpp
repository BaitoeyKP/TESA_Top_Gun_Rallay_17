/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.11.2023 04:15:01

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1410816;
#else
constexpr int kTensorArenaSize = 1409792;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,240,240,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032602844294160604, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[18] = { 23117, -28710, -23706, -26868, -36560, -35105, -30943, -43578, -34165, -40574, -26424, -24953, -32434, -42402, -22722, -42612, -22700, -39805, };
const TfArray<1, int> tensor_dimension2 = { 1, { 18 } };
const TfArray<18, float> quant2_scale = { 18, { 0.00031972108990885317, 0.00033691994030959904, 0.00040003229514695704, 0.00035855371970683336, 0.00026438949862495065, 0.00027194377616979182, 0.00031228133593685925, 0.00022148764401208609, 0.00027472127112559974, 0.00023403600789606571, 0.00036714161979034543, 0.00038457871414721012, 0.00029774478753097355, 0.00023060676176100969, 0.000424890749854967, 0.00022456969600170851, 0.00042156051495112479, 0.00024236740136984736, } };
const TfArray<18, int> quant2_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[18*1*1*32] = { 
  /* [0][0][][] */ 59,-19,-32,39,-30,-17,-46,5,-42,-54,-3,-89,11,51,7,-24,-1,-26,94,-27,36,-58,-35,-24,-31,3,-6,-4,-44,-24,127,-23, 
  /* [1][0][][] */ 46,-3,-29,-6,9,11,-46,36,66,-27,-40,-18,6,-51,-25,44,19,-51,-105,-45,61,65,64,16,-16,-51,-41,34,-127,5,-55,30, 
  /* [2][0][][] */ -1,-2,-51,-26,31,47,-46,57,-50,2,-3,-56,-11,-1,48,13,6,32,-127,56,-63,40,22,25,-64,-34,-12,-30,-42,-22,-73,65, 
  /* [3][0][][] */ 31,31,-65,59,56,-22,-31,-34,-28,-1,54,61,30,18,31,27,9,-8,-54,39,-53,-1,-91,48,-77,-20,-12,37,-127,-18,-11,50, 
  /* [4][0][][] */ -28,-10,78,-127,11,-19,84,96,40,37,50,-105,3,-64,-40,34,6,83,-100,74,-63,-56,32,-25,-70,-3,-94,-121,29,49,-4,-77, 
  /* [5][0][][] */ 45,80,-89,-74,-40,-33,-78,5,69,59,-82,-104,-100,37,-2,87,-63,65,-97,25,60,-24,92,45,-82,12,-102,-34,-127,57,-44,53, 
  /* [6][0][][] */ 69,-11,52,-10,-45,2,-4,34,-2,57,-54,-26,32,-27,-49,66,-53,-3,-10,73,45,34,55,-71,-127,-58,58,33,55,53,-78,29, 
  /* [7][0][][] */ -63,127,40,-121,0,-6,-75,5,59,-41,120,67,50,-43,42,55,10,40,-75,-56,70,-14,-78,-62,-101,4,-67,71,-16,-91,-68,45, 
  /* [8][0][][] */ -43,62,56,13,-22,29,-59,-65,76,8,-99,-56,-44,-78,92,-12,-6,4,-40,9,34,41,3,-27,-8,74,-31,-18,-53,21,-127,-19, 
  /* [9][0][][] */ -49,34,47,6,14,89,-84,-81,107,-27,81,-12,-94,-79,-23,-57,-23,68,-41,27,61,61,29,-54,-127,23,73,11,-14,-58,-106,-13, 
  /* [10][0][][] */ 14,-19,-15,5,-6,14,-45,44,15,-24,4,-39,7,-56,12,-32,13,-4,-70,9,37,-32,-9,49,-60,81,51,55,-23,40,-127,-31, 
  /* [11][0][][] */ 47,26,53,39,-57,-39,58,13,-2,22,-25,-14,-82,27,24,29,35,-29,-74,-35,-15,54,16,5,-127,-27,46,55,-49,-12,-51,37, 
  /* [12][0][][] */ -79,36,-95,51,48,-34,1,-31,-67,16,-58,45,-120,-50,62,-4,12,56,-15,81,10,71,33,49,-27,94,3,-61,-23,-11,-127,-60, 
  /* [13][0][][] */ 6,-5,90,117,-49,-22,-81,-81,117,27,26,-45,3,-53,59,127,-10,72,-76,3,-47,76,-36,6,-57,-29,-46,-35,-42,-12,-110,36, 
  /* [14][0][][] */ 46,57,-33,-32,-2,11,34,12,-40,28,51,-7,-60,-19,-25,-11,58,22,-87,41,-12,12,-24,-21,-127,60,-25,-39,-40,37,-109,12, 
  /* [15][0][][] */ 20,-45,83,-117,9,60,51,77,-78,15,-55,34,-18,-102,93,43,-48,-25,-115,-10,51,30,68,-105,-84,61,-70,-67,82,108,-127,-47, 
  /* [16][0][][] */ 67,-26,-11,34,-19,47,16,-4,9,-39,-49,-20,-13,-15,12,-5,-33,2,-34,-46,-29,63,1,45,-127,-10,-15,17,23,-14,-124,31, 
  /* [17][0][][] */ -21,2,-16,-52,-58,-56,0,49,3,62,75,-90,-37,44,103,-66,-35,96,-127,-56,89,-68,70,79,-66,-75,4,-83,-89,-50,-68,-20, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 18,1,1,32 } };
const TfArray<18, float> quant3_scale = { 18, { 0.0047573056071996689, 0.0050132167525589466, 0.0059523000381886959, 0.0053351176902651787, 0.0039339964278042316, 0.0040464005433022976, 0.004646605346351862, 0.0032956362701952457, 0.0040877284482121468, 0.0034823501482605934, 0.0054629016667604446, 0.0057223578914999962, 0.0044303080067038536, 0.0034313246142119169, 0.0063221827149391174, 0.0033414957579225302, 0.006272630300372839, 0.0036063175648450851, } };
const TfArray<18, int> quant3_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -39, -674, -1120, 1103, -637, 103, -353, 94, -1528, -1142, 38, -1017, 848, 999, 46, -1108, -219, -327, 4212, -270, 428, -686, -425, -96, 2213, 455, 94, -229, -424, -1054, 4702, -811, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 8.0258643720299006e-05, 7.4822608439717442e-05, 5.839484219904989e-05, 5.6026812671916559e-05, 4.1339942981721833e-05, 6.1246559198480099e-05, 9.1226400400046259e-05, 6.676094199065119e-05, 5.6326873163925484e-05, 5.2420120482565835e-05, 6.1374288634397089e-05, 6.4558516896795481e-05, 6.8728462792932987e-05, 4.821123366127722e-05, 5.8781897678272799e-05, 5.3931293223286048e-05, 6.4628067775629461e-05, 8.0186284321825951e-05, 8.5543972090817988e-05, 6.3801191572565585e-05, 6.1599777836818248e-05, 7.9029785410966724e-05, 5.4968204494798556e-05, 8.3065351645927876e-05, 7.3119612352456897e-05, 7.8530953032895923e-05, 6.9205700128804892e-05, 6.1438942793756723e-05, 7.1817419666331261e-05, 4.6032437239773571e-05, 7.8109856985975057e-05, 5.5317952501354739e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -29,-31,62,10,59,10,-39,-62,32,-58,-74,-4,38,-2,-37,34,-14,-16,-37,-28,-42,-86,24,80,-69,-14,43,-2,72,-4,-11,-53,48,-27,-41,32,-54,-76,-75,17,56,-37,-48,70,45,-83,67,1,-7,-125,-18,20,-32,-28,-24,68,50,47,72,-51,-63,46,-59,28,6,36,24,60,24,61,48,-64,66,-127,32,63,-47,2,-24,25,33,18,49,32,-19,-57,-38,48,9,52,-7,-47,13,31,20,-12, 
  /* [1][0][][] */ -69,28,-47,-4,-12,56,17,-16,64,-53,-63,58,40,-33,-43,37,81,-16,34,85,-17,-21,32,28,45,1,-22,67,8,-27,52,-38,30,42,-11,13,49,37,-47,-50,-36,7,-2,-73,-20,55,-9,-19,-23,-57,76,43,9,39,-72,-39,-3,57,58,45,-29,34,-24,-50,-20,-18,30,9,50,21,10,-12,-72,77,-48,4,71,0,-30,52,-44,55,-24,-127,5,73,-51,-41,34,51,49,-1,28,54,8,-15, 
  /* [2][0][][] */ 22,20,-34,82,-42,-62,56,79,-68,58,-29,115,75,-20,60,-89,-35,-25,-60,44,-99,11,94,13,-48,45,87,0,-56,36,20,73,-49,-36,-62,-87,-42,81,84,3,-110,-120,12,3,-76,52,-27,-58,92,-45,36,-54,-36,25,10,38,-59,84,-68,-9,-26,56,-41,41,46,18,33,52,-87,73,0,-66,47,-106,29,8,-49,-12,21,26,32,-126,-32,22,13,-127,-1,-5,39,86,-9,20,-32,-26,-57,-31, 
  /* [3][0][][] */ 76,25,34,-7,-31,64,-69,20,24,28,47,-3,94,85,46,21,98,112,-40,34,93,-73,-26,-72,-32,-78,-38,127,73,-52,87,10,-34,-9,6,16,-38,-50,19,60,10,-79,-77,21,45,-11,-33,-34,96,-112,72,-79,99,37,87,-60,-79,-55,-82,-67,-75,58,-4,81,76,30,-51,-2,7,-59,5,112,36,-119,67,-23,33,78,91,-37,-49,-85,53,92,46,26,-16,-93,-38,64,2,-65,74,-66,-56,43, 
  /* [4][0][][] */ 40,94,-15,50,-38,-30,27,22,62,89,-20,43,15,-51,-24,-75,-29,-7,-72,7,106,-102,72,14,-21,-8,64,-75,-59,32,-75,-61,66,104,3,-104,-59,-12,-112,46,-55,-67,-78,-104,21,102,22,57,24,-56,-12,-84,-103,36,-92,6,38,-104,6,4,14,-88,-35,-77,-57,41,6,-49,17,-109,-110,-99,-70,17,91,36,51,-22,-16,-70,-2,-57,-103,-62,-15,58,78,5,-127,-79,35,34,29,110,-120,-19, 
  /* [5][0][][] */ 69,-50,88,76,52,-84,20,67,-23,-95,8,-34,36,39,30,41,60,41,-44,71,-60,11,15,-4,-124,-34,10,-57,50,46,26,-52,-52,10,-43,24,-82,1,60,37,-74,-20,48,87,-88,12,47,-1,-127,40,35,38,53,-36,27,-25,89,63,-21,1,46,-59,13,-36,6,70,-1,37,51,26,10,-43,-11,47,7,-35,-13,-94,-7,69,94,8,64,118,-38,-43,-48,21,59,-118,73,77,6,-13,23,-103, 
  /* [6][0][][] */ 47,-11,65,43,-54,-44,2,19,-30,-17,-6,-47,51,50,50,-42,17,-12,-21,51,-57,-39,72,36,-36,-36,-19,-15,-23,-83,-2,-72,-31,-31,-10,-77,-12,15,-71,26,20,44,12,8,-47,65,-26,-32,-42,21,-55,-62,25,-127,23,17,0,-1,-16,44,-79,-1,-39,-39,-46,54,30,-5,32,6,-43,-7,49,-71,-36,-26,-43,-48,-22,-2,19,-34,19,-40,-11,-22,-13,-45,48,31,68,26,-21,-29,31,-25, 
  /* [7][0][][] */ 71,19,-8,-6,-46,53,4,-1,-1,1,-78,20,41,-62,27,50,27,-27,-16,69,-14,16,-3,63,-68,76,-5,26,-58,50,-23,-2,22,14,44,48,-62,86,-12,-37,64,-8,62,46,33,-24,87,-77,-41,-22,-111,1,-2,46,19,22,127,-62,28,-38,3,2,-41,-64,-66,-52,41,23,-87,34,33,66,76,21,37,61,-62,26,-88,29,69,-28,-2,-40,55,-14,-56,49,60,-12,61,57,-17,-61,-7,-74, 
  /* [8][0][][] */ -2,37,-28,-89,53,5,-64,31,-15,31,14,111,19,-38,-84,-51,-56,87,-66,10,-27,-22,51,96,-107,56,52,73,-52,38,-79,84,55,-26,25,10,109,-28,28,89,47,-4,-98,-85,-6,-66,-14,90,35,-36,-34,-13,-53,-32,-50,-86,-13,109,-94,112,76,41,-1,84,-2,-35,7,65,-51,25,1,-8,68,24,31,-50,-22,62,43,45,19,54,-127,-111,40,-6,49,-13,-14,-63,-90,80,-77,-82,-64,73, 
  /* [9][0][][] */ 38,-55,93,38,75,-101,-42,-88,50,101,-34,53,-13,-54,-73,-35,25,21,-47,-49,-6,78,-62,-72,99,30,6,26,-8,-93,-44,62,73,32,40,-29,-49,-21,-48,-35,77,-96,40,-85,116,-22,-51,19,83,-17,-60,-45,50,-90,-43,111,120,-51,-22,-37,-127,84,17,-73,-63,44,94,32,-66,101,100,-39,24,24,-100,-104,-63,-69,-19,84,15,7,122,-8,-56,-89,33,23,72,31,-7,99,119,4,15,-44, 
  /* [10][0][][] */ -1,26,63,-28,13,86,92,38,-23,42,21,-16,98,62,-15,10,-3,87,-42,-19,-82,33,50,-29,46,50,-74,-94,-21,32,-54,-22,80,90,115,53,-29,59,-12,42,-28,93,-55,-48,-83,-14,35,-55,30,37,41,-74,67,26,-81,-7,-87,13,46,-39,5,38,98,55,99,-77,-49,-10,43,-2,-81,-34,82,127,-58,41,-35,74,2,8,67,2,81,-62,-74,78,55,-59,32,-12,-17,-35,-50,-89,-44,-36, 
  /* [11][0][][] */ 59,17,-32,77,62,82,34,-14,69,78,-72,89,-4,-68,-21,-68,2,-62,93,24,5,33,-28,-111,-64,-54,-22,29,49,-37,26,19,-56,-47,36,46,-30,69,-28,-65,7,95,-95,-58,-53,-71,-58,-35,80,42,94,0,-84,-30,-5,23,-44,-52,-14,-74,-66,63,122,10,26,25,-60,0,96,55,-64,-52,22,52,-127,11,-86,24,-44,-6,-88,15,-66,-85,-4,-33,11,-3,-99,-22,10,-106,-52,-41,-52,-35, 
  /* [12][0][][] */ 2,37,-18,12,51,40,-26,43,-30,41,-9,32,-43,27,89,-50,-73,-32,-27,-48,49,15,11,52,-8,-23,67,-68,54,44,-24,94,-30,-47,-35,15,21,-22,48,33,77,30,-68,-5,-30,-39,-24,77,-42,-127,-16,103,37,75,-39,51,8,-45,50,59,17,101,28,42,75,21,-25,79,65,63,34,65,49,107,-5,39,-29,34,-35,-79,-21,80,18,65,-24,99,68,106,-38,-37,64,37,51,-21,62,98, 
  /* [13][0][][] */ 88,-9,71,70,84,111,67,18,72,-102,47,-54,60,60,40,-33,-99,-48,-13,12,108,-40,88,-56,-25,27,7,22,-73,-53,81,47,24,95,-30,43,-82,-46,27,31,-58,83,-63,-9,-31,127,-29,-22,76,118,-28,-109,-97,83,95,-96,-44,4,-9,-64,-22,99,-28,8,-39,-62,-93,86,-3,-43,107,-8,-115,57,-82,-26,-75,79,62,-84,35,-65,58,7,-91,-25,78,117,-15,-21,-54,18,92,-44,79,48, 
  /* [14][0][][] */ -40,-22,69,61,77,-1,-4,-80,-54,7,57,83,0,-68,-72,-57,-15,-16,6,37,-31,38,-22,62,-69,-24,-18,19,-70,-90,-40,34,91,-21,-26,24,89,103,23,-74,18,-68,41,62,33,-76,55,-60,127,27,72,127,83,-10,-45,1,-42,30,48,64,20,-42,-23,62,-57,-27,68,-63,-58,-58,-60,80,16,92,34,-72,54,-40,23,37,47,-18,-78,-98,-77,-59,-78,106,68,-3,68,-28,58,109,-8,12, 
  /* [15][0][][] */ -25,-42,-22,66,84,-35,40,-72,69,8,-76,33,80,-16,-115,-118,62,-6,-98,31,27,-4,56,104,116,51,27,83,21,15,57,-81,32,-16,-55,20,-4,68,60,-44,30,40,-32,-28,64,-102,-27,-77,-39,-127,46,63,-78,-93,-52,-4,51,44,-34,86,-98,-34,4,85,-7,70,-83,-35,-60,14,61,-40,0,-46,26,-93,35,81,79,54,-64,67,-91,-4,-117,-55,-55,46,50,60,-122,-30,48,95,-72,108, 
  /* [16][0][][] */ -75,16,63,-70,54,45,-39,-24,32,-7,-60,2,-19,-63,-91,-31,67,50,59,30,93,12,-20,33,-23,-15,-42,53,-63,8,28,-34,-97,27,2,29,-16,-1,-105,-74,2,-18,40,54,14,101,57,8,-81,-54,6,86,-15,54,9,-11,-14,46,71,15,101,32,-30,27,54,5,-51,64,13,29,-36,-33,4,38,35,46,16,70,-89,-13,6,-69,25,-127,6,25,42,-20,61,16,-26,61,6,-25,-29,-25, 
  /* [17][0][][] */ 45,-78,21,48,-6,-77,-30,-27,32,-23,44,48,73,37,-60,26,19,42,42,75,-50,9,5,-19,26,54,-51,20,66,-40,-12,46,-2,-1,32,15,-14,68,-32,0,-41,-48,-5,-32,15,-27,70,-62,59,80,2,12,-7,24,28,-30,-63,61,-57,-71,24,-54,23,60,-35,-54,41,-60,-59,8,63,32,20,-29,-35,-5,64,-15,7,-16,8,-17,-30,-127,-68,35,33,-33,11,44,-53,-55,0,58,-6,7, 
  /* [18][0][][] */ -68,73,39,-37,6,-64,-34,-16,33,15,13,-60,-36,45,62,-16,-10,-4,42,-21,127,-14,6,-67,20,-40,13,49,34,57,27,41,30,-18,-47,-23,-14,52,7,19,-21,44,-28,4,-21,40,-32,12,10,80,66,38,-31,58,108,36,-2,11,-2,-68,61,66,69,47,-19,-53,8,78,64,-77,-2,96,-75,18,-25,43,45,9,8,-49,-22,54,-16,68,41,4,75,31,-20,-5,-34,31,67,16,108,46, 
  /* [19][0][][] */ -10,-10,56,34,63,-81,54,43,74,-21,-4,-27,-63,-1,-77,15,49,-94,127,54,-1,28,-27,13,75,-29,17,-38,-49,-97,-14,2,65,-55,29,4,33,-48,-77,-81,38,-88,-50,-4,-43,-11,69,-47,-65,29,16,31,-10,-8,9,-13,50,54,10,-70,43,-48,55,46,-17,-2,-34,-26,-43,52,48,-6,-43,-90,-61,-60,-23,-59,1,78,39,-77,30,40,-95,-9,-8,-46,90,53,1,33,-11,63,44,-46, 
  /* [20][0][][] */ -18,48,58,83,-61,50,36,75,9,8,-42,50,19,72,67,-47,-28,-8,-69,-13,7,-1,-51,-39,50,-52,-48,22,21,34,-38,87,71,25,7,37,34,1,38,-51,-53,-27,-43,-52,-21,-43,-50,85,64,-127,-95,34,49,91,76,19,75,78,62,92,114,-12,-83,-12,-16,-61,-4,13,-62,-33,-36,43,-19,-33,45,43,73,42,92,92,74,-7,32,53,60,102,22,87,-19,63,17,65,21,14,-26,34, 
  /* [21][0][][] */ 44,53,57,-62,73,-41,34,17,3,-37,-55,27,15,7,-50,-41,-47,-5,22,1,51,-37,48,-27,31,-58,1,58,18,-2,3,-25,-7,12,-50,-42,84,26,-98,-4,-4,-20,14,7,-81,-72,-27,81,-21,-83,21,49,29,-3,-71,9,-51,48,-18,86,17,-42,-1,-7,70,28,-22,-31,-69,4,18,37,29,-55,55,-15,-51,-22,50,71,12,35,30,-61,30,-127,7,-36,-59,40,54,-51,-23,-7,17,-41, 
  /* [22][0][][] */ 34,-34,-29,-62,45,-76,68,91,-44,52,-63,-41,114,-65,-60,-66,35,38,-126,-48,90,-30,31,24,71,-1,-80,81,-58,-65,-70,-104,34,59,28,15,9,4,-2,-74,-14,-60,-3,84,60,-127,103,12,-123,-75,-37,15,-63,-104,-19,47,22,-16,-48,8,83,-38,-114,-114,-60,20,-61,-31,76,109,4,1,-28,-4,71,-84,34,-79,76,98,88,-95,-65,-51,75,30,79,15,-60,20,-28,69,50,45,-68,73, 
  /* [23][0][][] */ 40,-18,-1,27,51,-43,8,-49,56,-21,14,38,9,-50,-14,-14,59,-6,-20,58,55,-43,44,-16,-16,7,28,35,42,32,48,-32,-22,27,4,33,58,-16,-62,-2,-41,15,0,-63,-46,-70,62,33,65,9,-43,4,32,-35,-46,36,-43,-15,49,22,-36,-43,-30,-3,18,26,-58,-48,50,-15,62,-35,-4,-8,-23,-77,43,-14,42,59,-28,-13,2,-127,55,15,54,-10,-47,12,65,-8,61,-11,-26,44, 
  /* [24][0][][] */ -70,3,-68,-44,-47,-76,-24,-51,104,75,89,22,60,56,4,-70,-39,32,28,-29,127,-31,-38,-37,53,3,60,45,65,62,26,-25,19,8,22,58,2,-41,48,-10,-46,-49,38,21,32,-26,8,51,-25,34,37,117,39,90,71,-56,-7,29,1,20,82,40,92,59,-43,68,-8,-38,-11,14,-5,28,-37,57,60,86,85,-19,-22,-71,-47,17,-61,-72,-5,63,17,3,45,-6,7,-58,9,89,43,36, 
  /* [25][0][][] */ -54,-22,-35,15,47,-32,-43,35,42,-54,-11,16,45,-11,-60,3,-11,30,31,-49,64,59,-2,-37,8,-23,-49,31,56,-31,24,86,45,-83,21,44,65,-14,19,6,-58,86,-34,6,55,54,12,43,-56,64,-39,63,35,-40,-35,5,-35,41,-69,40,127,15,59,34,6,20,7,2,-47,18,-12,-75,21,-60,42,38,51,43,17,34,45,31,-32,35,-37,-17,-64,-48,-25,-3,66,15,-68,4,1,-42, 
  /* [26][0][][] */ 24,-110,-7,9,-70,-14,-2,-3,-86,-127,56,65,-40,-23,7,-4,106,24,-33,-34,-2,59,73,-4,-9,12,21,37,37,20,-69,27,-39,-36,-34,-63,-43,70,-9,82,-81,84,32,16,-49,3,-19,92,5,-34,-13,-36,17,-4,26,-31,77,45,19,-6,28,-72,107,3,86,-1,-14,31,-43,72,39,43,60,-57,-47,7,-11,-111,-60,15,-13,58,65,11,57,-49,-50,-13,-50,98,25,10,-16,65,6,95, 
  /* [27][0][][] */ -13,25,-32,-77,-73,-46,-52,-10,21,47,8,-80,-5,29,41,2,74,8,25,-31,-87,-11,18,3,-85,7,-55,26,59,35,-44,-17,12,51,-52,-82,-33,-97,-83,76,-77,47,22,36,36,1,59,103,69,-41,21,-76,-54,-47,-17,-25,52,6,-44,-43,-18,-57,-19,40,51,-12,-69,83,28,13,-92,2,55,-127,12,-106,52,-51,84,88,65,-31,89,-64,-31,-46,-21,27,-42,-4,-12,-35,-10,2,47,11, 
  /* [28][0][][] */ 92,-39,71,33,-102,-42,-108,-28,-34,-45,36,41,-52,-15,73,65,62,40,-114,36,-33,51,-49,-55,-97,60,-47,-39,-43,-42,-21,10,-75,29,72,-6,-29,-58,10,32,-24,35,-46,33,-59,2,19,32,-28,-67,-47,7,-63,28,-39,47,12,-8,14,37,-29,-56,-31,-15,34,53,-4,48,-40,42,-62,-10,34,-14,3,-108,-102,-127,-10,44,-42,-123,101,-90,44,-63,24,-41,-45,-21,-2,-33,-82,8,-76,-116, 
  /* [29][0][][] */ 42,4,54,-49,-114,13,-127,-2,98,-22,-90,-82,76,-101,-55,-51,-72,64,-2,-80,-75,-37,42,-15,-21,-8,-58,-39,-107,-33,101,24,36,-9,-92,-68,-22,74,7,80,6,112,-50,57,5,95,-63,-24,-40,-67,36,28,54,-90,88,30,-97,36,-72,105,-103,81,-89,-54,-63,-83,38,71,89,-73,19,-91,83,20,36,31,94,-52,-51,20,-15,-87,-34,-44,44,108,36,57,-66,66,56,60,-101,1,0,35, 
  /* [30][0][][] */ 38,-4,-29,18,-23,17,12,-4,23,-51,100,-55,-69,49,70,35,-21,24,47,-64,99,-61,-59,-9,-39,-2,-33,56,37,1,5,50,-72,-27,-66,18,-16,-1,40,9,62,6,-3,60,78,11,33,33,-53,107,89,-56,83,96,77,50,-2,-28,-47,-15,-37,15,50,27,-39,-36,-8,81,52,25,42,33,-69,89,53,50,-37,-53,-56,-33,32,101,-53,17,-44,101,-53,51,42,-12,52,25,-33,-20,127,-2, 
  /* [31][0][][] */ 54,-74,44,78,80,85,-63,-91,-67,-11,-101,-71,90,-102,-74,87,-46,-69,96,56,-2,-21,-5,127,56,-83,29,39,-40,-73,58,69,20,37,-57,3,83,-26,-109,-103,65,-47,-21,17,1,-53,32,19,13,-28,116,-62,-76,-34,-99,20,-97,59,70,95,-125,-28,65,-50,94,104,-60,-59,53,-86,-109,23,-69,-7,1,-35,-47,-17,4,55,-59,1,102,-10,43,54,-88,14,41,-75,-75,-47,-6,50,-18,-60, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0034109922125935555, 0.0031799608841538429, 0.0024817807134240866, 0.0023811394348740578, 0.0017569474875926971, 0.0026029786095023155, 0.0038771219551563263, 0.0028373401146382093, 0.0023938920348882675, 0.002227855147793889, 0.0026084072887897491, 0.0027437368407845497, 0.002920959610491991, 0.002048977417871356, 0.0024982306640595198, 0.0022920798510313034, 0.0027466928586363792, 0.0034079169854521751, 0.0036356186028569937, 0.0027115505654364824, 0.0026179905980825424, 0.0033587657380849123, 0.0023361486382782459, 0.0035302774049341679, 0.0031075836159288883, 0.0033375655766576529, 0.0029412421863526106, 0.0026111551560461521, 0.0030522402375936508, 0.0019563785754144192, 0.0033196688164025545, 0.0023510130122303963, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 553, 52, 1898, 2458, 1500, -1021, 2046, -788, -1331, -377, 2811, -1235, 1587, 2679, 1300, 1961, -409, -273, -341, 1704, 2451, -639, 550, -559, -477, 1182, 535, 961, 2904, 1325, 2442, 963, 609, 1554, 2335, 1714, -494, 1026, 1828, -1621, -18, 735, -158, 1258, -270, 683, -651, 347, -2701, 1333, 718, -1560, 4594, 316, 1752, 592, 705, 1117, -288, -1184, 340, 1028, 806, 2548, 2709, 1166, 1511, 3837, 3599, -645, 2250, 3786, 1072, -309, 3428, 5497, 491, -2481, 67, 268, 5381, 1338, -361, -433, 527, 897, 556, -1449, 1704, -496, 2370, 601, 100, -1549, 461, 1187, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00025009311502799392, 0.00044709190842695534, 0.00029900102526880801, 0.00028497821767814457, 0.00036773885949514806, 0.00040512552368454635, 0.00024237700563389808, 0.00029354926664382219, 0.00025250221369788051, 0.00044626728049479425, 0.00026542018167674541, 0.00038616734673269093, 0.00029937879298813641, 0.0002734834561124444, 0.00035248871427029371, 0.00024280388606712222, 0.00048347897245548666, 0.00039847503649070859, 0.00049846788169816136, 0.00030259406776167452, 0.00030093852546997368, 0.00032308039953932166, 0.0003251219168305397, 0.00032264197943732142, 0.00036663585342466831, 0.00044662298751063645, 0.00029747007647529244, 0.00036414965870790184, 0.00028249440947547555, 0.0003741348918993026, 0.00019579219224397093, 0.00036995275877416134, 0.00042354123434051871, 0.00035796914016827941, 0.00024399404355790466, 0.00032295825076289475, 0.00031335363746620715, 0.0004252724174875766, 0.0002854531048797071, 0.0003029645886272192, 0.00034606343251653016, 0.00030430586775764823, 0.00019695852824952453, 0.00030220107873901725, 0.00042050718911923468, 0.00022082668147049844, 0.00032496266067028046, 0.00032320487662218511, 0.00024700450012460351, 0.00038978728116489947, 0.00045417388901114464, 0.00028244670829735696, 0.00018138004816137254, 0.0002342480729566887, 0.00033974874531850219, 0.00040432228706777096, 0.00032310548704117537, 0.00026859273202717304, 0.00056799623416736722, 0.00031523924553766847, 0.00037554441951215267, 0.00027574034174904227, 0.00035239959834143519, 0.00026594646624289453, 0.00021990267850924283, 0.00035702504101209342, 0.00021699380886275321, 0.00020071941253263503, 0.00018231871945317835, 0.00036470443592406809, 0.00020710576791316271, 0.0002243628550786525, 0.000272396020591259, 0.00047779278247617185, 0.00022545915271621197, 0.00017732706328388304, 0.00030800828244537115, 0.00026558493846096098, 0.00034971075365319848, 0.00030051812063902617, 0.0001532819151179865, 0.00030308906571008265, 0.00039530851063318551, 0.00043812330113723874, 0.00031493979622609913, 0.00031919364118948579, 0.00037289250758476555, 0.00026599565171636641, 0.00035106760333292186, 0.00038086762651801109, 0.00026598660042509437, 0.00031458010198548436, 0.00036319484934210777, 0.00026475416962057352, 0.0003782780549954623, 0.00033528250060044229, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -35,78,-105,34,50,-39,94,88,-93,38,65,-124,88,127,-104,51, 
  /* [1][0][][] */ -32,4,-46,-20,-24,44,28,-127,49,-50,-34,-62,-16,-35,-47,20, 
  /* [2][0][][] */ -38,-49,34,95,24,15,-127,112,-29,21,103,-89,-6,-59,-52,97, 
  /* [3][0][][] */ 98,-85,87,-24,1,-35,-45,127,-27,53,52,30,1,83,10,-5, 
  /* [4][0][][] */ -41,-34,-10,53,-83,21,-26,-127,26,14,47,-28,29,26,61,96, 
  /* [5][0][][] */ 127,24,-9,-44,-71,20,24,69,6,10,54,65,106,28,-56,-12, 
  /* [6][0][][] */ 18,-40,-51,-85,-58,-8,-13,-7,-73,-39,-35,6,57,67,127,6, 
  /* [7][0][][] */ -53,31,-27,-74,-7,-59,-73,43,-127,62,-66,-45,-120,-40,-7,91, 
  /* [8][0][][] */ 40,25,71,15,44,-5,75,-7,77,-18,50,43,-127,-52,-80,15, 
  /* [9][0][][] */ -34,65,38,-64,-36,-24,51,3,-41,51,-31,15,50,127,37,29, 
  /* [10][0][][] */ 73,68,-36,26,-44,-14,36,-58,-97,-31,-56,-44,-127,-66,17,65, 
  /* [11][0][][] */ 46,-13,72,17,-21,-35,8,97,-107,38,-22,32,-16,-16,60,127, 
  /* [12][0][][] */ -58,-92,9,6,21,-18,122,47,-64,58,29,-3,11,95,-29,127, 
  /* [13][0][][] */ -5,39,-5,23,64,8,127,73,-78,55,-96,-28,6,33,-105,14, 
  /* [14][0][][] */ -111,127,-13,-38,44,8,60,38,-41,-26,66,-48,-74,11,-71,53, 
  /* [15][0][][] */ -7,-19,-127,-56,63,-79,-101,-61,-48,-15,-32,-85,16,-48,-48,30, 
  /* [16][0][][] */ 97,-15,10,6,37,-33,22,-35,-8,18,127,23,48,-5,-38,3, 
  /* [17][0][][] */ 6,21,-52,-67,-45,-67,115,-127,-16,-15,-34,33,47,67,12,61, 
  /* [18][0][][] */ 14,78,8,-6,39,-47,-32,-30,-4,127,0,-31,4,40,-13,-20, 
  /* [19][0][][] */ -45,-127,97,-61,7,-75,22,-38,22,89,53,21,51,26,50,9, 
  /* [20][0][][] */ -17,83,55,3,-11,11,17,-49,48,7,75,22,-127,-57,-63,-2, 
  /* [21][0][][] */ -64,50,18,-20,59,5,70,77,-127,64,-50,44,-31,15,-52,-45, 
  /* [22][0][][] */ 14,-97,32,2,12,-109,127,1,-13,-31,-20,-54,45,-107,-74,-26, 
  /* [23][0][][] */ -55,-118,66,61,12,7,14,-44,19,-26,51,-41,35,94,85,127, 
  /* [24][0][][] */ -25,-30,53,90,37,9,-25,-127,95,45,-19,38,-8,9,-34,-23, 
  /* [25][0][][] */ -27,22,25,-46,-19,-12,32,-10,-22,56,-42,-10,17,127,31,2, 
  /* [26][0][][] */ -63,88,13,-6,16,-53,10,-36,23,9,-2,62,6,-11,-89,127, 
  /* [27][0][][] */ -26,-127,-41,17,-77,110,13,-67,18,-28,65,-24,29,-61,-107,-24, 
  /* [28][0][][] */ -34,-2,28,70,12,18,-26,-127,-112,36,96,18,60,-2,-46,-27, 
  /* [29][0][][] */ -127,81,-24,-10,-3,26,-94,-38,-37,-32,7,15,-20,-65,-116,62, 
  /* [30][0][][] */ 63,89,-36,73,-127,-74,-81,2,-30,-6,10,-124,124,37,-27,63, 
  /* [31][0][][] */ 127,19,-61,-15,-69,-7,106,27,-103,14,87,73,52,18,-40,33, 
  /* [32][0][][] */ -28,-35,127,8,-36,35,55,8,-21,17,7,33,10,77,80,31, 
  /* [33][0][][] */ 1,5,-46,-7,-26,11,127,-6,3,45,24,-51,76,99,-9,64, 
  /* [34][0][][] */ -77,-13,121,26,15,-92,121,-40,-127,89,31,-57,64,106,-24,-49, 
  /* [35][0][][] */ 6,-3,-54,23,-63,81,-36,-17,-20,127,2,66,-37,57,34,39, 
  /* [36][0][][] */ 5,-81,127,-36,-77,28,-29,-46,38,35,-56,102,13,-105,-36,55, 
  /* [37][0][][] */ 74,-23,72,-16,83,-79,-34,47,-68,127,-60,5,-81,-24,91,7, 
  /* [38][0][][] */ 52,55,-2,-70,3,-71,-86,91,-78,48,-85,-12,-105,-127,-114,77, 
  /* [39][0][][] */ -85,14,-34,-8,-74,-57,69,13,-127,-13,23,44,55,15,-29,33, 
  /* [40][0][][] */ 127,36,0,-54,-57,62,6,-22,-69,-18,-14,-66,3,31,-39,63, 
  /* [41][0][][] */ 110,-59,-56,-35,-16,-17,-49,-35,36,-3,11,-33,127,-76,46,-45, 
  /* [42][0][][] */ -8,-97,-43,127,11,-103,-116,33,9,11,21,42,-95,108,-64,5, 
  /* [43][0][][] */ -107,-71,-54,-127,-58,0,3,76,39,-122,-31,26,6,-49,-41,122, 
  /* [44][0][][] */ -38,19,23,-23,-25,-16,27,60,81,-58,84,127,65,18,-17,2, 
  /* [45][0][][] */ 35,84,-91,101,108,-127,-61,-62,102,-76,94,-84,23,35,-66,74, 
  /* [46][0][][] */ -30,-64,1,-6,108,-29,26,13,-7,115,-20,-127,12,80,-50,66, 
  /* [47][0][][] */ 73,-23,-42,-20,49,-2,-15,-39,-20,127,-30,27,-12,-126,-91,22, 
  /* [48][0][][] */ -9,25,7,-96,-40,-47,126,-127,9,1,-32,31,60,90,14,42, 
  /* [49][0][][] */ -38,111,-53,63,35,-35,31,78,-31,35,47,-85,-18,60,127,-87, 
  /* [50][0][][] */ 5,34,-2,16,-127,-5,-67,-37,35,84,29,33,-29,-28,6,27, 
  /* [51][0][][] */ 127,-94,-88,-1,-31,95,-122,-37,82,-33,-30,109,-76,-104,-16,80, 
  /* [52][0][][] */ -21,-57,16,82,-47,-98,-127,-35,-62,-55,-16,-52,25,-13,42,99, 
  /* [53][0][][] */ -2,76,84,-103,22,127,99,-16,9,-18,-33,-37,91,-94,18,65, 
  /* [54][0][][] */ 13,127,0,4,14,-69,-65,33,27,-48,-43,114,65,83,6,38, 
  /* [55][0][][] */ -9,-18,56,15,50,-23,86,112,-76,-14,26,-16,127,73,-2,-7, 
  /* [56][0][][] */ 127,25,5,34,-25,89,-85,-85,-16,23,-120,-8,-83,109,19,26, 
  /* [57][0][][] */ -61,-50,-34,-8,-70,-99,48,-31,-127,-11,49,76,15,8,0,55, 
  /* [58][0][][] */ 51,-46,56,27,31,-52,-22,-10,40,-17,-127,-38,20,-23,-16,34, 
  /* [59][0][][] */ 58,-7,-105,82,4,44,73,-11,-53,-20,44,-87,-105,-80,12,127, 
  /* [60][0][][] */ -10,18,-23,38,-24,-36,-23,12,-38,-31,60,127,-51,-114,-34,12, 
  /* [61][0][][] */ 0,45,114,-123,-95,92,13,112,12,-114,34,44,116,-22,10,127, 
  /* [62][0][][] */ 103,38,-16,-127,-48,-32,28,-41,-45,89,-1,91,38,-25,-113,-72, 
  /* [63][0][][] */ -23,-15,21,26,-120,-55,-38,-31,-83,3,-41,22,127,-17,60,-9, 
  /* [64][0][][] */ 22,-14,-17,67,-98,-46,-19,-94,36,127,45,-4,47,-69,-69,117, 
  /* [65][0][][] */ -66,-31,-12,-7,-74,57,26,-25,46,-78,127,-57,78,63,-124,73, 
  /* [66][0][][] */ -111,112,-101,-105,52,-32,-127,-29,-120,92,97,-5,-114,-50,37,33, 
  /* [67][0][][] */ 2,-21,-127,-116,73,72,13,-28,-31,-10,47,-21,26,5,3,45, 
  /* [68][0][][] */ 124,61,-15,-60,-84,83,-2,67,-45,78,127,-71,13,-42,-108,-31, 
  /* [69][0][][] */ 61,-78,60,-50,20,-64,-12,127,-5,71,72,33,-12,58,-31,-6, 
  /* [70][0][][] */ 60,-4,127,73,42,9,116,-3,59,39,-58,82,-73,74,-99,7, 
  /* [71][0][][] */ 4,21,90,-85,-127,-85,25,-2,-20,-19,23,-93,-87,-7,6,41, 
  /* [72][0][][] */ -42,-111,17,-127,58,-22,3,64,-101,2,-105,-26,57,113,-55,112, 
  /* [73][0][][] */ 16,7,31,41,100,-108,-45,10,-28,103,-80,26,-64,-44,127,8, 
  /* [74][0][][] */ -116,-15,-114,-25,30,-11,-19,37,-109,23,-97,-1,-38,-78,-65,127, 
  /* [75][0][][] */ 85,-36,35,-21,30,2,-127,-22,-6,-118,65,11,-1,-6,14,-8, 
  /* [76][0][][] */ 10,-31,-20,72,16,56,45,-59,53,-84,54,127,8,-54,-55,11, 
  /* [77][0][][] */ -25,-29,64,-19,17,-51,-16,-127,7,-12,15,97,44,9,31,22, 
  /* [78][0][][] */ -42,-4,4,-44,13,-36,25,-33,11,-1,21,-51,-121,-76,-127,-54, 
  /* [79][0][][] */ -115,-127,-39,39,98,-2,-31,65,2,49,26,31,-54,-76,-97,7, 
  /* [80][0][][] */ 38,-110,19,88,-20,-65,-127,105,-63,4,68,-9,-89,-10,0,82, 
  /* [81][0][][] */ 125,62,-31,115,-25,16,58,124,9,74,121,110,127,-18,98,-13, 
  /* [82][0][][] */ -52,-4,21,-36,53,-127,-92,-90,14,74,-41,-64,-7,83,-91,-4, 
  /* [83][0][][] */ 64,-37,104,-9,-32,-24,-127,2,21,-107,19,-33,-8,23,-8,-28, 
  /* [84][0][][] */ 1,-69,-77,36,127,52,39,72,-101,29,-92,-14,6,-70,-103,28, 
  /* [85][0][][] */ 10,65,73,9,69,-37,-22,-127,125,-30,6,-7,100,-55,51,0, 
  /* [86][0][][] */ 103,-13,127,46,2,-31,93,41,-48,-37,-98,-62,25,30,-44,6, 
  /* [87][0][][] */ -16,16,22,-115,63,-39,-58,51,19,-37,92,-42,-111,-127,12,30, 
  /* [88][0][][] */ -59,-41,57,11,13,16,-74,-56,6,25,-61,-127,-28,-23,6,-14, 
  /* [89][0][][] */ -74,7,47,-62,28,12,-127,39,88,30,-50,12,-36,-89,-66,-49, 
  /* [90][0][][] */ 6,-31,-59,-99,127,17,-101,45,34,69,58,-8,52,15,-80,-21, 
  /* [91][0][][] */ -44,-42,17,50,-22,-15,-29,127,-49,-75,38,-21,-46,59,6,122, 
  /* [92][0][][] */ -1,97,4,6,-34,80,-81,23,-37,-5,78,5,-22,127,42,34, 
  /* [93][0][][] */ -10,58,-39,-54,48,75,-73,-16,64,68,83,105,-127,7,-27,47, 
  /* [94][0][][] */ 9,68,105,42,-127,-70,-9,-10,42,-38,30,-24,-76,-29,31,-64, 
  /* [95][0][][] */ -14,28,62,44,118,-10,-99,98,24,46,-64,90,-9,29,127,-74, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.002039843937382102, 0.0036466324236243963, 0.0024387531448155642, 0.0023243785835802555, 0.002999402116984129, 0.003304340410977602, 0.0019769086502492428, 0.0023942869156599045, 0.002059493213891983, 0.0036399064119905233, 0.002164856530725956, 0.0031497112940996885, 0.0024418344255536795, 0.0022306232713162899, 0.0028750170022249222, 0.0019803903996944427, 0.0039434176869690418, 0.0032500969246029854, 0.0040656724013388157, 0.0024680593051016331, 0.0024545560590922832, 0.0026351527776569128, 0.0026518041267991066, 0.0026315769646316767, 0.0029904057737439871, 0.0036428077146410942, 0.0024262664373964071, 0.0029701273888349533, 0.0023041197564452887, 0.0030515703838318586, 0.0015969472005963326, 0.0030174595303833485, 0.0034545452799648046, 0.0029197169933468103, 0.0019900978077203035, 0.0026341564953327179, 0.0025558180641382933, 0.0034686652943491936, 0.0023282519541680813, 0.0024710814468562603, 0.0028226100839674473, 0.002482021227478981, 0.0016064601950347424, 0.0024648539256304502, 0.0034297986421734095, 0.0018011368811130524, 0.0026505051646381617, 0.0026361679192632437, 0.0020146521274000406, 0.0031792365480214357, 0.0037043953780084848, 0.002303730696439743, 0.0014793968293815851, 0.0019106062827631831, 0.0027711053844541311, 0.0032977890223264694, 0.0026353574357926846, 0.0021907328628003597, 0.0046327691525220871, 0.0025711976923048496, 0.0030630670953541994, 0.0022490313276648521, 0.0028742901049554348, 0.0021691492293030024, 0.0017936005024239421, 0.0029120168182998896, 0.0017698747105896473, 0.0016371352830901742, 0.0014870529994368553, 0.0029746524523943663, 0.0016892245039343834, 0.0018299791263416409, 0.0022217538207769394, 0.0038970392197370529, 0.001838920870795846, 0.0014463394181802869, 0.0025122195947915316, 0.0021662004292011261, 0.0028523588553071022, 0.0024511271622031927, 0.0012502190656960011, 0.0024720965884625912, 0.0032242694869637489, 0.0035734814591705799, 0.0025687552988529205, 0.0026034510228782892, 0.0030414371285587549, 0.002169550396502018, 0.0028634257614612579, 0.0031064848881214857, 0.002169476356357336, 0.0025658213999122381, 0.0029623396694660187, 0.0021594243589788675, 0.0030853634234517813, 0.002734677167609334, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 12247, 9000, -6470, 1557, 802, 4482, 3707, 1202, 7573, 970, -7484, 8824, -12195, 3244, 3671, 9197, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.1427541620796546e-05, 9.3045724497642368e-05, 5.1845527195837349e-05, 6.3242085161618888e-05, 7.1332331572193652e-05, 7.9216355516109616e-05, 9.2455782578326762e-05, 9.9460761703085154e-05, 0.00012788118328899145, 0.0001529981818748638, 7.6269738201517612e-05, 9.6013769507408142e-05, 0.00011743461072910577, 0.00011792351142503321, 9.4535491371061653e-05, 0.00011981497664237395, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -127,59,70,-36,-76,-9,-80,-12,-39,-18,-13,-16,8,41,-24,-28,65,43,103,45,-22,-35,121,53,6,9,6,53,-75,-113,-102,-2,-76,-47,42,-34,31,52,-14,49,-19,2,-86,78,-60,-19,-17,86,-54,-29,-67,41,76,-14,18,-44,-113,-17,-47,51,73,26,36,8,-62,-79,-82,25,-88,-76,13,-7,-27,2,-64,-89,-25,19,-13,-8,-68,79,108,-84,15,101,-11,26,42,-31,-33,20,-21,-21,-92,22, 
  /* [1][0][][] */ 33,31,2,-47,-54,-2,-27,-1,-7,-36,63,-32,-18,-11,-96,-22,78,49,-72,34,-55,-64,8,36,-46,-63,-7,-59,40,-87,87,-61,52,36,29,64,41,46,-57,-20,26,20,5,26,29,87,-127,-54,-67,-61,-36,9,72,-47,-36,34,-13,-12,-47,23,30,22,33,-87,-32,-21,-76,2,11,-31,-76,-22,-74,-7,28,-63,32,39,39,-91,-34,-44,-56,-33,53,-8,-46,-9,-33,20,-71,78,34,61,-67,67, 
  /* [2][0][][] */ 79,-11,-44,-6,32,-116,102,20,-16,18,-72,10,-105,-80,26,-90,-122,-49,-43,73,6,-25,-34,54,-18,-81,14,36,-53,40,-61,127,-67,99,-83,-62,-49,21,-25,-70,-104,90,81,68,-104,-6,32,-7,14,35,20,-4,81,-10,-12,88,3,-23,75,0,30,52,-15,32,104,56,-30,13,-22,119,9,20,93,42,67,26,-7,-58,115,96,87,-10,-87,58,-74,27,25,102,23,4,-27,25,-55,79,-16,38, 
  /* [3][0][][] */ -17,13,-34,35,9,-1,-4,-64,-32,65,24,38,26,-4,-49,38,9,-36,49,-2,37,127,37,-54,19,2,0,-3,73,-68,71,-9,0,24,-37,5,8,77,10,-16,-80,-29,-24,43,-23,40,33,6,-20,-64,7,-16,69,-99,-38,-45,-5,82,-46,41,0,-20,-57,4,26,42,-28,16,-42,-6,11,-69,-25,-71,20,-15,26,-30,-59,-7,-27,-22,-62,28,-14,-35,40,-10,-6,25,41,-9,63,18,-37,67, 
  /* [4][0][][] */ 79,-44,-39,12,44,35,-29,-3,-62,85,81,-19,40,-4,-2,-70,-19,-44,-51,44,30,-42,81,99,-63,26,-127,67,-39,-47,16,64,-67,-56,36,123,36,36,41,-22,-61,-42,49,-44,-39,8,-18,54,-64,72,-21,36,2,6,-83,9,80,-5,16,-14,42,12,12,14,-39,37,-11,20,-54,19,-106,25,35,-80,-49,-50,27,-41,-53,20,-66,95,-99,4,-51,52,40,-41,49,45,26,-32,-75,-61,74,16, 
  /* [5][0][][] */ -91,16,30,56,30,-1,20,-31,-12,9,41,-53,23,-10,3,-41,14,-18,56,35,-108,-24,-56,41,-32,-3,68,-7,24,-127,5,26,73,120,-17,102,-46,29,26,26,-36,67,67,-69,3,65,47,-5,-7,6,-14,8,-15,-46,46,-68,-1,-41,-42,-50,50,78,-50,-24,80,-50,-79,-73,-19,-16,-22,18,-18,27,-5,-30,70,-42,-56,-28,105,-27,26,-72,-89,56,54,-9,-43,64,24,-10,-27,20,41,89, 
  /* [6][0][][] */ -16,-5,-59,5,-13,-71,82,87,-33,37,6,82,-127,-50,58,40,-43,-53,-9,-18,-11,-19,-40,-47,3,38,38,40,22,-15,65,-69,41,4,4,-118,-31,19,23,79,-6,-11,-49,-64,2,-42,-64,17,25,-68,4,39,12,15,-20,-40,59,29,18,-17,-95,27,-31,4,5,24,-14,28,30,36,-1,-25,-6,44,75,43,32,-39,12,-62,-7,-71,-52,29,5,-112,24,-3,-60,26,60,52,-39,12,-28,94, 
  /* [7][0][][] */ 48,6,-4,-41,0,-51,36,1,-62,31,-3,-75,14,-11,20,-30,-57,-25,-25,43,16,111,-8,38,-8,53,18,61,39,35,66,11,-11,7,2,37,32,13,46,2,-67,-6,-14,-55,24,-61,50,-10,18,-40,-108,-55,-110,28,38,-8,22,25,-42,16,-8,96,72,-13,-12,-4,-10,36,-24,-2,-127,51,13,86,-52,33,-37,68,14,-74,-41,-35,31,-52,37,-3,-15,-57,-20,81,-38,-19,31,-56,-18,8, 
  /* [8][0][][] */ -3,100,-97,102,-54,-7,-85,-3,-90,-30,3,-9,-35,51,39,78,47,-53,6,20,29,2,27,0,-67,63,26,12,-46,-10,-32,-17,20,-36,-12,-22,-65,22,-3,-10,-1,-36,29,64,-57,-20,51,3,-37,-44,58,123,18,-39,-68,112,-46,21,-12,-20,-32,-14,-44,47,-29,-62,-48,6,-31,8,32,-4,-16,-45,-127,-10,-32,15,-87,-20,-34,4,-41,-9,-4,44,15,32,62,99,-64,2,-85,-111,33,-62, 
  /* [9][0][][] */ -4,6,-21,9,-4,-28,47,61,-15,52,-31,83,4,-24,5,64,-8,2,34,-3,3,9,40,-62,-23,13,5,20,12,-32,17,40,-59,-12,-10,-127,15,-7,-8,-40,-12,16,24,-2,-3,-20,-5,-2,26,55,31,3,-16,-44,-3,-13,-7,-23,43,10,-57,28,-14,-9,59,-8,-4,11,-77,37,36,53,13,68,-9,-11,-27,15,-15,-17,30,-14,44,-2,4,-6,-16,-5,-36,-11,-11,-22,37,24,-37,-10, 
  /* [10][0][][] */ 63,10,-2,29,-48,-10,71,3,-18,5,24,-34,-48,3,12,3,-84,-33,24,2,70,18,31,-17,-7,85,18,-35,-65,-60,-23,36,46,-36,30,42,58,-72,75,70,28,-60,10,-23,-33,-90,-28,53,47,84,-49,-63,-49,-4,-12,49,34,-60,66,95,-14,21,-57,-16,-1,-61,23,44,11,-34,-15,43,127,50,14,-54,39,-79,30,-13,-48,36,62,35,-43,12,9,39,-44,6,51,8,32,64,-21,-17, 
  /* [11][0][][] */ -84,-7,53,-62,17,26,-35,-27,65,-33,5,8,-39,-12,32,12,-8,28,60,0,-26,37,-58,-81,48,7,-9,59,43,-100,50,-50,31,8,0,-3,-68,31,-107,31,-63,36,-25,-21,13,-3,-13,-76,-13,3,-59,-52,27,12,69,-49,-56,-41,23,-57,-49,-33,24,-87,-16,-47,31,41,58,30,45,-17,-39,-32,44,-38,127,28,24,24,14,-15,-8,41,56,8,2,-35,-78,-101,-24,45,44,43,42,74, 
  /* [12][0][][] */ 54,19,-1,-29,16,79,1,13,31,52,-9,80,-9,46,-16,-1,-47,25,20,62,92,0,60,-78,36,21,-86,-94,-66,84,-10,-18,16,-28,-8,-117,25,-9,-9,-47,36,-32,27,94,-56,32,7,25,-47,14,29,33,21,-52,-7,35,23,54,28,44,31,-74,19,-92,-1,61,-35,-45,-11,-30,94,12,13,36,28,80,-44,34,-56,-21,-14,46,127,2,-10,46,-22,-27,52,9,-64,43,74,34,-25,-106, 
  /* [13][0][][] */ 26,9,-30,-11,-5,-23,31,-27,-23,-22,-31,-28,81,-77,-35,-84,-43,-26,-72,-9,-76,-16,26,93,-23,30,54,7,-12,-14,29,64,13,-38,-92,37,-32,-42,48,-111,90,12,-7,41,-17,-71,56,10,50,5,-19,21,-9,10,0,72,83,-35,-5,44,46,32,25,-67,16,24,-9,39,-59,-10,-41,11,-45,28,-31,-46,-127,5,15,64,-12,32,7,-71,55,-3,26,22,-27,48,23,-7,-39,24,-2,-23, 
  /* [14][0][][] */ -70,40,-111,-51,120,58,-96,8,85,-72,19,5,17,-51,-44,-120,-36,54,31,119,23,-23,-50,1,-32,50,-31,82,-1,-27,-33,3,77,-16,-41,-90,16,58,51,-11,80,-13,17,109,10,-46,106,-42,-29,-30,-6,9,114,31,-26,22,-39,71,-117,44,-12,-82,35,-119,-27,-58,-97,23,-127,98,-3,93,-14,-22,-39,-90,31,0,-9,-6,31,-3,-27,-17,-3,51,-40,-55,-12,72,69,39,17,-24,-104,-77, 
  /* [15][0][][] */ -50,-35,62,-41,16,-38,-16,-35,0,50,-12,54,4,-47,50,70,-127,-29,28,-57,46,-22,-13,-52,67,2,26,-33,-24,-76,-41,14,-64,49,44,-77,8,-40,40,-7,8,9,18,-28,-29,-40,55,61,-13,-15,46,-67,-49,39,5,-48,-62,4,105,-7,-42,24,-69,40,-29,11,21,6,50,-32,74,-13,37,-36,-12,-29,3,21,55,23,9,63,41,8,-35,-42,-77,30,-23,-47,-57,7,16,-23,1,39, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0021856704261153936, 0.0039544431492686272, 0.0022034349385648966, 0.0026877885684370995, 0.0030316240154206753, 0.0033666950184851885, 0.0039293705485761166, 0.0042270822450518608, 0.0054349498823285103, 0.0065024225041270256, 0.0032414637971669436, 0.004080585204064846, 0.004990970715880394, 0.0050117489881813526, 0.0040177581831812859, 0.005092136561870575, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -921, 93, 1646, -2879, -895, 2473, -1371, 138, -1726, -3917, 753, -2840, -283, 13137, 11167, -6000, 15425, 647, -9317, -1008, 4357, -5282, -1328, 865, 499, -6946, -4251, -1174, -1289, -8536, -431, -488, 910, -2598, -5808, -535, -3200, -2444, -1088, 12564, 2689, -258, 3777, -1074, 10650, 15513, -2437, 14278, 856, 7558, 2475, -4922, -275, -2326, 3408, 14331, -4113, 2404, 19050, 6147, 8472, 10370, 9733, -6872, 6878, 427, -4189, 2829, -8969, -3412, 3462, -1515, 16526, -7093, -217, 14586, -1472, -1135, 10580, -924, -1859, 15176, 1616, 1529, 16689, -1510, -5824, -6395, -8447, -1523, 14074, -81, 49, 2019, -892, -10752, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00046615689643658698, 0.00020007886632811278, 0.0001205422668135725, 0.0002602011663839221, 0.00023004434478934854, 0.00037162954686209559, 0.00031186643172986805, 0.0002517514512874186, 0.00018080841982737184, 0.0001725315087242052, 0.00019021202751901001, 0.0002625087508931756, 0.0002819837536662817, 0.00012796568626072258, 0.00011645765334833413, 0.00011692378029692918, 0.00015064585022628307, 0.00043435662519186735, 8.0214340414386243e-05, 0.00010589931480353698, 0.00018049994832836092, 0.00030345909181050956, 0.00030565587803721428, 0.00014422755339182913, 0.00062507938127964735, 0.00012736725329887122, 0.00030759332003071904, 0.00025053700665012002, 0.00017584266606718302, 7.9459241533186287e-05, 0.00030744692776352167, 0.00026056088972836733, 0.00034458542359061539, 0.00011835741315735504, 0.00021513941464945674, 0.00025538975023664534, 0.00015179230831563473, 0.0001795375719666481, 0.00032516857027076185, 0.00014534227375406772, 0.00017909274902194738, 0.0001893017761176452, 0.00025569964782334864, 0.00028325969469733536, 0.00011412612366257235, 7.4572650191839784e-05, 0.00026597213582135737, 8.769478154135868e-05, 0.00023111664631869644, 9.3953160103410482e-05, 0.00017368615954183042, 0.00013887690147385001, 0.0001652726496104151, 0.00020752179261762649, 0.00014856223424430937, 9.1122747107874602e-05, 0.00019760835857596248, 0.0001576675713295117, 0.00018161197658628225, 0.00014286328223533928, 0.00012570245598908514, 0.00015034583339001983, 0.00015013998199719936, 8.8328270066995174e-05, 0.00015071273082867265, 0.00025340251158922911, 0.00021306154667399824, 0.00021214198204688728, 0.00013858743477612734, 0.00017018907237797976, 0.00029343532514758408, 0.0001206793895107694, 8.1170437624678016e-05, 0.0001645083975745365, 0.00029617018299177289, 7.085462857503444e-05, 0.00029725790955126286, 0.00026896307826973498, 0.00015642851940356195, 0.00022572331363335252, 0.00022539803467225283, 9.194661834044382e-05, 0.00024792947806417942, 0.00015433607040904462, 8.5398743976838887e-05, 0.00021476006077136844, 0.00011818850907729939, 0.00012005302414763719, 0.00027715190663002431, 0.00050268450286239386, 8.559603156754747e-05, 0.00028520362684503198, 0.00024868527543731034, 0.00015485260519199073, 0.00047541936510242522, 0.00011799022468039766, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 27,118,-101,56,-37,0,46,2,108,-127,-74,115,-43,36,-38,21,-123,9,66,2,-8,47,54,86,7,-16,-55,7,-29,-39,26,-36,28,32,-32,127,15,27,15,-28,36,-28,-13,27,-127,-22,34,-67,-34,11,-119,-21,65,50,-42,-43,-69,-101,-67,-127,-127,7,-127,-5,-30,20,60,-41,-48,70,58,-10,-46,34,38,-56,62,-45,-87,50,-4,-106,41,-14,-91,-39,-10,35,-51,74,-38,35,73,-61,67,54, -42,-26,-70,127,-15,78,-49,-28,77,20,-127,124,-33,-82,-121,127,-60,36,45,127,107,7,87,119,18,15,26,86,17,101,31,-127,127,121,4,123,63,110,16,-127,127,-26,68,92,-77,-41,127,-127,-19,-103,-127,-44,68,127,-52,-127,28,44,-109,-86,-18,-127,-35,77,-65,90,127,-33,0,127,117,-49,-127,40,-20,-127,89,-62,-25,127,-25,-108,127,-116,-103,-76,104,65,91,127,-74,-30,107,-37,127,46, 6,-77,-80,0,-8,-2,23,24,78,86,-18,77,-26,52,-9,-19,-90,28,43,3,-19,41,30,45,1,-54,39,3,52,47,21,-51,10,-66,-48,64,-27,11,14,-30,16,42,-16,23,-72,-11,-2,19,58,-75,-83,16,76,15,-7,-38,73,-100,-35,-95,-67,23,-91,-10,38,17,9,-31,-29,30,42,32,-59,-38,-32,-7,38,-9,-81,-28,-34,-127,20,32,-1,-10,11,33,-30,54,-29,31,20,51,29,37, 
  /* [0][1][][] */ 92,-35,30,125,-18,-63,118,20,-38,-98,-26,127,-15,-98,-112,78,-61,-22,119,-1,-127,22,-89,-57,-44,98,-112,74,-91,116,118,76,18,100,44,85,-99,105,-3,-64,39,-127,8,79,-73,-127,25,-69,-127,-52,27,20,127,-26,35,-39,-117,-13,-49,1,-67,-59,-44,59,-127,-30,123,-75,-7,36,-75,-79,-79,127,127,-95,127,61,-86,-39,127,-75,-52,96,-86,6,10,127,8,79,-87,21,-11,-112,67,17, -127,-16,-115,89,-87,-127,-127,-127,101,42,41,64,-108,-127,-97,109,15,-127,127,90,10,-127,-127,50,-127,127,39,127,-80,67,-127,35,-88,114,127,87,-2,127,127,-125,-90,24,-8,29,44,-31,-76,-103,-14,-127,1,93,17,32,33,-83,40,40,46,-24,-83,-60,-104,127,-43,-127,62,127,31,5,-127,-58,-106,84,-115,-100,81,127,94,-50,-83,-3,-73,55,-51,-79,127,100,92,104,-127,-127,-127,-63,5,127, 57,-12,65,52,0,-24,49,31,-55,100,-10,94,28,4,-127,58,12,-9,49,23,-122,21,-59,-83,-27,24,127,-29,127,97,43,-62,39,-127,-1,87,-93,22,-47,-45,-26,117,8,49,-28,-88,10,-49,73,-101,2,32,34,-18,-127,11,127,-17,-127,49,-19,-77,-17,47,91,-29,35,-28,-37,44,-46,-57,-43,-78,-7,-10,67,25,-127,-60,-92,-86,-57,127,-127,10,-16,21,-5,52,-15,54,-40,127,59,15, 
  /* [0][2][][] */ 44,-127,87,72,24,11,24,63,-37,-32,62,-86,24,-36,28,15,-97,22,69,14,-10,66,50,-70,16,68,12,58,-29,31,-25,44,-52,-28,2,97,117,-9,5,-34,-20,6,-25,127,39,-67,-11,-24,-38,50,52,59,63,-8,-61,-14,-5,-39,-21,57,-100,43,22,0,-71,43,73,-3,127,21,-15,100,-13,83,19,-55,36,-7,-15,1,84,-39,-11,-23,-88,69,-5,-7,-11,76,-29,55,-3,-28,27,48, -46,26,127,68,127,40,-58,17,-127,35,43,-93,127,-74,-37,9,58,26,46,-43,-14,48,48,-127,69,-6,10,98,10,127,-40,21,-36,-9,48,106,127,48,8,-99,-30,-20,-127,69,9,-48,-21,-58,18,-76,27,127,68,-37,-53,-53,-18,127,-77,14,55,-108,82,56,-63,31,26,19,121,13,0,127,-122,74,-24,-124,51,-74,-38,-13,37,-71,-39,-40,4,127,70,29,127,97,32,54,-6,-34,58,48, 23,64,26,5,13,33,11,56,-6,61,34,-23,18,-38,43,-7,-127,31,47,26,-5,46,31,-84,22,109,2,49,16,-16,-46,-52,-68,-25,17,67,92,18,-13,-10,-21,-1,-17,104,-7,-51,-8,-2,34,23,103,18,22,19,-28,-2,33,-26,5,54,-116,38,9,-11,27,32,-3,12,92,24,-30,117,-42,-38,-21,15,2,0,-12,2,-10,-43,-47,15,-32,60,-30,-21,-28,66,20,56,-8,-23,32,37, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.019811667501926422, 0.0085033513605594635, 0.0051230462267994881, 0.011058549396693707, 0.0097768846899271011, 0.015794254839420319, 0.013254323042929173, 0.010699436999857426, 0.0076843579299747944, 0.0073325890116393566, 0.0080840112641453743, 0.011156621389091015, 0.011984309181571007, 0.0054385415278375149, 0.0049494500271975994, 0.0049692606553435326, 0.0064024487510323524, 0.01846015639603138, 0.0034091093111783266, 0.0045007206499576569, 0.0076712477020919323, 0.012897010892629623, 0.012990374118089676, 0.0061296708881855011, 0.026565873995423317, 0.0054131080396473408, 0.013072716072201729, 0.010647822171449661, 0.0074733132496476173, 0.0033770175650715828, 0.013066493906080723, 0.011073837988078594, 0.014644880779087543, 0.0050301901064813137, 0.0091434251517057419, 0.010854063555598259, 0.0064511732198297977, 0.0076303468085825443, 0.013819663785398006, 0.0061770468018949032, 0.0076114418916404247, 0.0080453250557184219, 0.010867235250771046, 0.012038536369800568, 0.0048503600992262363, 0.0031693375203758478, 0.011303815059363842, 0.0037270281463861465, 0.0098224570974707603, 0.0039930092170834541, 0.0073816617950797081, 0.0059022679924964905, 0.0070240874774754047, 0.0088196760043501854, 0.0063138948753476143, 0.0038727167993783951, 0.0083983549848198891, 0.0067008715122938156, 0.0077185090631246567, 0.0060716895386576653, 0.0053423545323312283, 0.0063896980136632919, 0.0063809491693973541, 0.0037539512850344181, 0.0064052911475300789, 0.010769606567919254, 0.009055115282535553, 0.0090160341933369637, 0.0058899661526083946, 0.007233035285025835, 0.012471000663936138, 0.0051288739778101444, 0.0034497436136007309, 0.0069916066713631153, 0.012587232515215874, 0.0030113216489553452, 0.012633460573852062, 0.011430930346250534, 0.0066482117399573326, 0.0095932409167289734, 0.0095794163644313812, 0.0039077312685549259, 0.010537003166973591, 0.0065592830069363117, 0.0036294464953243732, 0.0091273020952939987, 0.0050230114720761776, 0.0051022535189986229, 0.011778955347836018, 0.021364090964198112, 0.0036378311924636364, 0.012121153995394707, 0.010569124482572079, 0.0065812356770038605, 0.020205322653055191, 0.0050145843997597694, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 4969, 1102, -85, -1945, 3616, 8046, 3764, 2510, -510, 5287, 664, -5084, 1785, 4977, 175, 159, 4410, 5961, -984, -16, 3940, 15885, 7177, -620, -4707, -899, 12235, -2108, 1741, 1029, 7443, -1485, 10761, 1691, 4099, -5233, 415, -3021, 1174, 2659, 2941, 1309, 1345, -2872, 1898, 3973, 3328, 2056, 4547, 1190, 4297, 2120, -3621, 790, 1169, 1695, 1546, 2696, 12482, 563, -1447, 5726, 3125, 3446, 3414, 6318, -3861, 2078, 2979, -960, 5340, 854, 2474, 2162, 4188, 1083, -2786, 2243, 2972, 3000, 2667, 1735, 3491, 481, 4484, 3484, 477, -781, 12457, -3178, 771, -2143, 7480, 2283, -2929, -782, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00015299659571610391, 0.00020086354925297201, 0.00019829795928671956, 0.0002069054899038747, 0.00016421030159108341, 0.00010537865455262363, 0.00021542079048231244, 0.0001568859297549352, 0.00023038327344693244, 0.00015486968914046884, 0.0003088969097007066, 0.00011199132859474048, 0.00017656911222729832, 0.00013886236411053687, 0.00022562744561582804, 0.00017500712419860065, 0.00014092978381086141, 0.00013107573613524437, 0.00015745352720841765, 0.00019881759362760931, 0.00015948788495734334, 6.1273225583136082e-05, 0.00012198257900308818, 0.00020834947645198554, 0.00013470013800542802, 0.00023586557654198259, 7.9386736615560949e-05, 0.00015118782175704837, 0.00021642987849190831, 0.00018546525097917765, 0.00011942946002818644, 0.00016457875608466566, 8.6671163444407284e-05, 0.0002456730289850384, 0.00018345547141507268, 0.00013931827561464161, 0.00032038267818279564, 0.00019905326189473271, 0.00012752423936035484, 0.00018910174549091607, 0.00013752975792158395, 0.00019256546511314809, 0.00028321225545369089, 0.00014921814727131277, 0.00021661334903910756, 0.00010563617979642004, 0.0001451831340091303, 0.0002825032570399344, 0.0001247154432348907, 0.00028113243752159178, 0.00019076779426541179, 0.00017411891894880682, 0.00013894382573198527, 0.00026503150002099574, 0.00025393182295374572, 0.00024868975742720068, 0.00017453196051064879, 0.00018175631703343242, 7.7705146395601332e-05, 0.00021604630455840379, 0.00023340112238656729, 0.00013138032227288932, 0.00019619990780483931, 0.00017833922174759209, 0.00020274559210520238, 0.00012723235704470426, 0.00017315293371211737, 0.00020759570179507136, 0.00016489301924593747, 0.00025093453587032855, 0.00013650968321599066, 0.00021498001297004521, 0.00016908784164115787, 0.00018621727940626442, 0.0001508178684161976, 0.00017034211487043649, 0.00014035101048648357, 0.00014213257236406207, 0.00014028196164872497, 0.00019831006648018956, 0.00013392484106589109, 0.00018821129924617708, 0.00020172867516521364, 0.00023649884678889066, 0.00013278888945933431, 0.00018736526544671506, 0.0002607368805911392, 0.00021988201478961855, 7.2554263169877231e-05, 0.00012517502182163298, 0.00024563743500038981, 0.00014735911099705845, 0.00011230311065446585, 0.00018116337014362216, 0.00013604998821392655, 0.00016167770081665367, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 32,43,-13,-39,-57,-71,-43,-3,6,-49,71,-47,77,-76,0,-127, 
  /* [1][0][][] */ -86,39,-90,-127,-91,57,5,49,-24,25,54,-59,87,126,11,38, 
  /* [2][0][][] */ -44,-20,-107,-9,-12,-54,72,-30,-17,98,58,-3,1,29,-55,127, 
  /* [3][0][][] */ -58,-86,27,-45,-72,8,-48,-127,31,58,58,-69,-32,-16,-118,-13, 
  /* [4][0][][] */ 41,-37,-12,62,-53,11,-123,66,32,127,51,85,8,42,-51,-47, 
  /* [5][0][][] */ -80,88,-93,5,70,-50,-65,-55,105,-58,32,6,-27,-115,-65,-127, 
  /* [6][0][][] */ -30,-6,-8,26,-22,60,46,-18,7,-34,76,-37,0,11,-127,58, 
  /* [7][0][][] */ -19,42,127,-66,44,8,-21,-40,30,84,-34,5,59,36,30,89, 
  /* [8][0][][] */ -28,-1,18,-1,47,11,50,127,-79,-25,-91,-61,21,52,-40,-87, 
  /* [9][0][][] */ 50,19,8,-25,-59,-65,-93,-46,48,-6,127,32,-38,-91,57,-43, 
  /* [10][0][][] */ -36,-109,18,-68,-101,75,68,3,-12,-65,34,12,-29,78,-127,28, 
  /* [11][0][][] */ 88,-89,19,98,-113,-63,39,8,125,127,-31,61,82,-40,-15,72, 
  /* [12][0][][] */ -60,-86,110,-91,17,-83,15,127,-14,-2,126,-42,-31,1,-77,83, 
  /* [13][0][][] */ 14,-42,8,30,-33,49,112,80,-127,-9,10,11,-29,58,115,-90, 
  /* [14][0][][] */ 48,-40,127,-21,50,23,69,28,96,34,12,32,49,-37,11,-39, 
  /* [15][0][][] */ -2,93,61,18,14,77,-127,120,-49,-40,-59,5,-44,125,0,-105, 
  /* [16][0][][] */ -48,43,107,-42,67,77,45,13,3,37,-20,12,73,-10,0,127, 
  /* [17][0][][] */ -16,88,82,-97,3,-50,-5,-109,0,127,-28,105,-62,-21,69,-44, 
  /* [18][0][][] */ -103,5,-90,-56,61,37,-57,-110,70,88,122,119,-58,127,-23,-24, 
  /* [19][0][][] */ 27,124,78,72,55,-22,-4,-25,-7,111,63,127,55,64,-46,71, 
  /* [20][0][][] */ 97,14,46,48,-65,17,-27,30,-69,-17,-127,-32,106,6,15,-42, 
  /* [21][0][][] */ -101,-127,-33,85,5,-6,-97,65,-6,21,45,52,-17,69,-74,32, 
  /* [22][0][][] */ 5,6,-35,-4,107,-21,-48,8,127,36,56,48,-33,28,3,2, 
  /* [23][0][][] */ -127,14,2,29,23,3,81,115,24,127,12,-46,5,78,-75,-9, 
  /* [24][0][][] */ 35,-71,17,-29,117,43,127,-88,49,31,42,44,-58,15,-43,27, 
  /* [25][0][][] */ 100,-59,89,-4,3,-11,-19,74,103,28,-32,5,127,-34,65,43, 
  /* [26][0][][] */ 91,106,127,95,82,-18,-91,43,-24,64,17,87,25,-103,34,-119, 
  /* [27][0][][] */ -55,46,-106,41,-32,69,-32,-119,32,-102,45,94,2,-48,127,74, 
  /* [28][0][][] */ -39,36,-79,-48,6,-79,-5,-46,-127,48,-34,-3,-50,29,-4,20, 
  /* [29][0][][] */ 81,127,-61,38,54,121,-30,-22,24,19,21,51,-117,-2,-17,47, 
  /* [30][0][][] */ -7,86,-127,-61,62,-49,1,38,-99,40,-74,-18,-2,38,19,49, 
  /* [31][0][][] */ 65,-126,110,5,41,-118,-55,30,-40,73,41,-70,-32,93,5,127, 
  /* [32][0][][] */ -75,17,-29,58,-127,30,24,97,50,-90,70,-88,32,82,51,89, 
  /* [33][0][][] */ -52,-23,95,123,-33,33,-82,33,-93,-66,0,-42,3,-18,18,127, 
  /* [34][0][][] */ 1,5,-77,-76,28,-22,-3,48,43,17,25,7,-40,-6,-19,127, 
  /* [35][0][][] */ 68,-1,50,-3,-29,34,-127,-64,-27,-120,-93,32,39,-5,77,33, 
  /* [36][0][][] */ -27,-10,-127,-18,27,65,-19,32,-4,14,63,46,-10,4,-51,57, 
  /* [37][0][][] */ 37,31,37,-26,61,-127,30,-42,-106,20,-113,24,-9,-13,104,37, 
  /* [38][0][][] */ -75,115,37,-36,75,17,55,-95,28,-46,-109,75,-91,-127,-83,-34, 
  /* [39][0][][] */ 99,69,-113,-62,-17,14,32,-78,-16,-48,14,19,20,-21,-125,-127, 
  /* [40][0][][] */ -57,-9,-69,-116,-79,-47,-12,-127,47,10,10,-58,78,108,59,61, 
  /* [41][0][][] */ -36,-89,-23,127,-22,-27,-60,-9,-13,-76,107,-96,-119,-18,9,39, 
  /* [42][0][][] */ -5,47,-29,-127,-5,10,13,-23,31,-17,-23,6,61,-9,-12,18, 
  /* [43][0][][] */ 1,14,-7,61,127,1,21,21,-38,-17,1,-62,-114,-47,0,-30, 
  /* [44][0][][] */ 74,-18,15,16,-22,-49,-1,45,45,-85,37,-19,127,15,-45,-35, 
  /* [45][0][][] */ 37,-127,-74,51,-74,-124,0,86,76,-45,-37,38,-116,123,46,-71, 
  /* [46][0][][] */ -17,-127,82,16,-29,-59,-104,54,8,-9,54,-57,95,98,73,118, 
  /* [47][0][][] */ -29,-40,23,80,-22,-16,45,31,21,-40,-127,-21,52,-38,-34,6, 
  /* [48][0][][] */ -94,122,-11,-10,38,117,-25,-122,11,-27,42,-76,87,-127,-102,19, 
  /* [49][0][][] */ -60,-2,43,-43,45,5,86,127,-35,-10,-1,48,-39,29,-44,-4, 
  /* [50][0][][] */ 63,50,-64,57,34,-106,-28,4,-127,69,-69,-9,-2,-63,-116,-52, 
  /* [51][0][][] */ -54,22,-24,88,4,44,-95,-74,-127,-113,-16,-45,21,2,19,97, 
  /* [52][0][][] */ -124,-30,3,23,38,23,44,62,-56,-127,-18,-41,-123,-27,-91,-40, 
  /* [53][0][][] */ -52,-102,-94,-127,7,6,31,107,-26,-32,-73,10,16,37,38,71, 
  /* [54][0][][] */ -1,-53,-9,25,-24,54,38,11,-25,-96,44,26,-51,-18,-127,-6, 
  /* [55][0][][] */ -15,-41,-59,49,49,-62,79,70,-75,-64,-127,-9,49,-13,-9,37, 
  /* [56][0][][] */ 106,-61,-87,-51,-115,-41,-127,28,38,-40,-4,-32,97,-109,-2,-9, 
  /* [57][0][][] */ -27,30,16,-42,127,29,26,30,-40,36,7,3,-55,78,-88,-32, 
  /* [58][0][][] */ 35,42,22,-20,45,25,-100,-79,-17,-123,-127,0,-123,-34,-34,65, 
  /* [59][0][][] */ -80,-14,16,22,-3,65,-111,-6,53,127,-67,-31,16,68,-11,51, 
  /* [60][0][][] */ 44,-63,-26,21,-127,-25,40,1,-20,-1,-13,83,-45,-62,47,31, 
  /* [61][0][][] */ 13,18,-104,3,-79,-7,-127,-24,-20,-4,49,76,98,-44,124,112, 
  /* [62][0][][] */ 22,-3,34,-26,21,50,38,95,-39,127,10,47,13,25,18,78, 
  /* [63][0][][] */ 15,-119,-23,-10,-63,-7,27,-18,-19,-19,6,-15,-21,127,104,36, 
  /* [64][0][][] */ -54,-2,-127,-1,29,64,24,23,14,-84,41,-38,53,-17,-81,99, 
  /* [65][0][][] */ -33,-57,62,50,91,-20,81,110,-88,39,-83,-63,77,127,-48,-12, 
  /* [66][0][][] */ -35,-127,-24,-78,-5,-92,36,3,-24,-1,46,68,-11,-38,-62,55, 
  /* [67][0][][] */ -28,-59,-116,22,-98,78,-38,-127,-72,-45,-10,-57,14,23,-40,48, 
  /* [68][0][][] */ 127,27,49,-8,-35,7,-120,4,-79,-76,-59,29,60,-21,89,-79, 
  /* [69][0][][] */ 38,0,78,-45,-8,-57,-60,26,-25,127,-57,29,7,23,66,-16, 
  /* [70][0][][] */ -3,-50,-32,-3,-57,4,28,-86,77,127,42,52,65,25,-25,95, 
  /* [71][0][][] */ 127,-68,112,41,-29,-42,59,-11,46,39,-46,36,124,-8,-1,109, 
  /* [72][0][][] */ -45,-106,10,92,41,-53,-127,74,67,62,105,3,-1,-54,-35,106, 
  /* [73][0][][] */ 111,-21,36,-101,3,-120,-42,37,3,127,10,4,22,-67,48,5, 
  /* [74][0][][] */ 77,0,0,47,-127,-63,48,19,-107,-60,38,-34,24,-62,21,37, 
  /* [75][0][][] */ 58,127,-89,80,63,75,-52,-23,-22,-29,19,84,-97,96,19,89, 
  /* [76][0][][] */ -62,-16,17,-35,-74,5,92,-34,-50,39,87,108,-89,-127,-20,87, 
  /* [77][0][][] */ -127,105,20,2,53,-80,90,79,124,-62,42,50,-74,50,-45,97, 
  /* [78][0][][] */ 110,76,-109,-3,-75,48,-127,-32,-35,-22,-125,-48,40,-121,41,45, 
  /* [79][0][][] */ -71,-60,127,11,-12,-82,-67,-6,-10,36,13,-12,-26,65,-58,53, 
  /* [80][0][][] */ 51,127,17,-127,-27,60,68,-15,2,78,-47,-15,87,-56,21,35, 
  /* [81][0][][] */ 47,-28,42,-107,102,54,-25,106,77,19,-80,-39,-47,38,-96,-127, 
  /* [82][0][][] */ 43,29,58,5,127,-58,17,38,3,61,-19,13,-21,-12,-6,-114, 
  /* [83][0][][] */ -22,110,13,-16,32,80,127,40,13,61,-49,-57,-44,103,-52,-40, 
  /* [84][0][][] */ 20,-56,-1,61,-15,-69,-70,127,-74,12,-71,-50,-79,53,21,-33, 
  /* [85][0][][] */ -127,46,-35,47,-46,-107,-85,-79,17,39,3,-91,-85,-59,-49,32, 
  /* [86][0][][] */ -5,64,81,80,26,-34,45,1,43,54,-31,-47,5,31,-127,-64, 
  /* [87][0][][] */ -38,67,126,-25,-127,-40,41,4,64,-9,35,88,-58,44,1,-4, 
  /* [88][0][][] */ -38,-88,-118,-13,71,17,-21,-2,-21,-85,-94,-90,127,-33,69,47, 
  /* [89][0][][] */ -6,-16,29,-127,34,-67,-57,79,111,30,29,-84,28,-6,23,-48, 
  /* [90][0][][] */ -34,21,3,44,-27,2,29,109,12,-55,26,127,50,30,-27,88, 
  /* [91][0][][] */ -47,-33,-70,97,127,30,-41,-81,-40,-11,23,64,-105,-115,-12,-71, 
  /* [92][0][][] */ 0,84,-3,-56,-127,13,-87,33,-75,73,96,115,-24,-17,39,-9, 
  /* [93][0][][] */ 116,41,66,58,-127,-63,69,41,-18,-91,-19,-64,12,-62,8,9, 
  /* [94][0][][] */ -15,-127,8,-98,35,35,-8,12,69,-27,20,24,12,-12,-76,29, 
  /* [95][0][][] */ -54,-100,-62,-34,66,83,-25,98,127,83,-80,105,-42,115,-73,40, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0021280893124639988, 0.0027938894927501678, 0.0027582037728279829, 0.0028779292479157448, 0.0022840651217848063, 0.0014657528372481465, 0.0029963718261569738, 0.0021821875125169754, 0.0032044907566159964, 0.0021541428286582232, 0.0042965677566826344, 0.001557731069624424, 0.0024559686426073313, 0.0019314908422529697, 0.0031383400782942772, 0.0024342422839254141, 0.0019602472893893719, 0.0018231836147606373, 0.0021900825668126345, 0.00276543153449893, 0.0022183791734278202, 0.0008522731950506568, 0.0016967032570391893, 0.0028980141505599022, 0.0018735968042165041, 0.0032807462848722935, 0.0011042210971936584, 0.0021029303316026926, 0.0030104075558483601, 0.0025797085836529732, 0.0016611909959465265, 0.0022891901899129152, 0.0012055430561304092, 0.0034171619918197393, 0.0025517537724226713, 0.0019378322176635265, 0.0044563277624547482, 0.0027687095571309328, 0.0017737844027578831, 0.0026302898768335581, 0.0019129550782963634, 0.0026784681249409914, 0.0039393096230924129, 0.0020755333825945854, 0.0030129596125334501, 0.0014693348202854395, 0.0020194088574498892, 0.0039294478483498096, 0.0017347157699987292, 0.003910380881279707, 0.0026534637436270714, 0.0024218880571424961, 0.0019326237961649895, 0.0036864266730844975, 0.0035320369061082602, 0.0034591229632496834, 0.0024276331532746553, 0.0025281195994466543, 0.0010808311635628343, 0.0030050722416490316, 0.0032464673276990652, 0.0018274200847372413, 0.0027290210127830505, 0.002480589784681797, 0.002820067573338747, 0.0017697244184091687, 0.0024084516335278749, 0.0028875295538455248, 0.002293561352416873, 0.0034903462510555983, 0.0018987664952874184, 0.0029902409296482801, 0.0023519087117165327, 0.0025901687331497669, 0.0020977845415472984, 0.0023693549446761608, 0.0019521969370543957, 0.0019769773352891207, 0.0019512365106493235, 0.0027583721093833447, 0.0018628127872943878, 0.0026179044507443905, 0.0028059228789061308, 0.0032895547337830067, 0.0018470125505700707, 0.002606136491522193, 0.0036266909446567297, 0.0030584246851503849, 0.0010091855656355619, 0.0017411081353202462, 0.0034166669938713312, 0.0020496754441410303, 0.001562067773193121, 0.0025198720395565033, 0.001892372383736074, 0.0022488383110612631, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -23263, -7837, 1479, -10690, 11127, -17553, 18862, -4550, 19414, -7160, 8890, 12223, -1624, -25159, 5768, 5741, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.8714791268575937e-05, 7.4186813435517251e-05, 5.8927817008225247e-05, 5.5345528380712494e-05, 6.610705895582214e-05, 0.00013855153520125896, 4.4816923036705703e-05, 8.7425723904743791e-05, 0.00010498641495360062, 0.00011854969488922507, 9.8887045169249177e-05, 0.00010167101572733372, 8.1409700214862823e-05, 7.5967574957758188e-05, 5.3973391914041713e-05, 7.6142532634548843e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 8,33,28,34,-26,-109,-24,-6,-38,-76,14,-29,106,-57,63,23,-58,12,22,0,94,-10,-87,-7,-12,88,120,92,18,69,44,-2,12,-1,9,-22,35,9,-18,-22,104,42,28,-39,15,11,7,-61,15,-25,75,-15,-60,-14,34,29,8,-61,6,19,-4,38,-46,3,28,5,51,-12,19,17,10,66,10,29,-1,26,52,0,42,4,7,41,48,14,-55,-8,-2,48,19,14,-97,-27,41,29,127,76, 
  /* [1][0][][] */ 41,55,33,-32,-36,-58,100,-73,-57,0,-62,-89,43,-62,41,-50,-14,-31,-42,-34,6,-127,107,-41,8,44,10,72,-97,21,-40,71,-53,36,24,-2,-10,29,-22,66,28,36,-30,-71,81,-66,24,1,-55,0,12,-103,-28,39,34,44,16,8,-80,13,-9,-22,6,-33,75,57,98,10,-64,-100,61,11,29,36,-29,9,-74,-21,73,-56,99,-35,53,-31,-20,-52,-24,16,3,-37,29,27,72,-59,-23,51, 
  /* [2][0][][] */ -11,-14,-1,-19,91,53,-75,56,-38,25,-10,-10,28,-11,-7,32,34,-23,-127,-18,-21,-38,-2,53,0,-17,-57,43,-43,-31,-7,58,-10,-44,-4,15,-33,35,3,-31,64,28,5,11,13,47,25,14,-75,-11,-12,29,-26,41,-4,-57,26,17,25,21,-14,25,-24,45,12,-16,-51,2,-14,-4,-32,-19,14,45,22,77,-53,-24,-19,-14,21,35,39,25,-18,-35,-16,-51,0,-35,-10,27,16,-8,82,-36, 
  /* [3][0][][] */ 26,-50,-8,-126,-37,-39,126,-52,17,127,-72,-22,25,-1,3,55,56,52,-32,-1,-51,-5,-3,-21,-43,100,25,21,-56,-17,-45,67,-14,-17,15,-14,-1,-70,-2,37,16,27,-41,55,122,-68,-18,26,44,-37,25,-24,102,30,12,-8,7,-19,3,-41,-62,32,72,-20,-45,-30,110,-52,-31,1,-25,24,3,-64,0,-62,2,-38,122,-5,22,-51,-48,-21,-32,-49,81,63,-37,24,-67,-3,32,-96,-14,76, 
  /* [4][0][][] */ -30,76,41,-1,-50,22,-31,-21,25,-25,4,-26,19,48,-24,32,-15,-35,-9,-57,38,-11,-60,31,-24,-17,-13,14,-39,127,-52,-15,-1,-13,9,-30,71,51,-29,-34,16,-1,20,-37,-40,-7,67,-34,30,-16,-55,-11,-68,18,43,14,-8,61,-10,9,-24,-73,-33,-30,51,34,-74,-6,11,5,20,-76,-7,69,70,73,-35,19,-78,38,60,76,22,-55,41,-69,-16,-68,-29,-55,-31,-24,-9,-5,35,-28, 
  /* [5][0][][] */ 21,-13,28,-16,9,-8,-1,30,36,13,-24,-12,-19,-22,20,-27,-7,-15,-40,-42,-18,-2,-27,15,21,-39,46,-12,-12,48,10,84,-1,-64,12,12,-34,-38,-7,19,-41,5,-41,2,3,2,-72,17,5,13,42,-14,18,-68,-4,16,-13,-59,-20,-27,37,29,15,68,-39,-10,127,-12,-16,-41,24,31,-10,25,41,4,2,9,125,45,-25,-3,-39,58,47,53,-7,82,2,-28,-2,14,2,-34,-37,20, 
  /* [6][0][][] */ 54,-69,98,37,-4,95,-47,-80,-21,-43,-103,52,-3,13,-62,114,49,-4,0,-46,-110,-27,-85,-90,5,-53,-2,84,-117,51,-1,-23,61,83,-42,-9,-13,-51,28,21,-68,52,30,-44,-12,75,-66,20,68,24,-66,-127,73,41,-46,-11,31,-32,-60,-22,31,-53,14,31,60,-106,-63,-65,-122,-23,-20,-43,7,-90,21,-74,116,41,-85,74,-84,75,32,-84,75,-44,-18,-10,-54,62,-59,81,17,-71,61,-115, 
  /* [7][0][][] */ -40,15,-12,90,-18,28,28,6,-84,-6,73,47,-10,-59,0,-15,-18,-27,23,11,-58,31,11,-3,64,28,-4,53,-6,23,-29,-11,-52,-127,16,57,-14,29,-50,-14,-11,-18,22,-82,19,54,95,82,-21,19,-18,-5,32,-25,32,-15,-24,55,-46,-56,53,55,3,-47,49,-24,101,-7,-66,-49,39,-32,27,-38,-72,-59,33,-63,83,-16,-30,-39,-81,-50,40,19,-52,21,-14,36,-5,39,23,21,70,-23, 
  /* [8][0][][] */ -11,-75,-21,37,27,17,29,-5,-14,-6,44,84,-14,44,3,-1,86,10,2,3,2,-127,-43,-17,-28,-39,64,25,-30,64,16,-12,-19,15,4,23,-43,-29,20,-27,-16,48,48,-66,-9,-43,18,-9,29,-13,55,10,-35,14,-42,7,-27,123,-62,-2,-23,-58,-71,4,-114,-35,-62,19,-13,34,36,-9,-31,-126,49,-111,-2,41,-97,14,-55,-30,17,54,86,-81,-70,50,-61,105,25,-25,-34,-5,18,-72, 
  /* [9][0][][] */ -32,-39,-62,56,36,42,-4,47,-35,7,47,81,-40,46,-4,-38,18,23,-30,-32,13,29,-12,-2,-24,19,2,24,31,-14,23,-3,-12,-9,19,45,-22,3,26,23,-4,-31,32,-14,-27,30,21,66,-21,6,6,27,103,17,-35,-23,16,-12,9,18,4,11,70,9,-15,3,60,-11,32,-9,-24,29,15,-127,-42,-124,-24,-14,41,24,-46,9,-7,-36,34,7,-45,-17,1,100,43,28,32,36,-1,18, 
  /* [10][0][][] */ 32,20,4,5,3,20,-36,-22,45,-4,-24,44,20,20,-24,-40,-37,0,19,-1,9,-37,-24,-32,10,-16,-82,37,-25,42,-12,-10,27,10,-30,20,6,11,13,11,51,-8,52,-24,-36,-18,10,32,9,3,11,-20,-41,-1,-11,17,4,10,-6,-3,-21,-32,1,15,-15,-25,-55,-23,-49,-20,50,4,-35,18,35,22,52,2,-62,15,-30,30,-3,9,7,11,-46,-127,-20,24,9,8,28,-27,8,18, 
  /* [11][0][][] */ 29,-36,-23,12,-44,28,18,26,65,-12,-25,-37,47,19,-25,-29,7,43,0,-53,34,21,1,-25,29,11,43,7,48,-51,-11,21,28,103,-86,9,29,-38,70,15,-57,68,-21,-10,-66,-6,-42,0,51,-2,-28,-41,-2,11,-58,77,-6,-11,-35,-34,45,13,-22,-38,-37,-33,-97,-127,7,-28,-82,41,70,-4,-6,-9,34,60,-88,-34,-4,8,-16,-10,-19,-17,41,67,24,-44,21,18,-42,35,72,24, 
  /* [12][0][][] */ 1,26,-44,4,58,-49,-17,25,44,-36,12,11,-8,-23,6,29,38,-36,-50,5,2,28,-8,41,-49,-35,-127,-7,69,-38,36,14,-30,-102,78,17,25,2,-43,44,-5,-68,26,36,-13,18,27,13,-60,2,-53,114,60,-29,8,-76,32,19,-45,-7,6,56,61,0,-6,-54,16,42,125,48,26,55,-3,-6,-36,9,-39,-48,32,-57,-25,-55,41,-51,2,-13,14,-127,-8,31,-42,4,9,84,33,42, 
  /* [13][0][][] */ -50,21,-86,55,50,21,-16,20,30,71,-48,43,-98,-32,61,-44,17,48,47,44,-59,-23,-14,15,46,34,-38,17,4,21,96,-32,-34,60,6,52,10,-10,-82,-25,6,-32,25,3,41,48,-11,71,-33,30,31,22,-48,-63,36,38,43,-35,-11,-5,66,34,-6,-44,2,86,106,60,43,-20,-59,-31,44,72,-107,57,9,-90,127,-17,-50,-60,22,3,25,56,-35,-21,-8,-17,-3,33,-14,12,80,57, 
  /* [14][0][][] */ -23,66,6,15,-69,-37,7,21,-74,-24,77,-20,-76,-4,64,-19,-34,42,-86,18,-27,44,-106,25,-52,11,-48,-101,26,-9,54,73,-84,14,7,-30,-15,-73,-6,-49,2,-41,30,-34,37,49,-72,20,-3,-45,77,42,-20,6,-52,23,-58,36,5,42,54,57,-28,16,25,-35,-10,-76,48,71,50,5,-29,39,-8,29,6,-31,35,5,-54,79,10,-127,70,0,15,13,-92,-30,-31,2,-8,27,63,21, 
  /* [15][0][][] */ 86,-23,-11,60,82,8,-2,-16,2,31,-49,21,47,80,-38,-15,6,-24,-72,29,6,1,13,57,58,-52,75,7,56,-29,-34,35,50,34,-18,-81,46,67,76,88,103,13,-3,37,-66,-109,20,-29,-39,-24,-20,14,-38,-60,-34,36,-23,15,-23,39,-18,-58,-31,71,22,3,-82,63,-4,-57,-65,8,-13,-120,-47,-89,-4,15,-127,50,-4,-32,47,28,-47,3,-2,-30,31,63,24,-78,-34,-46,29,-28, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0029203786980360746, 0.0031529394909739494, 0.0025044321082532406, 0.0023521848488599062, 0.0028095499146729708, 0.0058884401805698872, 0.001904719159938395, 0.003715593134984374, 0.0044619226828217506, 0.0050383619964122772, 0.004202699288725853, 0.0043210182338953018, 0.00345991225913167, 0.0032286220230162144, 0.0022938691545277834, 0.0032360574696213007, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7512, 583, -4390, 12747, -4123, 638, 1324, -380, 9493, -5786, -5994, -2254, 7955, -11870, -1914, -11398, 1051, 887, -15365, -519, -1055, -1519, -3341, -1334, 9, 9312, -14437, -8659, 4917, -3914, 2872, -460, 16006, -592, -8061, -1220, -2943, 13395, 6350, 6885, 3258, -150, -923, 3238, 1224, 202, 5454, 6591, -7165, 222, -2909, -3161, -1509, -6431, 349, 5454, -3599, 5947, -74, 3959, 183, -2737, 456, 6145, 21063, 209, 10055, 23357, -2263, 1415, 11138, -573, -1128, 2309, -5360, 892, 20192, 10712, 11732, 18774, 13168, -3168, 11829, 13611, -3029, -5562, 5816, -10297, 8821, 882, -10416, 395, 1290, 444, 12691, -67, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018135072605218738, 0.00045691404375247657, 0.00023790786508470774, 0.00015712951426394284, 0.00016627450531814247, 0.0006191189750097692, 7.0712543674744666e-05, 0.00021879482665099204, 0.00022720852575730532, 0.00015003977750893682, 0.00026338273892179132, 0.00020027704886160791, 0.00019168792641721666, 6.6425163822714239e-05, 0.00029032214661128819, 0.00011006159911630675, 0.00037748191971331835, 0.0002851559838745743, 8.7430424173362553e-05, 0.0003473952820058912, 0.00026881994563154876, 0.00032588251633569598, 0.00023818440968170762, 0.00019807016360573471, 0.0040406896732747555, 0.00012766200234182179, 0.00016773224342614412, 0.00012895514373667538, 0.00033385262941010296, 0.00014107674360275269, 0.00017437449423596263, 0.00032261165324598551, 9.5097318990156054e-05, 0.00056620122632011771, 9.5147857791744173e-05, 0.00019523444643709809, 0.00029032939346507192, 9.3556744104716927e-05, 0.00018964386254083365, 0.00012178423639852554, 0.00062483031069859862, 0.00019976613111793995, 0.00024744236725382507, 0.00019959930796176195, 0.00024516537087038159, 0.00028181387460790575, 0.00025257142260670662, 0.00019244423310738057, 0.00014000802184455097, 0.00058281997917219996, 0.00030042030266486108, 0.00020395604951772839, 0.00017060496611520648, 0.00013141620729584247, 0.0003265339182689786, 0.00014247735089156777, 0.00014157698024064302, 0.00035212206421419978, 0.00067348481388762593, 0.00029574919608421624, 0.00028131721774116158, 0.00030396983493119478, 0.00019918772159144282, 0.00011881811224156991, 0.00016826490173116326, 0.00048834673361852765, 0.00014638624270446599, 8.4853287262376398e-05, 0.0003047813952434808, 0.00053545209812000394, 0.00010777697752928361, 0.00040280399844050407, 0.00030552290263585746, 0.00020357087487354875, 0.00010445629595778883, 0.00024935582769103348, 5.8528585213935003e-05, 0.00023068628797773272, 0.0001028126134769991, 0.00014685708447359502, 0.00013863650383427739, 0.00023842007794883102, 0.00010282667790306732, 0.00021399131219368428, 7.0486261392943561e-05, 0.00026937323855236173, 0.00010599008965073153, 0.0001356361317448318, 9.6761592430993915e-05, 0.00022389760124497116, 7.8323493653442711e-05, 0.00028911771369166672, 0.00021438051771838218, 0.00019735771638806909, 0.0001663438742980361, 0.00026815416640602052, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -31,-28,9,1,127,11,52,-5,-26,0,15,-45,-29,116,-10,24,-22,3,91,-32,-15,17,-7,58,-3,-15,-55,19,1,6,29,3,-73,0,58,-49,5,-115,-65,34,12,94,35,-38,-30,44,-39,-27,-9,-2,-12,39,-50,36,39,-43,45,-36,-2,-36,-15,12,1,-19,-70,-32,-36,-60,1,17,-82,14,21,-4,36,-10,-46,-19,127,-83,-127,20,-77,-12,-58,-18,8,45,-38,20,6,-5,-16,21,-7,-6, 3,24,37,-88,-54,-7,127,-85,-14,-24,-19,-18,-74,20,-82,96,-12,79,122,-50,-13,127,17,127,27,13,72,53,127,43,127,-38,-104,-15,-36,-41,9,-37,122,-19,-34,-99,-40,-22,67,-32,24,-19,51,-18,23,123,-99,115,-62,-18,-80,-8,-6,28,-28,-127,-117,-37,-44,-6,2,-107,8,9,-19,112,-127,-20,46,-24,-127,-127,15,-19,15,16,63,-75,127,102,-54,22,-95,-6,47,-9,3,127,-2,-88, -54,-19,-10,-28,110,13,40,-47,-31,12,20,50,-33,104,-5,-7,-24,-2,35,-15,0,9,-15,58,-4,30,19,-5,-25,8,24,11,-127,-11,42,85,16,-35,-101,43,-28,91,14,-21,-33,-43,-44,-41,-27,12,-6,42,1,34,20,-37,69,-46,12,-16,-13,1,-68,15,-59,-44,127,-65,-5,2,-42,12,31,-7,47,22,-10,10,-36,-45,-105,1,-65,-14,17,-28,7,6,-32,-31,-8,64,-18,17,-25,9, 
  /* [0][1][][] */ -59,0,35,-63,63,86,-13,-10,-28,-8,-11,-11,-115,111,23,110,-17,29,122,26,18,-18,104,-13,34,21,96,53,-14,8,-21,2,-69,-5,72,-35,0,-127,-70,-127,-21,77,123,-20,-67,127,-101,-89,68,40,13,-30,-119,120,46,-48,57,-38,32,-26,1,-17,99,-127,-93,12,-15,-68,-22,16,-65,8,87,125,20,-75,-106,-25,-78,-127,-45,1,-30,-86,111,46,-127,85,-127,127,87,-78,127,-9,-47,-17, 86,127,127,127,-94,-127,109,-68,127,127,-48,-87,-33,127,-19,109,127,-127,46,127,127,-71,127,-111,-127,-127,127,127,-105,127,-50,127,-96,127,127,-124,127,17,36,-74,127,-20,-127,-94,127,-22,127,120,127,-127,127,-127,127,127,-127,127,-96,127,-127,127,-96,127,78,-96,116,127,-28,82,-110,-127,-7,-127,-10,127,127,70,-51,-84,105,-68,34,127,73,127,102,105,-123,127,-102,24,-9,-46,-99,-30,-127,-31, -127,-30,30,-125,52,51,-44,10,-57,4,17,127,-127,119,24,84,-34,49,127,17,20,-3,51,-19,42,35,46,48,-18,4,4,8,-45,-28,93,127,5,-37,-127,-90,-53,-49,54,-16,-75,-64,-74,-127,53,81,-19,-17,123,29,96,-57,127,-36,48,-49,-10,-48,-127,-100,-127,-3,-64,-82,-12,-3,-127,-16,59,-112,35,127,-77,-8,-50,-14,-62,7,-56,-100,4,43,-110,84,-34,-88,127,127,-60,-30,-42,-17, 
  /* [0][2][][] */ -24,-21,-12,-85,33,1,17,34,-38,3,43,-38,76,65,-12,-9,-6,-23,-58,-20,-27,-5,-11,-7,-6,-37,62,29,-34,-2,-38,-7,76,-4,40,4,4,-58,-8,15,-40,75,37,29,6,26,-58,-22,-26,-9,-26,28,-1,-40,15,-28,19,-33,15,-47,7,34,12,45,-52,-19,122,-42,34,18,12,-17,64,-1,-4,-72,-18,20,-29,-106,-93,18,-127,-43,21,13,74,0,17,-9,19,-45,-16,-6,-15,-22, 0,-67,23,-73,-15,-10,59,127,-82,71,127,-25,-6,67,127,127,-10,-56,124,-39,-33,-24,90,29,9,-62,35,41,-54,18,-125,-58,-29,-24,-60,20,-69,-101,40,1,-27,-127,-51,127,34,-45,11,-22,36,-5,-12,10,60,55,-73,-77,-60,-57,38,-74,127,55,78,71,-127,-44,-24,-127,127,12,-70,18,73,-34,-15,-29,-21,-45,7,53,-59,-5,-124,-98,81,-127,43,-7,8,-28,73,-58,12,-92,-34,127, -16,0,-16,-59,24,-14,23,25,-36,2,27,49,74,33,-1,-14,-11,2,61,-19,-2,4,8,-20,-10,-64,-47,6,-28,3,-46,-10,58,7,8,3,-2,-68,-32,4,-33,-26,2,33,-5,-3,-48,-17,-49,-9,-22,21,-15,-50,20,-11,57,-16,7,-39,4,50,9,73,-38,-17,-25,-3,37,1,-62,-1,24,-77,-32,-1,12,-4,126,-23,-30,13,-98,-15,-9,24,92,52,47,-26,34,22,-22,-12,-26,-17, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0077074058353900909, 0.019418846815824509, 0.010111084207892418, 0.0066780042834579945, 0.0070666666142642498, 0.026312556117773056, 0.0030052829533815384, 0.0092987800016999245, 0.0096563622355461121, 0.0063766906969249249, 0.011193766258656979, 0.0085117742419242859, 0.0081467367708683014, 0.0028230694588273764, 0.012338691391050816, 0.0046776179224252701, 0.016042981296777725, 0.012119129300117493, 0.0037157929036766291, 0.014764298684895039, 0.011424846947193146, 0.013850006274878979, 0.010122837498784065, 0.0084179816767573357, 0.17172931134700775, 0.0054256347939372063, 0.0071286200545728207, 0.0054805935360491276, 0.0141887366771698, 0.0059957616031169891, 0.0074109155684709549, 0.013710995204746723, 0.0040416358970105648, 0.024063551798462868, 0.0040437839925289154, 0.0082974638789892197, 0.012338998727500439, 0.0039761615917086601, 0.0080598639324307442, 0.0051758298650383949, 0.026555288583040237, 0.008490060456097126, 0.010516300797462463, 0.0084829702973365784, 0.010419528000056744, 0.011977089568972588, 0.010734285227954388, 0.0081788795068860054, 0.0059503410011529922, 0.024769848212599754, 0.012767862528562546, 0.0086681321263313293, 0.0072507108561694622, 0.0055851885117590427, 0.013877691701054573, 0.0060552870854735374, 0.006017021369189024, 0.014965187758207321, 0.028623104095458984, 0.012569340877234936, 0.011955981142818928, 0.012918718159198761, 0.0084654781967401505, 0.0050497697666287422, 0.0071512581780552864, 0.020754735916852951, 0.0062214154750108719, 0.0036062647122889757, 0.012953208759427071, 0.022756714373826981, 0.0045805214904248714, 0.017119169235229492, 0.012984722852706909, 0.0086517622694373131, 0.0044393925927579403, 0.010597622953355312, 0.0024874648079276085, 0.009804166853427887, 0.0043695359490811825, 0.0062414258718490601, 0.0058920513838529587, 0.01013285294175148, 0.0043701338581740856, 0.0090946303680539131, 0.002995666116476059, 0.011448362842202187, 0.0045045786537230015, 0.005764535628259182, 0.0041123675182461739, 0.0095156477764248848, 0.0033287485130131245, 0.012287503108382225, 0.0091111715883016586, 0.0083877025172114372, 0.0070696147158741951, 0.011396551504731178, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1934, 7541, 311, 1675, 1498, 12479, 26, 1764, 20734, -552, 15447, 2572, 4847, 58, 3033, 472, 3718, 3174, -95, 12025, 562, 4258, -1108, 476, -8912, 1392, 3460, 1517, 8681, 1065, 3272, 2970, 2139, 12234, 3481, 4728, 3180, 1783, 4005, 2556, 14388, 1898, 1411, 918, 947, 8924, 7972, 8459, 2160, -928, 1514, 5179, 3127, -2522, 5904, 67, 1724, 13100, 1966, 1041, 2696, 6671, 3901, -262, 8997, 14652, 1974, 3125, 6180, 5753, 2495, 2274, -3407, 7346, 1182, 5680, 951, 12293, 3935, 10999, 4053, 1025, 3942, 9148, -571, 9829, 2523, 1861, -943, 2143, 1082, 12014, 3172, 2793, 3522, 4217, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00024835686781443655, 0.00011195745173608884, 0.00025183660909533501, 0.00024091708473861217, 0.0002581118606030941, 7.3213763243984431e-05, 0.00025583003298379481, 0.00017120210395660251, 4.7720608563395217e-05, 0.0001324932964053005, 6.0218691942282021e-05, 0.00013849024253431708, 0.00010794799891300499, 0.00053527916315943003, 0.00017893142648972571, 0.0001868661493062973, 0.00019184849224984646, 0.00019432704721111804, 0.00021241753711365163, 7.398184243356809e-05, 0.00039468635804951191, 0.00017791193386074156, 0.00026177623658441007, 0.00025046046357601881, 8.7789892859291285e-05, 0.00022225327847991139, 0.00018124358030036092, 0.00023222110758069903, 0.00010947309056064114, 0.00025610026204958558, 0.00022280197299551219, 0.00017907981236930937, 0.00021876140090171248, 7.0353569753933698e-05, 0.00015647693362552673, 0.00015412633365485817, 0.00018896420078817755, 0.00021849076438229531, 0.00014838675269857049, 0.00017612196097616106, 7.0875270466785878e-05, 0.00017519302491564304, 0.00019757264817599207, 0.00019718836119864136, 0.00024924936587922275, 0.00010445335647091269, 9.70552719081752e-05, 9.1102956503164023e-05, 0.00018983274640049785, 0.00029048381838947535, 0.00029088140581734478, 0.00013619057426694781, 0.00015911711670923978, 0.00018743865075521171, 0.00013686589954886585, 0.00046255806228145957, 0.00017391459550708532, 6.3810657593421638e-05, 0.00017295684665441513, 0.00019401621830184013, 0.00017430241859983653, 0.00010619431122904643, 0.00015188618272077292, 0.00027843363932333887, 0.00010491549619473517, 6.1006543546682224e-05, 0.00023539084941148758, 0.00021273159654811025, 0.00010423092317068949, 9.5116680313367397e-05, 0.00020986516028642654, 0.00014156631368678063, 0.00016349548241123557, 0.00011346559767844155, 0.00027971278177574277, 0.00014640069275628775, 0.00019211879407521337, 7.8489305451512337e-05, 0.00015806777810212225, 9.1990361397620291e-05, 0.00012053111277054995, 0.00018306479614693671, 0.0001243705628439784, 9.9003082141280174e-05, 0.00014091622142586857, 7.3420131229795516e-05, 0.00023793963191565126, 0.00023196787515189499, 0.00025020152679644525, 0.00024868006585165858, 0.00020930446044076234, 8.0900361353997141e-05, 0.0001853654976002872, 0.00012966603389941156, 0.00015645106032025069, 0.00015547695511486381, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 48,-6,3,43,-127,-16,60,34,32,51,-3,8,-6,-17,17,28, 
  /* [1][0][][] */ -40,0,-80,5,104,127,22,-2,-34,10,-37,37,-40,116,-42,-17, 
  /* [2][0][][] */ -64,87,84,-8,89,92,8,41,35,-9,75,11,36,-127,-20,32, 
  /* [3][0][][] */ 127,-17,30,8,53,20,-17,36,67,37,-35,-2,-78,59,-34,40, 
  /* [4][0][][] */ -53,10,5,-2,-62,60,-23,-64,-11,19,15,-46,1,8,-13,127, 
  /* [5][0][][] */ -127,5,15,-16,104,67,8,-36,-59,27,-50,-29,-15,63,-56,14, 
  /* [6][0][][] */ -127,1,-25,7,-27,-53,37,21,20,-44,-62,36,9,-3,-27,12, 
  /* [7][0][][] */ 44,95,71,-46,62,65,127,14,4,2,18,56,123,53,-21,5, 
  /* [8][0][][] */ -55,-37,-72,85,-39,69,-68,-42,4,-43,127,49,88,51,-109,-9, 
  /* [9][0][][] */ 5,-127,-26,101,-72,-79,-5,94,47,33,36,75,-72,10,5,-22, 
  /* [10][0][][] */ 1,-22,-59,19,-127,73,52,-72,-31,-68,68,-22,25,50,-50,53, 
  /* [11][0][][] */ -118,-101,-4,-44,35,127,56,-33,-37,33,-14,-108,64,97,-119,123, 
  /* [12][0][][] */ -31,-94,-111,101,-85,-123,-23,108,127,103,-104,93,-52,-117,0,-38, 
  /* [13][0][][] */ -55,-18,-48,3,1,4,38,16,-28,127,-8,-19,50,32,10,0, 
  /* [14][0][][] */ -127,-17,-22,-40,-84,57,-22,-111,93,-56,111,0,74,-41,-104,-114, 
  /* [15][0][][] */ -1,-127,91,-50,-51,-42,3,63,21,-47,-85,-27,80,-27,-31,-59, 
  /* [16][0][][] */ -7,-33,3,-35,46,10,-20,8,52,-127,61,0,-18,-15,-90,-83, 
  /* [17][0][][] */ -59,-8,8,-50,19,-13,-40,-20,73,-69,41,81,126,-50,-55,-127, 
  /* [18][0][][] */ 56,9,19,-127,32,-44,117,-40,29,92,-19,83,-36,91,-52,-121, 
  /* [19][0][][] */ -22,16,-55,-114,-120,91,3,-17,38,-32,23,-127,2,-38,-30,48, 
  /* [20][0][][] */ 5,38,52,-43,60,19,-16,76,-71,-127,17,-88,-12,94,-2,9, 
  /* [21][0][][] */ 2,-45,-127,-18,83,12,42,66,-61,2,2,13,22,-77,-16,11, 
  /* [22][0][][] */ 36,-16,33,-1,1,0,46,27,19,93,41,31,16,3,127,-3, 
  /* [23][0][][] */ -127,-60,-28,39,46,26,-29,3,-21,73,-8,-60,-1,87,124,113, 
  /* [24][0][][] */ 30,-2,41,22,9,-83,11,-55,29,119,-127,62,-30,-78,78,-77, 
  /* [25][0][][] */ 115,-50,90,127,41,17,-6,48,-121,82,46,-23,-5,33,34,-26, 
  /* [26][0][][] */ -28,22,18,36,-58,89,-16,52,-52,-36,-75,30,0,26,32,-127, 
  /* [27][0][][] */ 28,3,4,-77,-35,28,-79,-14,-107,-16,-76,-60,-96,26,-8,127, 
  /* [28][0][][] */ -83,13,50,3,34,-38,-127,12,-10,-15,0,4,7,-10,-73,-47, 
  /* [29][0][][] */ -35,-127,-22,87,-54,4,112,7,66,57,-115,75,41,-23,-35,72, 
  /* [30][0][][] */ 58,-29,-24,-1,-127,-6,16,-39,34,22,3,5,16,55,20,28, 
  /* [31][0][][] */ -127,-37,14,100,-15,-19,-66,-8,-34,-28,-37,-34,-29,-22,-27,62, 
  /* [32][0][][] */ -114,-70,-78,-56,-127,-13,2,-40,124,47,-62,-69,-10,9,38,4, 
  /* [33][0][][] */ -23,11,-89,38,-127,-86,33,17,-107,5,-30,-65,-21,104,75,88, 
  /* [34][0][][] */ 17,4,5,28,-59,-37,26,34,-1,-127,4,30,-38,-24,32,75, 
  /* [35][0][][] */ 13,-2,-70,-30,-104,8,94,-27,35,58,-28,9,20,109,29,127, 
  /* [36][0][][] */ 19,39,-56,41,127,-8,51,32,-76,38,-67,-108,20,-32,9,-3, 
  /* [37][0][][] */ -127,68,13,-102,47,-71,-37,-65,-7,-15,-12,70,45,-70,-1,-127, 
  /* [38][0][][] */ 15,51,22,-74,-127,-32,-116,-38,-88,-61,72,40,-65,-72,22,-25, 
  /* [39][0][][] */ 29,-25,-22,48,-17,65,96,-46,-70,41,5,-41,-18,94,63,127, 
  /* [40][0][][] */ 92,13,127,125,-58,-59,-6,23,-75,78,11,6,-91,1,63,-44, 
  /* [41][0][][] */ -27,-13,18,63,-70,112,-7,49,-60,37,-102,28,25,42,45,-127, 
  /* [42][0][][] */ -64,-71,41,-50,109,106,103,-1,-61,-127,-92,-87,-43,-20,16,72, 
  /* [43][0][][] */ -25,-75,-63,34,127,34,-19,75,-111,-25,-88,-71,114,-19,-24,74, 
  /* [44][0][][] */ -51,-81,-49,-127,28,105,22,-25,-63,-52,-54,57,-2,26,36,65, 
  /* [45][0][][] */ 7,-37,-44,-14,-127,57,-32,-31,94,-58,36,-68,0,-6,-38,23, 
  /* [46][0][][] */ -13,-43,-7,5,111,-127,-17,97,29,-12,27,110,-92,-12,53,-100, 
  /* [47][0][][] */ -90,-38,-34,49,-21,12,48,-28,-7,107,86,83,-15,65,-4,127, 
  /* [48][0][][] */ 22,-2,-65,-78,36,-81,1,64,48,-58,8,38,-57,35,-47,-127, 
  /* [49][0][][] */ 59,33,3,34,-19,-19,19,46,-38,127,-25,34,-42,-40,81,61, 
  /* [50][0][][] */ 12,19,21,-8,-127,-7,-2,-65,57,33,5,53,-19,-61,14,4, 
  /* [51][0][][] */ 20,24,-26,-127,-29,114,25,-69,11,32,45,-56,55,57,-33,30, 
  /* [52][0][][] */ 33,-17,-7,-111,84,-127,14,-59,52,-39,124,-100,53,-19,-24,122, 
  /* [53][0][][] */ -67,-98,12,5,-40,-127,-19,-80,-26,84,-66,111,-49,-14,46,-78, 
  /* [54][0][][] */ 54,44,17,-15,-127,-36,-57,-102,2,-21,54,24,-64,-37,27,15, 
  /* [55][0][][] */ 11,16,-6,59,-31,14,17,-13,-2,127,15,60,11,21,5,39, 
  /* [56][0][][] */ 24,-110,-69,69,-46,86,37,41,71,5,84,11,-32,-51,25,127, 
  /* [57][0][][] */ 59,61,127,-57,106,18,4,-20,112,-42,1,113,49,-24,36,-63, 
  /* [58][0][][] */ 64,-43,-30,-60,12,7,-9,127,18,75,-12,14,10,-4,85,8, 
  /* [59][0][][] */ -38,64,22,-62,-3,-102,4,6,14,13,-108,-76,-127,-30,78,8, 
  /* [60][0][][] */ 58,-41,58,25,-5,-31,27,-95,0,127,-13,103,28,0,-44,-28, 
  /* [61][0][][] */ 70,127,48,-38,-44,-87,-1,-101,-50,12,-60,19,-38,-30,63,76, 
  /* [62][0][][] */ 4,72,-60,49,-70,127,-63,30,-25,-13,-42,21,-5,2,100,-100, 
  /* [63][0][][] */ 67,-19,-76,-127,-44,-28,65,-52,-3,-86,-1,8,-29,56,65,-38, 
  /* [64][0][][] */ -34,-8,11,-36,60,-82,28,114,-127,-6,-74,-61,-36,71,55,18, 
  /* [65][0][][] */ -80,1,-42,-45,80,79,-4,-105,-127,-56,1,-39,-111,96,-57,73, 
  /* [66][0][][] */ -12,68,-21,25,-67,127,-19,43,-68,14,-19,56,-32,61,43,-82, 
  /* [67][0][][] */ 9,-22,-51,-25,52,-95,81,-84,7,33,-34,124,-71,-11,-43,-127, 
  /* [68][0][][] */ 24,-88,-32,98,-17,-33,7,71,49,94,112,27,-127,70,-17,-15, 
  /* [69][0][][] */ 41,53,25,-106,-18,-14,-81,63,33,75,89,34,127,-118,110,-71, 
  /* [70][0][][] */ 55,44,47,-40,108,1,-127,-51,-119,-82,-12,41,-35,59,-85,-13, 
  /* [71][0][][] */ -1,-70,56,-57,85,-4,54,20,-108,103,-127,-10,45,119,-3,52, 
  /* [72][0][][] */ 0,13,79,16,-42,-38,-63,-49,-1,41,-23,59,41,123,-127,-16, 
  /* [73][0][][] */ -16,-50,-9,-24,37,-95,40,-36,53,73,95,0,31,0,-68,127, 
  /* [74][0][][] */ 12,5,-29,54,-71,-14,81,46,90,80,11,127,120,25,-40,-4, 
  /* [75][0][][] */ -35,34,-34,64,-55,127,-10,44,-46,28,-40,49,-6,69,30,-66, 
  /* [76][0][][] */ -91,84,-80,42,-95,68,-11,6,14,47,-35,-30,42,-66,-127,88, 
  /* [77][0][][] */ 89,106,-122,127,44,84,65,18,27,2,86,-39,90,32,94,49, 
  /* [78][0][][] */ -2,-39,8,-74,53,-103,36,-42,46,32,114,-28,1,-25,-41,127, 
  /* [79][0][][] */ -65,43,5,14,11,-15,-12,-8,-127,-6,28,-2,93,39,-85,-22, 
  /* [80][0][][] */ -127,-6,71,5,85,69,-34,-84,-81,58,-87,-75,-32,-103,39,61, 
  /* [81][0][][] */ 90,65,-47,13,32,-33,78,118,-125,127,-68,-61,-58,23,124,126, 
  /* [82][0][][] */ 92,98,-43,-45,-48,-53,107,-73,29,8,-74,30,127,-7,79,-58, 
  /* [83][0][][] */ 19,-30,14,33,-28,25,-12,-120,42,-50,121,19,13,-76,-75,-127, 
  /* [84][0][][] */ -127,-95,-15,-58,-7,116,93,-20,83,88,85,115,83,82,-114,0, 
  /* [85][0][][] */ 126,3,94,-75,59,-30,-41,88,40,122,-52,-7,-48,51,127,-6, 
  /* [86][0][][] */ -68,48,-51,10,23,105,25,-15,68,33,127,-39,-13,54,-14,-32, 
  /* [87][0][][] */ -6,-67,23,-43,49,-127,26,-21,51,-10,61,-29,29,-28,-46,64, 
  /* [88][0][][] */ -89,34,46,-10,109,-44,8,28,-71,-46,100,-38,79,127,92,-118, 
  /* [89][0][][] */ -47,35,-4,17,-6,127,-11,17,-50,18,-59,10,-2,49,10,-52, 
  /* [90][0][][] */ 10,-103,15,30,127,7,25,32,-16,-99,-116,-9,5,22,-90,44, 
  /* [91][0][][] */ -22,57,-9,-9,-15,-47,-31,56,-91,-2,-46,-84,-127,-45,-43,39, 
  /* [92][0][][] */ 27,46,54,43,-127,-71,23,10,-37,17,-2,-39,-40,-48,-6,10, 
  /* [93][0][][] */ 15,-127,-104,40,-73,-95,-25,107,81,101,-7,86,-49,106,22,-25, 
  /* [94][0][][] */ 80,13,78,0,54,-35,20,85,28,86,33,80,0,19,127,-2, 
  /* [95][0][][] */ -76,-62,-35,21,127,-3,37,73,-43,-16,-55,-46,2,34,-55,34, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0043911286629736423, 0.0019794884137809277, 0.0044526527635753155, 0.0042595877312123775, 0.004563603550195694, 0.0012944721383973956, 0.0045232595875859261, 0.0030269764829427004, 0.00084373477147892118, 0.0023425770923495293, 0.0010647098533809185, 0.0024486072361469269, 0.001908598467707634, 0.0094641214236617088, 0.0031636366620659828, 0.0033039283007383347, 0.0033920195419341326, 0.003435842227190733, 0.0037556951865553856, 0.001308052334934473, 0.0069783395156264305, 0.0031456111464649439, 0.0046283924020826817, 0.0044283214956521988, 0.0015521885361522436, 0.00392959825694561, 0.0032045170664787292, 0.0041058366186916828, 0.0019355631666257977, 0.0045280372723937035, 0.0039392993785440922, 0.0031662601977586746, 0.0038678592536598444, 0.0012439017882570624, 0.0027666250243782997, 0.002725064754486084, 0.0033410233445465565, 0.0038630741182714701, 0.0026235848199576139, 0.0031139631755650043, 0.0012531258398666978, 0.0030975388363003731, 0.0034932268317788839, 0.0034864323679357767, 0.0044069085270166397, 0.0018468106864020228, 0.0017160071292892098, 0.0016107659321278334, 0.0033563796896487474, 0.0051359632052481174, 0.0051429928280413151, 0.0024079475551843643, 0.002813305240124464, 0.003314050380140543, 0.0024198878090828657, 0.00817835982888937, 0.0030749354045838118, 0.0011282183695584536, 0.0030580016318708658, 0.003430346492677927, 0.0030817924998700619, 0.0018775919452309608, 0.0026854572352021933, 0.0049229073338210583, 0.0018549815285950899, 0.0010786396451294422, 0.0041618798859417439, 0.0037612479645758867, 0.0018428778275847435, 0.0016817314317449927, 0.0037105672527104616, 0.0025029943790286779, 0.0028907179366797209, 0.0020061535760760307, 0.0049455235712230206, 0.0025884697679430246, 0.0033967986237257719, 0.0013877474702894688, 0.0027947523631155491, 0.0016264559235423803, 0.0021310769952833652, 0.0032367175444960594, 0.0021989610977470875, 0.0017504458082839847, 0.0024915002286434174, 0.0012981208274140954, 0.0042069442570209503, 0.0041013592854142189, 0.0044237431138753891, 0.0043968427926301956, 0.0037006537895649672, 0.0014303766656666994, 0.0032773956190794706, 0.0022925888188183308, 0.0027661675121635199, 0.0027489445637911558, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -9291, 8633, -23890, 3223, 14489, -13302, -38800, -6285, -8846, 12437, -18213, -9943, 9279, -11538, 1019, -383, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014133297372609377, 9.7491581982467324e-05, 0.00014508089225273579, 0.00011516630183905363, 9.3650531198363751e-05, 0.00014736480079591274, 9.023021993925795e-05, 0.00012256075569894165, 8.4942876128479838e-05, 7.9334211477544159e-05, 0.00015957733558025211, 0.00010933449084404856, 0.0001250080531463027, 6.6653527028393e-05, 9.482091263635084e-05, 0.00014078216918278486, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 28,27,37,-46,88,83,-53,66,-9,124,4,54,-40,39,-15,56,34,86,39,-57,-77,74,-21,60,47,73,46,62,-46,-36,-14,80,-33,4,-73,48,69,-127,-35,-3,39,-19,49,-11,3,-71,-52,2, 
  /* [1][0][][] */ -48,-17,-68,-43,13,81,-43,16,-13,-22,-43,46,47,-29,-14,-14,-34,-40,0,24,-51,44,-118,-40,-54,-29,41,59,-31,-7,44,-40,1,-66,-32,46,18,-54,127,-47,-20,23,-52,-10,27,41,33,25, 
  /* [2][0][][] */ -2,0,61,-36,-9,-72,33,24,117,86,-64,31,116,-43,127,90,-68,-15,-36,27,96,-88,-37,-110,-1,-18,49,-61,45,51,-44,21,31,-37,49,46,-79,25,12,-45,40,29,64,-17,33,-91,119,-57, 
  /* [3][0][][] */ 41,2,-39,-27,19,119,17,-16,44,-52,27,-34,-49,10,16,28,-31,-71,50,-124,-4,-16,-15,-16,-53,78,127,60,-12,-52,25,45,52,-29,111,22,-42,-57,8,22,30,21,-18,-6,35,25,-5,-38, 
  /* [4][0][][] */ 122,-12,-13,-45,88,88,54,-7,60,-16,-102,32,38,-34,7,-19,-95,-127,-16,-93,-12,41,-39,-29,-70,118,-107,126,-58,-65,27,69,51,-48,21,-18,10,-3,-21,29,-62,-15,-8,66,-53,111,-47,-46, 
  /* [5][0][][] */ -4,-1,-62,6,-39,60,22,-21,56,59,35,95,75,-44,36,-10,-41,127,-17,38,12,8,-78,-33,50,-9,-77,-36,-8,32,21,-14,-42,3,39,21,-53,0,-96,24,87,-24,29,49,-15,11,-59,37, 
  /* [6][0][][] */ 71,24,4,64,7,-21,103,-45,-17,58,127,113,50,28,-65,59,38,-43,-64,80,57,-59,-36,49,-69,60,84,-18,114,46,-13,9,101,-68,-110,-19,100,31,12,15,17,42,52,-26,47,127,27,3, 
  /* [7][0][][] */ -98,-1,-21,34,-48,-57,7,28,76,109,-59,-90,-126,29,-18,-25,-90,117,8,114,-58,40,29,55,-20,-99,-18,-79,38,36,-13,10,-7,12,16,-12,5,-65,127,-7,13,55,33,-16,73,74,-31,6, 
  /* [8][0][][] */ -16,-101,69,-66,87,-66,81,-38,-30,-109,21,1,-34,14,26,42,-4,5,-50,118,9,34,-18,25,59,6,-57,-45,-125,-17,-61,-123,0,-49,-3,87,-8,37,122,35,24,6,64,127,-24,-86,-43,77, 
  /* [9][0][][] */ 15,-24,15,-56,31,83,-48,39,13,-28,-37,-12,18,-50,90,-10,12,-119,38,35,-71,45,51,-54,-3,-83,-31,76,44,56,-48,-20,-49,20,-20,127,-20,-59,-50,3,-16,8,34,94,46,80,-69,17, 
  /* [10][0][][] */ -13,29,-10,-5,49,26,-69,-37,49,48,63,-3,-29,12,40,-43,-53,127,-4,54,-4,-14,17,19,-46,46,18,94,26,9,-31,-15,72,16,-16,25,-15,-45,-33,13,-87,9,25,-10,9,43,36,29, 
  /* [11][0][][] */ -36,48,-21,31,39,52,7,9,25,11,-127,-81,49,21,-8,-32,9,28,-37,-57,0,-25,117,0,32,3,-25,39,-2,10,-13,61,17,-1,-54,-9,43,79,108,-3,30,-44,59,4,-36,-17,92,-15, 
  /* [12][0][][] */ -49,-4,34,9,-68,-58,-7,12,-35,-25,-127,19,76,-97,5,36,43,81,66,-98,-49,52,-44,-78,9,-14,33,-38,10,19,-17,62,62,75,30,-29,-47,-34,11,16,-23,23,42,-8,22,-19,-46,-25, 
  /* [13][0][][] */ -76,-109,-44,-99,-2,16,62,10,-117,17,127,-55,64,39,121,0,119,35,-3,-105,79,-96,119,-9,-81,6,-20,20,-45,-104,-110,31,55,-27,-79,48,5,-59,89,-55,-16,53,82,28,70,-31,95,-69, 
  /* [14][0][][] */ 79,14,-46,4,-42,12,-108,-36,-36,60,55,44,-31,-76,12,-50,53,-123,28,13,63,-51,23,2,3,123,-99,6,-59,-22,-105,-2,127,36,91,-31,-70,-3,-47,63,10,-34,99,-38,-59,-61,-79,67, 
  /* [15][0][][] */ -55,12,32,22,87,1,2,37,-1,80,-11,62,63,-16,-34,-23,3,35,-9,-43,28,-30,-56,-55,53,-73,-42,52,-30,4,22,12,-61,2,127,-9,-87,13,51,-14,-64,-26,22,-2,-44,-19,-21,3, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0060066515579819679, 0.004143392201513052, 0.0061659379862248898, 0.0048945676535367966, 0.0039801476523280144, 0.0062630041502416134, 0.0038347842637449503, 0.0052088317461311817, 0.0036100721918046474, 0.0033717039041221142, 0.0067820367403328419, 0.0046467157080769539, 0.0053128418512642384, 0.0028327747713774443, 0.0040298886597156525, 0.0059832418337464333, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 16378, 598, 18867, 1429, 18960, -1725, 39682, 1011, 8872, 54346, 12205, 32770, -1763, 10293, 36105, 25153, 2697, 11678, -4223, 63525, 3295, 18417, 3661, 27180, 10795, 39277, 12662, -2086, 1485, 17848, 18713, -264, 376, 1576, 4424, 15467, 5476, 44833, 1606, 13171, 31418, 573, 1033, 16413, 3655, 5045, 45463, 25842, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.9485129390377551e-05, 0.00013333008973859251, 6.7766697611659765e-05, 0.00011843098036479205, 0.00010993730393238366, 8.4056242485530674e-05, 6.4769614255055785e-05, 0.00028517108876258135, 0.00010282454604748636, 3.219220889150165e-05, 4.5158503780839965e-05, 8.3989820268470794e-05, 7.4367519118823111e-05, 0.00014975760132074356, 4.2942574509652331e-05, 6.8883877247571945e-05, 0.00011069112224504352, 3.5113655030727386e-05, 0.00015797704691067338, 3.0732440791325644e-05, 3.7917066947557032e-05, 5.8655616157921031e-05, 7.9671321145724505e-05, 0.00011656140122795478, 5.8831072237808257e-05, 5.6396798754576594e-05, 3.0926443287171423e-05, 3.929239755962044e-05, 0.00030036881798878312, 5.4111722420202568e-05, 0.00010038132313638926, 0.00022235214419197291, 0.00012450337817426771, 0.000168084297911264, 6.1532213294412941e-05, 6.0283200582489371e-05, 8.9881250460166484e-05, 4.0698050725040957e-05, 8.4941151726525277e-05, 0.00012891950609628111, 5.5060838349163532e-05, 0.00019179083756171167, 0.00053364137420430779, 7.0683090598322451e-05, 0.00014345449744723737, 4.5590684749186039e-05, 5.0779268349288031e-05, 4.5523906010203063e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -83,69,-127,90,-46,126,-61,64,-64,-51,72,-94,105,-78,-36,-57,64,112,107,-58,73,-127,93,-127,-43,-57,120,127,-100,-74,-98,119,63,-79,72,-98,-127,-118,107,11,-28,-90,75,-106,87,100,-71,-26, -127,84,-62,127,-84,112,-29,97,-120,-80,90,-88,92,-119,-94,-82,97,110,127,-69,88,-112,103,-108,-109,-72,99,99,13,-74,-58,127,60,-127,107,-118,-86,-114,111,-31,-108,110,66,-127,-62,109,-127,-80, -55,63,-17,43,-53,63,-52,2,-78,-30,46,-35,90,-2,-31,0,45,97,101,-11,84,-56,54,-73,-48,-29,58,74,85,-17,-58,64,60,-71,48,-58,-28,-115,56,-25,-109,-31,56,-39,-96,83,-68,-85, 
  /* [0][1][][] */ -79,96,-64,119,-54,127,-127,127,-84,-116,87,-97,120,-84,-84,-77,99,111,-35,-81,127,-80,94,-102,-46,-103,115,99,-127,-87,-127,55,127,19,94,-127,-100,-127,121,-58,-73,-113,115,-48,127,98,-79,-127, -105,127,-105,127,-127,117,-80,68,-127,-127,127,-127,127,-127,-127,-127,127,127,-50,-127,122,-57,127,-116,-127,-127,127,104,-13,-127,-64,70,117,14,127,-125,-99,-109,127,-127,-127,127,127,-102,-55,127,-85,-91, -50,95,-58,71,-57,66,-67,81,-79,-51,43,-62,90,-42,-24,-14,73,79,-15,-55,83,-49,50,-63,-115,-70,81,70,81,-21,-68,42,72,-1,73,-36,9,-105,76,-43,-67,-51,79,-46,-111,89,-46,-99, 
  /* [0][2][][] */ -69,74,-31,78,-70,72,-111,-5,-25,-64,28,-85,57,-45,-38,-85,39,77,-51,-34,52,-38,53,-44,-10,-12,61,39,-75,-73,-47,19,58,51,44,-66,21,-96,21,-31,-111,-64,9,-90,79,41,-96,-39, -102,73,-83,63,-77,31,-94,-7,-40,-58,41,-77,82,-86,-57,-69,66,75,-80,-50,47,-80,53,-82,-67,-57,70,36,-10,-49,-25,46,73,53,81,-61,-79,-53,38,-50,-65,74,16,-106,-22,71,-113,-51, -64,51,-37,12,-58,36,-77,6,1,-20,9,-52,65,-17,2,-25,33,49,-7,-31,45,-25,35,-44,-36,-14,57,25,70,-4,-21,15,55,34,51,0,57,-65,34,-34,-35,-18,-4,-68,-62,59,-65,-36, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003378117922693491, 0.0056665288284420967, 0.0028800845611840487, 0.0050333165563642979, 0.0046723354607820511, 0.0035723901819437742, 0.0027527085039764643, 0.012119770981371403, 0.0043700430542230606, 0.0013681688578799367, 0.0019192363834008574, 0.0035695673432201147, 0.0031606194097548723, 0.0063646980561316013, 0.0018250594148412347, 0.0029275647830218077, 0.0047043724916875362, 0.0014923303388059139, 0.0067140241153538227, 0.0013061286881566048, 0.0016114752506837249, 0.0024928636848926544, 0.003386031137779355, 0.0049538593739271164, 0.0025003205519169569, 0.0023968638852238655, 0.0013143738033249974, 0.0016699269181117415, 0.012765673920512199, 0.0022997481282800436, 0.0042662061750888824, 0.0094499662518501282, 0.0052913934923708439, 0.0071435826830565929, 0.0026151188649237156, 0.0025620360393077135, 0.0038199529517441988, 0.0017296671867370605, 0.0036099988501518965, 0.0054790792055428028, 0.0023400855716317892, 0.0081511102616786957, 0.022679757326841354, 0.0030040312558412552, 0.0060968161560595036, 0.0019376040436327457, 0.0021581188775599003, 0.0019347659545019269, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1596, -1267, 779, -2494, 3679, -577, 5744, -4240, 1196, 471, 1958, 4654, 32, -542, 823, 3480, -2002, 3267, 5440, 938, -626, 2139, -814, 7751, 1940, 1063, 850, -263, 10128, -2, 2568, -1390, -795, 5226, -846, 1936, 2374, 1568, 565, 4986, 2153, 8734, -4650, 1704, 6374, -449, 1901, 2094, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00034316067467443645, 0.00032231930526904762, 0.00032874528551474214, 0.0002275292354170233, 0.00023167226754594594, 0.00027587960357777774, 0.00015234466991387308, 0.00015108086518011987, 0.0002540704736020416, 0.00040949363028630614, 0.00018500718579161912, 0.00017618424317333847, 0.00043166335672140121, 0.00025105674285441637, 0.00026114913634955883, 0.00021208476391620934, 0.00023590425553265959, 0.0002372171584283933, 0.0001671326463110745, 0.00027923195739276707, 0.00026572082424536347, 0.0002581972221378237, 0.00024668101104907691, 0.00012464818428270519, 0.00020485110871959478, 0.00039861962432041764, 0.00033119972795248032, 0.00038734008558094501, 9.6833493444137275e-05, 0.00035001762444153428, 0.00017326178203802556, 0.00018412206554785371, 0.00021494078100658953, 0.00015211163554340601, 0.00025558093329891562, 0.00029037884087301791, 0.00019964025705121458, 0.00022209550661500543, 0.00029314242419786751, 0.00017206113261636347, 0.00029673328390344977, 0.00010071990254800767, 0.00011763838119804859, 0.00027141405735164881, 0.0001270442153327167, 0.00026583240833133459, 0.00027942369342781603, 0.00023710007371846586, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 82,27,127,-36,62,117,-65,-66, 
  /* [1][0][][] */ 3,-85,-127,22,55,37,28,11, 
  /* [2][0][][] */ -127,-13,-64,-21,69,26,-85,-49, 
  /* [3][0][][] */ 21,60,127,-68,-11,-107,-2,-20, 
  /* [4][0][][] */ -127,28,-51,-26,50,14,-36,-60, 
  /* [5][0][][] */ -81,18,-53,-16,13,12,-86,-127, 
  /* [6][0][][] */ -24,-127,-112,47,114,0,11,46, 
  /* [7][0][][] */ -49,-127,-76,-83,-73,-61,22,68, 
  /* [8][0][][] */ 91,32,-12,-4,111,-88,-127,7, 
  /* [9][0][][] */ -34,44,-56,75,-52,-27,127,-35, 
  /* [10][0][][] */ -24,127,32,69,126,-22,-13,50, 
  /* [11][0][][] */ -63,-40,-27,-19,-78,110,127,-21, 
  /* [12][0][][] */ 58,29,-127,49,-11,-44,-60,-11, 
  /* [13][0][][] */ 70,-31,-111,29,-4,-127,-50,-22, 
  /* [14][0][][] */ 4,-61,63,10,127,-82,-52,21, 
  /* [15][0][][] */ -39,-62,-7,127,75,63,-72,24, 
  /* [16][0][][] */ 102,32,-56,30,72,-103,-127,-16, 
  /* [17][0][][] */ 71,127,56,73,46,64,28,-90, 
  /* [18][0][][] */ 32,-4,2,-10,127,-3,22,-22, 
  /* [19][0][][] */ 4,125,29,15,-127,15,30,-33, 
  /* [20][0][][] */ -61,35,85,-122,31,38,-21,127, 
  /* [21][0][][] */ -41,39,40,-127,26,58,9,97, 
  /* [22][0][][] */ -55,-41,-100,8,-107,127,80,-10, 
  /* [23][0][][] */ 121,49,-127,16,-2,-70,-75,-25, 
  /* [24][0][][] */ -64,51,21,10,3,79,-127,123, 
  /* [25][0][][] */ -78,-47,-127,4,-56,-60,56,83, 
  /* [26][0][][] */ 42,20,-36,-28,113,-18,127,-21, 
  /* [27][0][][] */ 127,-65,23,79,1,26,-29,93, 
  /* [28][0][][] */ 27,40,66,-2,127,-41,44,-21, 
  /* [29][0][][] */ -19,10,-40,-30,-91,32,127,-27, 
  /* [30][0][][] */ 42,-98,-28,-76,-127,4,27,-57, 
  /* [31][0][][] */ 13,36,-11,-18,-127,6,-26,-8, 
  /* [32][0][][] */ 34,-58,-48,88,-3,-93,127,-120, 
  /* [33][0][][] */ 119,127,96,87,108,-66,-64,-66, 
  /* [34][0][][] */ -124,-40,127,-13,-29,83,91,-1, 
  /* [35][0][][] */ -23,70,127,7,-74,-58,-23,27, 
  /* [36][0][][] */ -127,-12,125,0,-2,123,89,25, 
  /* [37][0][][] */ -17,-90,-17,-127,-48,-79,77,29, 
  /* [38][0][][] */ 58,-2,94,-86,57,60,-127,10, 
  /* [39][0][][] */ -28,90,-127,-24,-13,8,-5,98, 
  /* [40][0][][] */ 59,-51,8,42,17,9,12,127, 
  /* [41][0][][] */ -44,118,127,3,29,72,-63,43, 
  /* [42][0][][] */ 75,-127,-96,-22,-119,1,19,-109, 
  /* [43][0][][] */ 5,-82,16,-51,127,-42,21,29, 
  /* [44][0][][] */ -8,127,115,68,5,37,-57,41, 
  /* [45][0][][] */ -43,48,10,88,-127,56,-122,27, 
  /* [46][0][][] */ -43,-52,54,57,-85,-127,-41,-11, 
  /* [47][0][][] */ -8,58,64,-118,-127,38,-22,77, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0037018421571701765, 0.0034770162310451269, 0.0035463362000882626, 0.0024544692132622004, 0.0024991622194647789, 0.0029760482721030712, 0.0016434165881946683, 0.001629783189855516, 0.0027407826855778694, 0.0044174082577228546, 0.0019957630429416895, 0.001900585601106286, 0.0046565639786422253, 0.0027082720771431923, 0.0028171434532850981, 0.0022878621239215136, 0.002544814720749855, 0.0025589775759726763, 0.0018029416678473353, 0.0030122117605060339, 0.0028664604760706425, 0.0027852999046444893, 0.0026610686909407377, 0.0013446409720927477, 0.0022098291665315628, 0.0043001049198210239, 0.003572813468053937, 0.0041784271597862244, 0.0010445902589708567, 0.0037758112885057926, 0.0018690596334636211, 0.001986214891076088, 0.0023186714388430119, 0.0016409027157351375, 0.0027570766396820545, 0.0031324585434049368, 0.0021536170970648527, 0.0023958529345691204, 0.0031622708775103092, 0.0018561076140031219, 0.0032010071445256472, 0.0010865149088203907, 0.001269022817723453, 0.0029278763104230165, 0.0013704882003366947, 0.0028676644433289766, 0.0030142799951136112, 0.002557714469730854, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1895, 2332, 19745, -987, 2254, -15888, -3760, -14892, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.4148603491485119e-05, 9.9597455118782818e-05, 0.00015116998110897839, 0.00013092203880660236, 0.00016008157399483025, 0.00012950946984346956, 7.7304204751271755e-05, 9.6004674560390413e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -35,-46,-19,-82,-8,-11,66,89,-102,-87,-42,-37,-53,-8,-85,58,-111,15,48,123,63,-31,30,114,90,115,41,-9,-127,-83,-80,-71,-79,124,51,-70,33,-22,112,21,25,19,10,-112,29,-42,-34,-91, 
  /* [1][0][][] */ -5,52,-17,-30,-62,46,-19,-44,-34,63,-8,-13,35,39,-38,6,-20,-97,75,-44,127,6,-58,25,55,-30,-63,55,27,-17,67,21,-34,-9,-3,-5,0,98,-23,-15,46,38,0,6,78,12,-32,59, 
  /* [2][0][][] */ -41,-41,120,6,102,-41,-9,34,-21,-5,-2,52,29,-38,-50,-127,-52,-93,-41,20,-102,40,-52,-33,-56,52,24,-62,-33,16,-37,-10,-1,3,25,2,25,-39,-39,10,48,-22,35,-44,-30,-33,-58,-51, 
  /* [3][0][][] */ 69,24,55,13,19,-37,30,62,-68,-18,39,-29,-88,34,-10,58,49,35,-1,33,-103,-58,127,-9,-3,-32,-45,-36,-70,63,107,-62,8,-112,-23,42,-15,-55,-30,77,-96,-56,54,8,-111,-89,48,1, 
  /* [4][0][][] */ 16,-15,72,-19,6,-17,4,-1,-51,-14,-32,20,40,-66,45,-93,48,40,-12,-33,8,35,33,20,3,14,67,-10,24,22,-127,-7,-21,-20,12,16,47,-6,36,10,-34,-16,-85,39,-12,-89,11,17, 
  /* [5][0][][] */ 11,-68,70,36,21,21,42,-2,-85,-5,-52,59,60,13,12,-60,96,92,-16,-20,109,-72,127,-101,-16,89,29,47,25,27,-52,-55,-10,-57,-43,11,47,25,81,1,-78,45,45,17,74,-24,84,7, 
  /* [6][0][][] */ -49,45,-108,90,55,38,33,14,-13,-17,43,-62,-85,-3,-40,9,-88,25,-7,81,20,55,-57,-82,-17,-7,26,56,-34,-52,-40,20,39,79,-54,-19,-9,-5,81,12,65,58,-105,-49,-39,127,-38,-42, 
  /* [7][0][][] */ 45,68,-84,29,34,46,109,60,49,87,-101,-14,-24,-5,-53,-30,25,40,111,115,53,-5,127,12,99,120,-56,85,-65,26,1,-70,17,-60,6,18,2,92,-61,74,-63,59,-9,-47,67,-22,52,-39, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0035763154737651348, 0.0042328918352723122, 0.0064247241243720055, 0.0055641862563788891, 0.0068034669384360313, 0.0055041522718966007, 0.0032854287419468164, 0.0040801987051963806, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -542, 21416, -1622, -995, 2345, -1500, 5770, 1093, -3638, 216, -8893, -155, -495, -606, -2494, 3993, 5999, 4253, 1158, -6219, -7530, -2166, 15240, -4260, -4044, -161, 3322, -7979, -671, -161, -5079, 12988, 4559, 913, 2306, 368, -18, -1004, 15711, 5175, 5075, -3939, 11163, 5866, -954, 7683, 905, -1139, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00039609873783774674, 9.7603988251648843e-05, 0.00081207457697018981, 0.00029408268164843321, 0.00023630823125131428, 0.00035463992389850318, 0.00017740998009685427, 0.00044812934356741607, 8.1457415944896638e-05, 0.00033236114541068673, 0.00018462676962371916, 0.0021772701293230057, 0.00069541850825771689, 0.00070385687286034226, 0.00048945698654279113, 0.00080168317072093487, 0.00019845903443638235, 6.7334112827666104e-05, 0.00041115647763945162, 0.00029456272022798657, 0.00020923404372297227, 0.00022688724857289344, 0.00010352798562962562, 0.00056648591998964548, 0.00021383565035648644, 0.0007516699843108654, 0.00043663274846039712, 0.00020778832549694926, 0.00039006155566312373, 0.00054979388369247317, 0.00020885320554953068, 8.2519414718262851e-05, 0.00014214184193406254, 0.00028509460389614105, 0.00014116312377154827, 0.00029701311723329127, 0.0051811770536005497, 0.00033328740391880274, 0.00011640999582596123, 0.00027181024779565632, 0.00024671878782100976, 0.0001264395541511476, 0.00016009135288186371, 0.00013236069935373962, 0.00043189089046791196, 0.00012643843365367502, 5.4267093219095841e-05, 0.00029074560734443367, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -1,-91,15,14,-34,-64,-70,70,-19,3,11,8,56,-10,-31,7,92,6,39,22,3,1,-72,27,-12,13,-32,-3,-46,73,-10,-119,35,-19,-36,-73,-6,-22,-23,0,-24,40,-46,-6,-16,61,127,-19, -127,-127,-16,127,-76,63,-115,127,22,23,19,-5,50,24,7,-37,-22,49,3,1,12,127,3,127,123,-21,-79,51,53,-121,10,-86,69,-10,-42,-122,26,27,-73,-79,-127,-7,-127,-119,33,47,55,102, -17,-62,13,15,-39,51,35,6,-7,-31,5,8,-25,9,16,8,-55,24,-87,-38,-6,-3,127,25,-56,-15,3,32,-10,37,16,-41,-46,-10,-2,87,8,10,6,64,14,-13,9,-30,-10,28,-32,-5, 
  /* [0][1][][] */ -14,-48,-22,0,28,-67,104,-76,1,9,17,28,127,5,-20,-35,-16,-27,21,71,78,-54,32,20,-50,127,-94,-14,127,-91,36,-127,-42,-6,-66,-1,15,-56,-66,-6,115,127,-29,-127,-62,-58,-11,78, 90,-121,127,-8,127,56,-84,-92,45,127,127,-127,-88,127,127,127,127,127,83,127,127,92,-2,10,127,-95,-127,109,41,127,127,41,-127,127,118,127,-127,127,-127,-127,35,35,-119,-36,127,-127,-27,66, 14,-19,-38,-13,-58,127,-127,69,72,-74,4,67,-39,10,23,-68,3,16,-127,12,20,-84,-31,-8,93,-24,6,127,-77,-45,19,-77,-40,12,127,-11,38,-2,-13,-91,94,5,24,35,-54,72,92,-60, 
  /* [0][2][][] */ 4,-18,7,-19,7,-38,-30,23,20,-6,57,5,-11,-10,-15,-6,-58,-3,17,-12,30,-20,91,-23,-83,10,47,-28,29,7,-36,49,27,-18,-45,14,2,1,3,-3,-15,19,-37,-8,-28,20,-33,7, 44,-30,-32,-27,28,30,110,-117,127,-24,6,13,-70,-7,-16,-63,-4,64,0,37,27,29,-28,-50,-75,46,124,-13,-75,20,-51,-60,25,-9,-43,-6,53,1,-18,87,-103,12,-31,42,44,37,-1,-127, 10,-24,2,-10,-9,22,-8,-44,-28,-23,-10,13,8,-10,4,9,48,19,-27,-25,-8,-10,-45,-23,36,-37,70,-1,-14,1,-23,-37,33,-31,-21,-40,-6,4,18,-7,-11,8,-31,3,-18,4,67,-16, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.016834195703268051, 0.0041481694206595421, 0.034513168036937714, 0.012498513795435429, 0.010043099522590637, 0.01507219672203064, 0.0075399237684905529, 0.019045496359467506, 0.0034619402140378952, 0.014125348068773746, 0.0078466376289725304, 0.092533983290195465, 0.029555287212133408, 0.029913915321230888, 0.020801922306418419, 0.034071534872055054, 0.0084345089271664619, 0.0028616997878998518, 0.017474150285124779, 0.012518915347754955, 0.008892446756362915, 0.0096427081152796745, 0.0043999394401907921, 0.024075651541352272, 0.0090880151838064194, 0.031945973634719849, 0.01855689100921154, 0.0088310036808252335, 0.016577616333961487, 0.023366238921880722, 0.0088762613013386726, 0.0035070751328021288, 0.0060410280711948872, 0.012116520665585995, 0.0059994328767061234, 0.012623056769371033, 0.22020001709461212, 0.014164714142680168, 0.0049474248662590981, 0.011551935225725174, 0.01048554852604866, 0.0053736809641122818, 0.0068038823083043098, 0.0056253294460475445, 0.018355362117290497, 0.0053736334666609764, 0.002306351438164711, 0.012356688268482685, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3493, 5223, 15322, 1191, 2610, -1366, 6383, 17163, 5071, -756, 3139, -1792, 23872, -1274, 2305, 19723, -114, 2493, 2337, 3453, 2219, 1636, 299, 31846, 6590, 4039, 12325, 1197, 6509, 7507, 648, 767, 618, 1602, -358, 176, -3019, -361, 2532, 3120, 5622, 1416, 3733, 3799, 5471, 2142, 1686, 8326, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00019838400476146489, 0.00013699360715691, 6.2902108766138554e-05, 0.00022771148360334337, 0.00021475528774317354, 0.0002738960029091686, 0.00013099214993417263, 5.9115089243277907e-05, 0.00011813230230472982, 0.00021997594740241766, 0.00027245562523603439, 0.00019059734768234193, 4.2436800868017599e-05, 0.00032203033333644271, 0.00022346155310515314, 5.3107713029021397e-05, 0.00048599927686154842, 0.00019586460257414728, 0.00016489427071064711, 0.00020057579968124628, 0.00026406097458675504, 0.00030075022368691862, 0.00046316898078657687, 3.5856312024407089e-05, 0.00012812780914828181, 0.00015572461416013539, 8.5942185251042247e-05, 0.00030466480529867113, 0.0001159843013738282, 0.00011998483387287706, 0.00051485182484611869, 0.00050861545605584979, 0.00024990859674289823, 0.00025447882944718003, 0.00035442103398963809, 0.00035167328314855695, 0.00020254898117855191, 0.00033314456231892109, 0.00024478614795953035, 0.0002200574817834422, 0.00015545703354291618, 0.00034184780088253319, 0.00021984384511597455, 0.00019227954908274114, 0.00015844086010474712, 0.0002971217327285558, 0.00039370611193589866, 0.00010406806541141123, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 102,127,-81,-104,12,84,25,65, 
  /* [1][0][][] */ 85,-84,16,-127,-78,90,-56,-69, 
  /* [2][0][][] */ -23,127,106,38,112,-13,55,7, 
  /* [3][0][][] */ 107,56,-86,78,35,-127,-120,-5, 
  /* [4][0][][] */ -56,13,19,-74,-22,119,127,16, 
  /* [5][0][][] */ 39,73,-127,-69,23,96,40,-37, 
  /* [6][0][][] */ 9,127,67,58,85,1,15,-76, 
  /* [7][0][][] */ 118,8,-17,53,37,7,127,41, 
  /* [8][0][][] */ 60,127,75,102,108,105,117,-90, 
  /* [9][0][][] */ 101,106,-127,-113,-18,108,9,78, 
  /* [10][0][][] */ -53,-42,30,-38,-6,-20,-46,127, 
  /* [11][0][][] */ 31,-113,-127,-34,-20,-25,19,-52, 
  /* [12][0][][] */ -26,-118,-117,-27,-127,16,-67,40, 
  /* [13][0][][] */ 0,12,-98,95,-127,-18,9,-23, 
  /* [14][0][][] */ -52,-50,-127,-15,23,-12,-17,-54, 
  /* [15][0][][] */ 28,-127,-114,45,-92,-8,-19,-55, 
  /* [16][0][][] */ 127,-57,-10,62,-61,1,16,107, 
  /* [17][0][][] */ -22,127,113,-28,-42,-6,-21,-25, 
  /* [18][0][][] */ 5,-127,51,55,-14,-57,50,-116, 
  /* [19][0][][] */ 127,-53,-72,25,-84,3,39,79, 
  /* [20][0][][] */ -23,-127,86,72,-5,-88,0,-68, 
  /* [21][0][][] */ -17,-62,-9,-27,127,16,57,20, 
  /* [22][0][][] */ -127,35,-85,40,66,37,-109,-119, 
  /* [23][0][][] */ -100,-45,73,-2,-72,127,125,-30, 
  /* [24][0][][] */ -6,70,12,-21,-13,127,102,42, 
  /* [25][0][][] */ -20,-40,-127,-86,-67,2,-10,-21, 
  /* [26][0][][] */ 1,58,-22,127,-48,17,-82,25, 
  /* [27][0][][] */ -3,-108,41,69,6,-48,0,-127, 
  /* [28][0][][] */ 7,127,78,101,98,-17,5,-31, 
  /* [29][0][][] */ 99,70,1,13,86,-127,-111,63, 
  /* [30][0][][] */ 32,-15,39,-127,28,-20,18,-16, 
  /* [31][0][][] */ 56,-39,-5,60,-6,35,19,127, 
  /* [32][0][][] */ -127,-37,58,-55,-66,118,79,126, 
  /* [33][0][][] */ -52,49,51,-15,18,127,-96,61, 
  /* [34][0][][] */ 16,127,-41,-11,20,37,-63,68, 
  /* [35][0][][] */ -15,-127,39,88,-26,-62,41,-70, 
  /* [36][0][][] */ -18,-31,-78,-5,-127,-56,-13,10, 
  /* [37][0][][] */ -37,-127,67,80,-53,-87,-19,-50, 
  /* [38][0][][] */ -77,19,55,-80,-127,-92,-74,84, 
  /* [39][0][][] */ 70,-127,94,55,-11,-50,1,-86, 
  /* [40][0][][] */ -6,71,15,73,-127,-9,-80,17, 
  /* [41][0][][] */ 85,127,-51,-86,39,36,5,19, 
  /* [42][0][][] */ -6,-61,-26,-2,127,6,35,12, 
  /* [43][0][][] */ 127,44,104,41,-67,-17,77,103, 
  /* [44][0][][] */ 72,43,-16,4,56,-127,-92,12, 
  /* [45][0][][] */ 41,5,14,7,52,-127,-6,-71, 
  /* [46][0][][] */ 53,-32,-7,127,25,49,15,95, 
  /* [47][0][][] */ -127,-66,69,112,-20,25,124,-57, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0027006091549992561, 0.001864899299107492, 0.000856288883369416, 0.0030998452566564083, 0.00292347208596766, 0.0037285569123923779, 0.0017832012381404638, 0.00080473598791286349, 0.0016081396024674177, 0.0029945410788059235, 0.0037089490797370672, 0.0025946090463548899, 0.00057769380509853363, 0.0043838112615048885, 0.0030419907998293638, 0.00072295736754313111, 0.0066159269772469997, 0.0026663125026971102, 0.0022447120863944292, 0.0027304461691528559, 0.0035946723073720932, 0.0040941243059933186, 0.0063051371835172176, 0.0004881133500020951, 0.0017442088574171066, 0.002119885291904211, 0.0011699342867359519, 0.0041474136523902416, 0.0015788987511768937, 0.0016333581879734993, 0.0070086978375911713, 0.0069238021969795227, 0.0034020154271274805, 0.0034642303362488747, 0.0048247473314404488, 0.00478734215721488, 0.0027573071420192719, 0.0045351097360253334, 0.0033322833478450775, 0.0029956509824842215, 0.0021162426564842463, 0.0046535874716937542, 0.002992742694914341, 0.0026175088714808226, 0.0021568615920841694, 0.0040447297506034374, 0.0053595365025103092, 0.0014166826149448752, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 8380, 10538, -5506, 3767, -3818, 2399, -12179, -17388, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021169152751099318, 0.00012562342453747988, 0.00013967636914458126, 0.00013457884779199958, 0.00016627523291390389, 0.00015542136679869145, 0.00018632979481481016, 0.00012931223318446428, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -35,-5,41,6,-29,-13,7,9,-41,-10,-63,-51,-33,-58,-14,-28,39,-36,30,37,-20,27,-41,14,1,-33,46,-13,2,-24,16,14,73,34,29,-127,18,-3,-12,-27,3,-17,35,46,25,6,25,-1, 
  /* [1][0][][] */ 2,18,51,-18,-4,38,-53,-25,1,15,-16,-80,19,103,-22,58,-16,8,-24,-60,10,-63,-26,30,-70,-10,2,-110,-23,-7,38,-50,53,74,-29,10,117,-13,12,48,-27,44,-71,-14,127,-5,-33,-13, 
  /* [2][0][][] */ -6,-29,-60,14,0,45,19,1,-8,43,6,26,70,-77,11,-57,29,-89,28,21,-12,48,-4,20,-17,56,-16,-75,18,1,16,-72,-37,-79,27,-18,95,29,0,-49,-4,25,84,28,127,13,23,22, 
  /* [3][0][][] */ -15,31,-65,47,26,-33,-59,-89,23,-20,-20,-4,6,25,38,85,-4,2,-28,18,10,-88,25,-48,-61,-10,127,-7,-36,14,-62,9,-1,-73,20,-2,-13,-26,-7,72,-34,-24,4,15,38,15,-32,43, 
  /* [4][0][][] */ -31,-52,-12,6,29,-28,-6,-6,24,-22,63,-75,9,28,7,9,-18,-18,17,-22,4,-45,8,-21,17,-11,42,42,41,11,-17,27,-13,-3,0,1,-61,88,38,-17,23,-19,-15,-21,-74,14,127,10, 
  /* [5][0][][] */ 50,-20,5,21,22,-33,22,-127,15,-34,-14,116,-71,71,14,-60,0,-91,18,2,-28,59,-33,-42,-63,84,-21,-5,-23,44,-33,-30,37,45,35,-3,-40,-10,-41,-36,17,-32,-45,0,-30,46,88,19, 
  /* [6][0][][] */ 48,-23,18,-7,-24,-14,-35,10,-32,8,-40,127,-40,-32,-7,56,7,31,29,29,37,-82,-14,17,14,40,-63,-4,13,-35,16,25,5,14,-11,5,11,10,0,-7,-5,-12,37,60,4,-38,76,-11, 
  /* [7][0][][] */ -23,8,-2,70,31,32,5,32,21,-5,80,-6,117,120,47,52,37,51,-9,-7,27,-18,-82,-25,22,1,-27,64,35,-21,-35,-6,36,8,32,-104,-73,36,39,57,-42,26,83,127,-59,-23,-112,51, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0089968899264931679, 0.0053389957174658775, 0.005936245433986187, 0.0057196007110178471, 0.0070666973479092121, 0.0066054076887667179, 0.0079190162941813469, 0.0054957699030637741, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 9015, 4404, 4849, 2560, -1011, -2001, -1621, 37126, 1000, 1363, 7330, 62480, 2288, 6567, 121, 14809, -2011, 12815, -1876, 6657, 9798, 1523, 1485, -8585, 17378, 3003, 1295, 15381, -5361, -5035, -8210, 8880, 5064, -502, 2044, 7416, -11147, 18199, 442, 11329, 1152, -521, 8048, 3711, 1234, -2732, 7515, -52, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.712497997796163e-05, 0.00010419918544357643, 0.0001907375844893977, 0.00018509489018470049, 0.0007966709672473371, 0.000131354303448461, 7.6750402513425797e-05, 7.8180361015256494e-05, 0.00014354514132719487, 8.8347354903817177e-05, 7.5992982601746917e-05, 4.9568512622499838e-05, 7.9284669482149184e-05, 6.0797625337727368e-05, 0.00022432487457990646, 0.00019626357243396342, 0.00013342397869564593, 0.00029775642906315625, 0.00015478518616873771, 0.00011924456339329481, 0.00014453931362368166, 0.00034126269747503102, 0.00012569107639137655, 0.00027421757113188505, 6.9623667513951659e-05, 5.1144073950126767e-05, 4.9686652346281335e-05, 6.6578017140273005e-05, 0.00013397929433267564, 0.00069054600317031145, 0.00027553434483706951, 6.2246930610854179e-05, 8.2792277680709958e-05, 0.00011179326975252479, 0.00017002449021674693, 6.1678780184593052e-05, 5.9492598666111007e-05, 3.4922035411000252e-05, 0.00015197493485175073, 6.5569438447710127e-05, 0.00011916059884242713, 0.00014455034397542477, 6.0559432313311845e-05, 8.3480139437597245e-05, 5.2951130783185363e-05, 0.00045606342609971762, 4.9803838919615373e-05, 0.00018841153359971941, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -37,-112,-43,-42,127,-53,120,-64,-98,-98,-25,-41,127,43,60,-127,50,-29,0,-45,-74,55,-3,0,-42,70,74,-32,97,-55,27,-41,-106,-85,33,82,39,68,114,-37,-127,-29,24,55,77,-126,104,79, -74,-127,-36,51,-78,107,127,-75,-64,29,72,-109,115,88,76,-119,-82,-81,32,-54,-79,24,-59,127,-103,99,74,-127,111,-42,6,-127,-6,-79,61,125,127,104,127,-19,-124,-68,67,97,91,124,110,58, -42,-52,-52,109,-43,-25,51,11,81,26,38,-94,31,73,-62,-21,-79,-19,34,-31,18,-57,-84,1,-81,28,39,-103,27,66,127,-94,-24,5,-12,47,102,53,37,32,-32,106,71,49,50,39,31,-120, 
  /* [0][1][][] */ -57,-83,-37,-93,-65,-75,88,-119,-127,-127,90,-88,112,75,-120,-41,127,-127,-55,-114,-123,-11,-57,-13,-51,93,112,-55,-97,-60,-3,-38,-121,-127,-127,77,56,108,18,-97,41,-36,99,108,112,127,127,-127, -127,-111,-61,-109,-23,127,127,-127,66,52,127,-127,91,127,67,-113,57,-68,-127,-127,-127,56,-127,109,-124,127,127,-104,-127,127,-33,-111,-127,-113,41,127,122,127,-6,-127,83,-93,127,127,127,6,121,108, -67,-36,-127,127,69,-27,41,-20,63,34,19,-85,7,68,84,-46,-21,-10,-4,-76,-43,-127,-85,-17,-127,53,54,-80,-35,51,120,-78,-106,-3,50,66,86,81,-33,-14,34,127,84,32,73,-43,43,43, 
  /* [0][2][][] */ -92,-57,-4,-20,-29,-31,55,-74,19,-40,32,-50,18,65,-62,-28,-72,-19,100,-66,3,-24,-65,-33,-23,74,99,-41,73,69,-34,0,-8,-83,-53,35,34,28,-86,-31,-12,-16,54,39,60,62,30,-95, -63,-66,-26,-95,88,43,101,-67,89,30,-32,-77,8,56,-127,-99,37,15,56,-63,-1,-3,-15,78,-43,88,94,-59,70,9,-45,-33,-80,-36,-76,64,40,35,-107,-40,1,-41,72,78,53,-105,32,-18, 2,-34,-49,-40,-20,1,53,-37,-57,32,-11,-35,-3,1,72,-39,33,17,23,-32,-39,-62,-21,-29,-57,23,49,-52,40,-51,64,-31,-96,7,18,52,22,39,-78,-11,-7,38,47,30,44,4,33,48, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.002852811710909009, 0.0044284653849899769, 0.0081063471734523773, 0.0078665325418114662, 0.033858515322208405, 0.005582557525485754, 0.0032618921250104904, 0.0033226653467863798, 0.0061006681062281132, 0.0037547624669969082, 0.0032297016587108374, 0.0021066616754978895, 0.0033695984166115522, 0.0025838990695774555, 0.0095338067039847374, 0.0083412015810608864, 0.0056705190800130367, 0.012654648162424564, 0.0065783699974417686, 0.0050678937695920467, 0.0061429208144545555, 0.014503664337098598, 0.0053418707102537155, 0.011654246598482132, 0.0029590057674795389, 0.0021736230701208115, 0.0021116826683282852, 0.002829565666615963, 0.0056941201910376549, 0.029348205775022507, 0.011710208840668201, 0.0026454944163560867, 0.0035186717286705971, 0.004751213826239109, 0.0072260405868291855, 0.0026213480159640312, 0.002528435317799449, 0.0014841865049675107, 0.0064589343965053558, 0.0027867010794579983, 0.0050643254071474075, 0.0061433897353708744, 0.0025737758260220289, 0.0035479059442877769, 0.0022504229564219713, 0.019382694736123085, 0.0021166631486266851, 0.0080074900761246681, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1022, -475, -84, 1421, 11285, 2646, -316, 3658, 1781, 1054, 167, 2855, 1328, 531, -861, 1222, 3428, 8655, 3205, -784, 1036, -1595, -155, 3253, -197, -569, 1729, -68, 4893, 13234, 2505, -216, 557, -132, 2401, 117, 465, -310, 1994, 1153, 1359, 2799, 147, -224, 613, 1744, 1344, -28, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0004669833870138973, 0.00036181666655465961, 0.00035859624040313065, 0.00032477491186000407, 8.4568462625611573e-05, 0.00030399527167901397, 0.00055171572603285313, 0.00025142333470284939, 0.00028893159469589591, 0.00060242123436182737, 0.0003877463168464601, 0.00029946549329906702, 0.00022393290419131517, 0.00035974101047031581, 0.00033014375367201865, 0.00025106294197030365, 0.00021114577248226851, 0.0001057070039678365, 0.00023869295546319336, 0.00035766119253821671, 0.0004294808313716203, 0.00017689052037894726, 0.00044919142965227365, 0.00025882449699565768, 0.00049199804197996855, 0.00081687385682016611, 0.00032344317878596485, 0.0010416657896712422, 0.00018267046834807843, 7.3793700721580535e-05, 0.0002970558125525713, 0.00075757561717182398, 0.00041164079448208213, 0.00044129471643827856, 0.00034086895175278187, 0.00037889264058321714, 0.00047059074859134853, 0.00063372473232448101, 0.00030914903618395329, 0.00048431835602968931, 0.00033542577875778079, 0.00027132706600241363, 0.00034251555916853249, 0.0005007548606954515, 0.00046823263983242214, 0.00027131772367283702, 0.00027836364461109042, 0.00038067493005655706, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -30,27,-2,-10,-71,-24,-127,25, 
  /* [1][0][][] */ 57,-69,-44,-71,127,-108,92,35, 
  /* [2][0][][] */ -89,108,-53,-127,62,-9,-21,27, 
  /* [3][0][][] */ 33,35,86,1,64,119,127,8, 
  /* [4][0][][] */ -56,-127,63,24,-67,-108,2,-29, 
  /* [5][0][][] */ 127,-19,78,74,-84,-9,8,-32, 
  /* [6][0][][] */ 21,51,127,-30,53,-48,-28,20, 
  /* [7][0][][] */ 20,3,-127,-31,-44,80,86,-65, 
  /* [8][0][][] */ -16,127,-51,4,71,105,38,54, 
  /* [9][0][][] */ 13,127,-35,89,22,-105,43,81, 
  /* [10][0][][] */ -8,-91,5,-24,-66,-127,-56,-60, 
  /* [11][0][][] */ -127,-77,103,44,-13,-83,91,54, 
  /* [12][0][][] */ -34,50,-127,80,28,-74,-74,87, 
  /* [13][0][][] */ 97,-127,98,81,9,24,36,-67, 
  /* [14][0][][] */ -56,106,-51,-127,-45,-88,-43,-71, 
  /* [15][0][][] */ 48,109,28,-7,33,-70,107,-127, 
  /* [16][0][][] */ -127,-116,-39,87,-77,18,-41,85, 
  /* [17][0][][] */ -51,-94,-127,45,-58,55,-45,70, 
  /* [18][0][][] */ -107,-86,-17,81,-31,67,-27,127, 
  /* [19][0][][] */ 63,-127,89,-106,8,-58,37,-47, 
  /* [20][0][][] */ 7,56,32,15,35,127,75,-25, 
  /* [21][0][][] */ 27,113,46,-34,42,-65,93,-127, 
  /* [22][0][][] */ 29,8,105,23,-9,127,28,-36, 
  /* [23][0][][] */ -99,-81,36,-91,82,115,-60,-127, 
  /* [24][0][][] */ -99,-80,38,-93,107,99,-44,-127, 
  /* [25][0][][] */ 127,16,-55,-14,20,32,-67,-4, 
  /* [26][0][][] */ -127,-37,-115,-30,-57,-42,8,-8, 
  /* [27][0][][] */ 71,34,-15,-51,-127,-18,80,98, 
  /* [28][0][][] */ -113,-124,21,49,-66,-127,9,-3, 
  /* [29][0][][] */ 127,101,22,-118,39,13,-48,-87, 
  /* [30][0][][] */ -90,-75,47,-94,78,103,-45,-127, 
  /* [31][0][][] */ 44,34,-20,127,-10,-50,2,16, 
  /* [32][0][][] */ -44,127,-12,27,31,71,-8,43, 
  /* [33][0][][] */ -26,127,-83,33,17,-27,-29,-8, 
  /* [34][0][][] */ -125,-95,-43,91,-2,2,17,127, 
  /* [35][0][][] */ -60,127,-35,-6,67,101,53,71, 
  /* [36][0][][] */ 70,31,2,-24,-127,-25,100,112, 
  /* [37][0][][] */ -61,107,35,26,-127,87,-29,-88, 
  /* [38][0][][] */ 29,37,35,13,127,63,101,48, 
  /* [39][0][][] */ -22,-74,33,-2,0,26,-100,127, 
  /* [40][0][][] */ -89,-57,-74,127,-41,18,5,67, 
  /* [41][0][][] */ 127,1,67,77,-63,8,20,-25, 
  /* [42][0][][] */ -35,4,-75,-127,57,-103,12,79, 
  /* [43][0][][] */ 31,-7,84,-2,34,127,85,11, 
  /* [44][0][][] */ -22,-18,-57,127,41,10,-35,-36, 
  /* [45][0][][] */ 68,96,94,-100,78,-31,3,-127, 
  /* [46][0][][] */ -34,-119,-35,31,-2,40,-65,127, 
  /* [47][0][][] */ 30,23,104,15,56,127,102,-5, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004543632734566927, 0.0035203865263611078, 0.0034890524111688137, 0.0031599793583154678, 0.00082283018855378032, 0.0029577987734228373, 0.0053680571727454662, 0.0024462868459522724, 0.0028112328145653009, 0.0058614094741642475, 0.0037726755253970623, 0.002913725096732378, 0.0021788117010146379, 0.0035001907963305712, 0.0032122167758643627, 0.0024427801836282015, 0.0020543960854411125, 0.0010285029420629144, 0.0023224232718348503, 0.0034799547865986824, 0.0041787419468164444, 0.0017211008816957474, 0.0043705212883651257, 0.0025182981044054031, 0.0047870189882814884, 0.0079479804262518883, 0.0031470218673348427, 0.010135149583220482, 0.0017773383297026157, 0.00071799440775066614, 0.0028902795165777206, 0.0073710228316485882, 0.0040051629766821861, 0.0042936881072819233, 0.0033165703061968088, 0.0036865314468741417, 0.0045787314884364605, 0.0061659845523536205, 0.0030079435091465712, 0.0047122975811362267, 0.003263609716668725, 0.0026399451307952404, 0.0033325916156172752, 0.0048722205683588982, 0.0045557874254882336, 0.0026398540940135717, 0.0027084092143923044, 0.0037038726732134819, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7744, -2110, 11337, -9784, 21922, 7655, -7645, 12010, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00022163303219713271, 0.00022104976233094931, 0.00017513911006972194, 0.000246934883762151, 0.00018123716290574521, 0.00015956320567056537, 0.00014350177661981434, 0.00024379954265896231, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -4,-7,-17,-66,-23,-29,15,-31,41,11,-24,1,102,127,-11,-91, 
  /* [1][0][][] */ 127,-45,-47,5,-50,75,-76,-50,-35,86,-31,-44,-13,4,-56,-17, 
  /* [2][0][][] */ -32,-96,35,37,46,-57,-75,-25,36,-99,24,-127,50,-26,-64,14, 
  /* [3][0][][] */ 38,6,10,27,0,63,-65,-12,127,48,12,12,11,-15,3,25, 
  /* [4][0][][] */ -90,-26,-34,-127,-26,26,56,-113,26,-31,-55,-33,-112,30,-38,-19, 
  /* [5][0][][] */ 91,52,71,-11,40,-55,-120,-127,-21,-77,78,45,-58,51,61,-35, 
  /* [6][0][][] */ 89,50,-127,-84,36,-69,2,-83,-36,27,-115,97,90,-92,22,63, 
  /* [7][0][][] */ -127,-5,103,-20,-61,6,1,-59,-55,67,86,-31,56,-28,26,27, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0094194039702415466, 0.0093946149572730064, 0.0074434122070670128, 0.010494732297956944, 0.0077025792561471462, 0.0067814360372722149, 0.0060988254845142365, 0.01036148052662611, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 24747, -502, -22, 2967, -276, 177, 9667, 909, -105, 281, -3060, 3283, -3115, -664, 158, -945, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 9.4068775069899857e-05, 0.00029256849666126072, 0.00015011604409664869, 0.00017622520681470633, 0.0017295517027378082, 0.0014110639458522201, 0.00018649184494279325, 0.0011149650672450662, 0.00026086973957717419, 0.0015445116441696882, 0.0001738683640724048, 0.00017584706074558198, 0.0001026949830702506, 0.00031651879544369876, 0.00025867606746032834, 0.00075048551661893725, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 0,-9,11,9,-19,11,5,16,4,-11,15,6,1,-5,-7,-2, 6,-4,2,3,14,-2,12,-26,-6,8,7,106,-8,25,-8,-1, 1,16,-1,9,0,-13,11,12,-4,1,7,-2,19,-3,-5,-1, 
  /* [0][1][][] */ 1,-9,13,10,127,-24,-127,-21,127,127,5,6,105,-25,4,-22, -127,127,127,5,-89,-91,-20,-101,19,-106,127,127,127,127,127,127, 19,9,6,9,-15,127,3,-9,-4,-13,11,7,29,-7,-6,-10, 
  /* [0][2][][] */ -6,-2,-5,-15,-19,15,50,8,-5,-8,14,6,-13,-1,-15,-15, 16,-23,-14,-127,6,-17,-7,127,-2,1,16,-19,3,-59,-22,-40, -1,-12,-5,-11,-3,-5,-2,-1,1,1,6,9,21,-8,-15,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0039979228749871254, 0.012434160336852074, 0.0063799316994845867, 0.0074895713478326797, 0.0735059455037117, 0.05997021496295929, 0.0079259034246206284, 0.047386016696691513, 0.011086964048445225, 0.065641745924949646, 0.0073894052766263485, 0.0074734999798238277, 0.0043645366095006466, 0.013452048413455486, 0.010993733070790768, 0.031895633786916733, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1246, 72, 317, 1873, 68119, 72879, 3622, 10563, 3465, 4841, 285, -237, 4228, -1466, -126, 37341, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00028162798844277859, 0.0016382783651351929, 0.00050600676331669092, 0.0002279409090988338, 2.0679806766565889e-05, 2.0119499822612852e-05, 0.00016177720681298524, 2.4727574782446027e-05, 0.0002516042732167989, 3.4572069125715643e-05, 0.0008028200245462358, 0.0013930096756666899, 0.00045091804349794984, 1.8525042833061889e-05, 0.0011417611967772245, 3.9721988287055865e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 24, 
  /* [1][2][][] */ 13, -2, -12, 
  /* [2][0][][] */ -24, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -13, -95, -80, 
  /* [3][0][][] */ 117, 123, 56, 
  /* [3][1][][] */ 0, -23, -16, 
  /* [3][2][][] */ -101, -127, -45, 
  /* [4][0][][] */ 18, -60, -1, 
  /* [4][1][][] */ 18, -127, -1, 
  /* [4][2][][] */ 5, -95, -21, 
  /* [5][0][][] */ -79, 11, -7, 
  /* [5][1][][] */ -127, 20, -4, 
  /* [5][2][][] */ -91, 7, -12, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -48, 57, -14, 
  /* [6][2][][] */ -34, -49, -86, 
  /* [7][0][][] */ 44, 32, -15, 
  /* [7][1][][] */ 127, 76, 8, 
  /* [7][2][][] */ 52, 26, 9, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -54, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -6, 65, 1, 
  /* [9][1][][] */ 0, 127, -7, 
  /* [9][2][][] */ 9, 95, -1, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 8, -18, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -84, 127, -45, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 112, 5, 
  /* [12][2][][] */ -79, 77, 4, 
  /* [13][0][][] */ 113, 42, 4, 
  /* [13][1][][] */ 127, 90, -25, 
  /* [13][2][][] */ 101, 127, 44, 
  /* [14][0][][] */ -30, -27, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -94, -38, -7, 
  /* [15][1][][] */ -110, -127, 1, 
  /* [15][2][][] */ -36, -106, -33, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.086381420493125916, 0.50249552726745605, 0.15520325303077698, 0.069914422929286957, 0.0063429456204175949, 0.0061710872687399387, 0.049620579928159714, 0.0075844838283956051, 0.07717248797416687, 0.010604004375636578, 0.24624232947826385, 0.42726629972457886, 0.13830634951591492, 0.0056820325553417206, 0.35020294785499573, 0.012183596380054951, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,120,120,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10277754068374634, } };
const TfArray<1, int> quant46_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,120,120,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,121,121,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.07345898449420929, } };
const TfArray<1, int> quant50_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.071097999811172485, } };
const TfArray<1, int> quant53_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.092699974775314331, } };
const TfArray<1, int> quant54_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.056558780372142792, } };
const TfArray<1, int> quant58_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.068804003298282623, } };
const TfArray<1, int> quant61_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.071893878281116486, } };
const TfArray<1, int> quant62_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.092027612030506134, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.12260404974222183, } };
const TfArray<1, int> quant66_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,30,30,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.067206338047981262, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,30,30,18 } };
const TfArray<1, float> quant69_scale = { 1, { 0.18921719491481781, } };
const TfArray<1, int> quant69_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,30,30,18 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension44, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 230400, (TfLiteIntArray*)&tensor_dimension46, 115200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension47, 691200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 702768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 702768, (TfLiteIntArray*)&tensor_dimension49, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 345600, (TfLiteIntArray*)&tensor_dimension50, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension51, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension53, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension55, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension57, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 221808, (TfLiteIntArray*)&tensor_dimension58, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension59, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension61, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 172800, (TfLiteIntArray*)&tensor_dimension62, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension63, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 100800, (TfLiteIntArray*)&tensor_dimension65, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension66, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension68, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16208, (TfLiteIntArray*)&tensor_dimension69, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
